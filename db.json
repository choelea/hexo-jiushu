{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","path":"libs/jquery/3.3.1/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1543978507852},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1543978507854},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1543978507855},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1543978507855},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1543978507856},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1543978507874},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1543980362233},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1543978507856},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1543978507858},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1543978507857},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1543978507857},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1543978507858},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1543978507858},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1543978507859},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1543978507859},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1543978507860},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1543978507860},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1543978507860},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1543978507861},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1543978507872},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1543978507872},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1543978507872},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1543978507873},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1543978507874},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1543978507873},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1543978507874},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1543978507875},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1543978507861},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1543978507862},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1543978507862},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1543978507863},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1543978507863},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1543978507864},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1543978507864},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1543978507864},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1543978507865},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1543978507865},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1543978507868},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1543978507869},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1543978507870},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1543978507871},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1543978507871},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1543978507871},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1543978507876},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1543978507881},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1543978507897},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1543978507898},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1543978507898},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1543978507900},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1543978507900},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1543978507899},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1543978507900},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1543978507906},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1543978507907},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1543978507909},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1543978507908},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1543978507866},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1543978507866},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1543978507866},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1543978507867},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1543978507867},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1543978507867},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1543978507880},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1543978507881},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1543978507877},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1543978507876},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1543978507877},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1543978507878},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1543978507878},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1543978507879},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1543978507878},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1543978507879},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1543978507880},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1543978507883},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1543978507879},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1543978507884},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1543978507893},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1543978507902},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1543978507904},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1543978507903},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1543978507905},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1543978507905},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1543978507906},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1543978507892},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1543978507889},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1543978507897},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-2-X-Mapping.md","hash":"b100b676212b1454fa70e6a858407957bd8e3ebb","modified":1520211812234},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-2.4-Restful-Api.md","hash":"b6f9d30804df5347d51810217dd4051bc75be03b","modified":1541034196998},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-2_4-Restful-Api.md","hash":"efe1982eb7b67b5141c580114e264eef39687516","modified":1541034196998},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-6_2-Restful-API.md","hash":"5b25b555488e3079495b02c754c854e07f7c8678","modified":1541034196999},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack.md","hash":"fa9ce0dd20eb3704544195c0912eccf01f55e0fa","modified":1528376666115},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting.md","hash":"50bd4222136984623a19ceddc3d0a07a5f016a52","modified":1528376666118},{"_id":"source/_posts/Elastic-Technologies/Elasticsearch-Mapping.md","hash":"f45cbb797b1e063e565f245cd10402b324590561","modified":1520211812239},{"_id":"source/_posts/Elastic-Technologies/elasticsearch-fuzzy-query.md","hash":"c1fafbc0d02af39e214a686bc883914446ee9460","modified":1541397961817},{"_id":"source/_posts/Elastic-Technologies/elk.png","hash":"3cd000cb5d139d25d47e3cd8bcd1cf8a1d773a26","modified":1528376666123},{"_id":"source/_posts/Elastic-Technologies/elastic-charm.png","hash":"27e30af831b7d315566aba8edd98e7cd2119649e","modified":1528376666122},{"_id":"source/_posts/Dev-Ops/Centos-Common-Commands.md","hash":"15cbd864f7603975b6a664a8dec5618a1ca056ac","modified":1541397961817},{"_id":"source/_posts/Dev-Ops/Git-Commands.md","hash":"71b759f779c40f8411496f0c5560c93cf66024d0","modified":1541034196996},{"_id":"source/_posts/Dev-Ops/Java-IDE-Useful-Skills.md","hash":"8a4c2acc7d8478ddaba15df29ba1a79009253e57","modified":1541034196997},{"_id":"source/_posts/Dev-Ops/Maven-Private-Repository-Server.md","hash":"a72db44fc08dcd1450510a2f9c0261f0d97d96b7","modified":1520211812228},{"_id":"source/_posts/Dev-Ops/Maven-usage-of-parent.md","hash":"4f391561cdfa748ac161d097dd66f3d5832a5cd9","modified":1528376666103},{"_id":"source/_posts/Dev-Ops/Nginx-Technologies.md","hash":"ce2519fae4860043870da4e8cf1731eb31e5a260","modified":1521613561575},{"_id":"source/_posts/Dev-Ops/Shell-learning-notes.md","hash":"0fb9172322c17481f7b45855ee9a9d8646971e86","modified":1520211812232},{"_id":"source/_posts/Dev-Ops/Windows-Commands.md","hash":"4741891233e42ef29f0ca5d0948307d91aed2ba5","modified":1520211812233},{"_id":"source/_posts/Dev-Ops/git-push-remove.png","hash":"9538be433a6ba0c477a878a555b18c2d0cee7182","modified":1528376666105},{"_id":"source/_posts/Dev-Ops/git-rebase.png","hash":"5414f4b299e3920f2fc31c998ccaf6db5a2dd368","modified":1528376666107},{"_id":"source/_posts/Dev-Ops/maven-create-parent-2.png","hash":"e857aa9e7977ab20c875029f8e4ba05364c88bfd","modified":1528376666110},{"_id":"source/_posts/Dev-Ops/maven-create-parent.png","hash":"6c119da4b938ec7c0d4cb1beca340eb94010a13b","modified":1528376666112},{"_id":"source/_posts/Dev-Ops/maven-create-parent-1.png","hash":"e0cb40aefafb91c4e6d46c86675965d120e20e57","modified":1528376666109},{"_id":"source/_posts/Database-Technologies/Mongodb-vs-Mysql-basic.md","hash":"ad835e6a7dbacaab8b08e7b210bf725a7bb78e99","modified":1528376666096},{"_id":"source/_posts/Database-Technologies/Mysql-Administration.md","hash":"bfb1ec2eea469c76fe0521ae8cbdade4f4d34d89","modified":1541397961816},{"_id":"source/_posts/Database-Technologies/mongodb-command.md","hash":"4aef140f374d71f88619e9be970d0e6268a59670","modified":1541034196995},{"_id":"source/_posts/Database-Technologies/mysql-product-category.png","hash":"e1f535cf4e2f9a54a31590a0768a3347f977fa73","modified":1528376666098},{"_id":"source/_posts/Dev-Ops/spring-io-initiator.png","hash":"93f2517d9bdf073559fed30bf195f7f5f12dd2c6","modified":1528376666114},{"_id":"themes/minos/.gitignore","hash":"1e32cd03954ae9a15e790df87605f9bc11c33e4c","modified":1543980924587},{"_id":"themes/minos/LICENSE","hash":"c3aeede5ce76bbbf93cec6656644b16bc08f206b","modified":1543980924597},{"_id":"themes/minos/README.md","hash":"c407e58328acba3e8a9442dbc8401c79cc9e8f36","modified":1543980924597},{"_id":"themes/minos/_config.yml.example","hash":"7b5ddc62970927039597ece115bfd6666eda8e4d","modified":1543980924597},{"_id":"themes/minos/package-lock.json","hash":"1fdf3ebc293bb2df47fe5c4f833c6797d5e8a546","modified":1543980924637},{"_id":"themes/minos/package.json","hash":"76b6439e405b7b479535d40bad6d982957ac4fa7","modified":1543980924637},{"_id":"themes/minos/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1543980924557},{"_id":"themes/minos/.git/config","hash":"de3aa6cbc1a3fc93e3b62e0d5597da2db66960a9","modified":1543980924567},{"_id":"themes/minos/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1543980901372},{"_id":"themes/minos/.git/index","hash":"fb9c654f83d354844a8e338b0a5a0890879e64c7","modified":1543982135326},{"_id":"themes/minos/.git/packed-refs","hash":"f14fe3108707d3cc28f10613a3d64a225101b182","modified":1543980924547},{"_id":"themes/minos/languages/en.yml","hash":"b0106e055e348cff3dc04bbfa92eaf078887914a","modified":1543980924597},{"_id":"themes/minos/languages/ko.yml","hash":"5cdf4a031fc3fcbab392dec89053e2417485e4c7","modified":1543980924597},{"_id":"themes/minos/languages/es.yml","hash":"2492235c429294caef66d220d2b958d147d2a8e7","modified":1543980924597},{"_id":"themes/minos/languages/ru.yml","hash":"c7d59fc5906eeb9230ca794515cabd6064e853bc","modified":1543980924597},{"_id":"themes/minos/layout/archive.ejs","hash":"4239b7b97f02d86e83878ee0c32b0eccb9893420","modified":1543980924597},{"_id":"themes/minos/languages/zh-cn.yml","hash":"ba7eabb49391804f1d83acd1a4e03d1a73e02089","modified":1543980924597},{"_id":"themes/minos/layout/categories.ejs","hash":"b609b00fd03b521689dfc2d267aead94d49fcc80","modified":1543980924597},{"_id":"themes/minos/layout/category.ejs","hash":"587fc7dac77115589ed8cb368ed4a8a2a6f129af","modified":1543980924607},{"_id":"themes/minos/layout/index.ejs","hash":"64c432857172b1c775bf82c0a60ca1ecdc7d9d21","modified":1543980924623},{"_id":"themes/minos/layout/layout.ejs","hash":"d1293320d738ac7f097869a4e74f6089a79d1c46","modified":1543980924624},{"_id":"themes/minos/layout/post.ejs","hash":"bba00a681d797817baf34737467be2eca3bdcfbb","modified":1543980924628},{"_id":"themes/minos/layout/tag.ejs","hash":"b72bf2ebd9c5d9d7546f448a4331f13dc6b49950","modified":1543980924635},{"_id":"themes/minos/layout/tags.ejs","hash":"9b54bfb0c56e54ff89da9a0a390414ef13a14931","modified":1543980924636},{"_id":"themes/minos/scripts/01_check.js","hash":"84c3badfc58d9cb1ae9452c73ef685910a87e0ea","modified":1543980924638},{"_id":"themes/minos/scripts/10_i18n.js","hash":"fddb40448e99c9e3db47a88bd99d0e31cd22d1e3","modified":1543980924639},{"_id":"themes/minos/scripts/99_config.js","hash":"c4496562e4ecae5e49dbc57490edae0682f77989","modified":1543980924640},{"_id":"themes/minos/scripts/99_content.js","hash":"f05b70f9acccfc85385a89b63b49aa4320dc700d","modified":1543980924641},{"_id":"themes/minos/scripts/99_tags.js","hash":"b4267774742039961197b5a64983f951182d5234","modified":1543980924644},{"_id":"themes/minos/scripts/rfc5646.js","hash":"50de178e1fcd2224c99db56227652eb1dbaabe40","modified":1543980924645},{"_id":"source/_posts/Elastic-Technologies/Logstash-Filter.md","hash":"f12ee066396d1cede2ff450943bdef0c4bc06e5e","modified":1520211812240},{"_id":"source/_posts/Elastic-Technologies/Metricbeat-Usage.md","hash":"0b7a5060780ef89bee5a9cfa8f1b18e31e514f40","modified":1528376666119},{"_id":"source/_posts/Elastic-Technologies/Nignx-Kibana-Security.md","hash":"873175aa087ef8710b0b6afb10aa336b5709a2ce","modified":1520211812242},{"_id":"source/_posts/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight.md","hash":"b6f9d30804df5347d51810217dd4051bc75be03b","modified":1541034196999},{"_id":"source/_posts/Elastic-Technologies/spring-data-elasticsearch-highlight.md.del","hash":"bafacc2dc30176fcff5c1dbe37aeb95efdd6f1cc","modified":1541034197000},{"_id":"source/_posts/Elastic-Technologies/spring-data-elasticsearch-productdocs.png","hash":"4ce7fdf2588e9a495d9c681ea13dfdeb91a7b9aa","modified":1528376666127},{"_id":"source/_posts/Elastic-Technologies/spring-data-elasticsearch-quick-start.md","hash":"1552dc697710fec5d662f6f2a2b8d8356d7417e7","modified":1541034197003},{"_id":"source/_posts/Elastic-Technologies/spring-data-elasticsearch-quick-start-2.md","hash":"c786e0fbf42dd571c43cb9b77376df8ca7c59c85","modified":1541034197001},{"_id":"themes/minos/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1543980901372},{"_id":"themes/minos/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1543980901372},{"_id":"themes/minos/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1543980901384},{"_id":"themes/minos/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1543980901383},{"_id":"themes/minos/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1543980901385},{"_id":"themes/minos/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1543980901386},{"_id":"themes/minos/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1543980901387},{"_id":"themes/minos/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1543980901388},{"_id":"themes/minos/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1543980901390},{"_id":"themes/minos/.git/logs/HEAD","hash":"06def863c0f16d372e338e7afe014d6ef67cd558","modified":1543980924567},{"_id":"themes/minos/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1543980901391},{"_id":"themes/minos/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1543980924608},{"_id":"themes/minos/layout/comment/disqus.ejs","hash":"2e35b7578478cf25544ae7f4b3535521ad73c5a2","modified":1543980924609},{"_id":"themes/minos/layout/comment/facebook.ejs","hash":"cd2fe44bc6be457d4cb6dc43c75023e9f83d66f7","modified":1543980924610},{"_id":"themes/minos/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1543980924611},{"_id":"themes/minos/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1543980924612},{"_id":"themes/minos/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1543980924612},{"_id":"themes/minos/layout/comment/valine.ejs","hash":"8de28aae5fac5d1aafed602b537813e2940034d6","modified":1543980924614},{"_id":"themes/minos/layout/comment/youyan.ejs","hash":"bcb4b7282a7bcfcb514133e752c0f9d606b3c4d5","modified":1543980924614},{"_id":"themes/minos/layout/common/footer.ejs","hash":"c52c678e3fd336651dd1fd7e7241515adb52a897","modified":1543980924617},{"_id":"themes/minos/layout/common/article.ejs","hash":"8b553b16b23e4e2712442426d7a35f7ec80f22a7","modified":1543980924616},{"_id":"themes/minos/layout/common/head.ejs","hash":"22d802a37494abe1306ac692da585dffbd9c3399","modified":1543980924618},{"_id":"themes/minos/layout/common/languages.ejs","hash":"9b503282ca6e665ca41412b277debf4cd15635fd","modified":1543980924619},{"_id":"themes/minos/layout/common/navbar.ejs","hash":"806ce4f00f0b275b62985e2bdc6b0af2507117ad","modified":1543980924620},{"_id":"themes/minos/layout/common/paginator.ejs","hash":"2ea7e6c7349d4529bfcfd50c51088c7475743686","modified":1543980924621},{"_id":"themes/minos/layout/common/scripts.ejs","hash":"0262a28c2e0f4a9e57fe1da871c517909710eca3","modified":1543980924622},{"_id":"themes/minos/layout/plugins/gallery.ejs","hash":"a1b9814c597f0e6b74be2bb5550e50c2915ae482","modified":1543980924626},{"_id":"themes/minos/layout/plugins/google-analytics.ejs","hash":"725fd626b6535c6d05b88e736eeefbca6d39e7e8","modified":1543980924627},{"_id":"themes/minos/layout/plugins/mathjax.ejs","hash":"700c9fbe39016a4d51426812e150af780020ef77","modified":1543980924627},{"_id":"themes/minos/layout/search/google-cse.ejs","hash":"ab3aa6c57d7dd045b8838280548aa447ec38ffa6","modified":1543980924631},{"_id":"themes/minos/layout/search/insight.ejs","hash":"2ef94c3ddae02db57c9dc5cf69da72b1c90c9236","modified":1543980924632},{"_id":"themes/minos/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1543980924635},{"_id":"themes/minos/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1543980924635},{"_id":"themes/minos/source/css/insight.scss","hash":"b7340f343e8bfe967b21b502d6cb5b78295fd9e0","modified":1543980924649},{"_id":"themes/minos/source/css/style.scss","hash":"83fcab33b028737e1bf99c625cf20119c36bf6cd","modified":1543980924651},{"_id":"themes/minos/source/images/check.svg","hash":"16e9a53d7c49621be8e3f1a28b11bcf5e751105e","modified":1543980924652},{"_id":"themes/minos/source/images/exclamation.svg","hash":"213125a083bcef89806b4285190e050eef2660f2","modified":1543980924652},{"_id":"themes/minos/source/images/info.svg","hash":"60613abd8f8522c6cebdbb4bf7bf3fcc482245bd","modified":1543980924653},{"_id":"themes/minos/source/images/question.svg","hash":"e4005d2eabfbd3bdd291236f56a4d385e3b337b2","modified":1543980924654},{"_id":"themes/minos/source/images/logo.png","hash":"4e012d9ba58cb8f87ee775262ef871c158ac5948","modified":1543980924654},{"_id":"themes/minos/source/images/quote-left.svg","hash":"d2561fa8d13e63ff196b71232a5968415ec6e372","modified":1543980924655},{"_id":"themes/minos/source/js/insight.js","hash":"4be407e66c2c45333a8cf1a064a9302cd6d90422","modified":1543980924656},{"_id":"themes/minos/source/js/script.js","hash":"b51152561a894d1b0afee2d908364e69b253bfc2","modified":1543980924657},{"_id":"source/_posts/Elastic-Technologies/kibana-statics.png","hash":"f575b4c5ed8f25a43a19679112ab03ffcafadd81","modified":1528376666126},{"_id":"themes/minos/.git/objects/pack/pack-0ce782aac131e9b08a3a1909c4397ad5f1832b3f.idx","hash":"c24c7bad23dac95995e98c76e7403ed70b0fc927","modified":1543980924390},{"_id":"themes/minos/.git/refs/heads/master","hash":"ea2a316ccb5ffdc55fde669f5b68945ab21b6229","modified":1543980924567},{"_id":"themes/minos/.git/logs/refs/heads/master","hash":"06def863c0f16d372e338e7afe014d6ef67cd558","modified":1543980924567},{"_id":"themes/minos/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1543980924557},{"_id":"themes/minos/.git/logs/refs/remotes/origin/HEAD","hash":"06def863c0f16d372e338e7afe014d6ef67cd558","modified":1543980924557},{"_id":"themes/minos/.git/objects/pack/pack-0ce782aac131e9b08a3a1909c4397ad5f1832b3f.pack","hash":"75855e5ad3893b043eb6d88d085f8c324202c30d","modified":1543980924417},{"_id":"themes/minos/_config.yml","hash":"7b5ddc62970927039597ece115bfd6666eda8e4d","modified":1543982060818},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1544077782424},{"_id":"themes/hueman/LICENSE","hash":"f0c7cd0dcb6f00b98393878068ff3e6bf5f321f1","modified":1544077782427},{"_id":"themes/hueman/README.md","hash":"e40d2179c43b418e7763306e1fee45062fac0c57","modified":1544077782428},{"_id":"themes/hueman/_config.yml","hash":"1a9118953f384940db616c310740363f9bca1af1","modified":1544078086702},{"_id":"themes/hueman/_config.yml.example","hash":"1a9118953f384940db616c310740363f9bca1af1","modified":1544077782429},{"_id":"themes/hueman/package.json","hash":"32b072ae0ab43c297e57dfd66bc8e4e6a589c329","modified":1544077782475},{"_id":"themes/hueman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1544077782390},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1544077769108},{"_id":"themes/hueman/.git/config","hash":"d13542b3636907339d2a56aec044869e7cbf5761","modified":1544077782401},{"_id":"themes/hueman/.git/index","hash":"bb319eee505aa4d92cb2d6d46a1e118c842d7637","modified":1544077895165},{"_id":"themes/hueman/.git/packed-refs","hash":"2f7860317adef1f16adb707ca97b73e62cea57f5","modified":1544077782377},{"_id":"themes/hueman/languages/ca.yml","hash":"d88625a06b434db3b0ed37b0d5f64ee31e91c077","modified":1544077782431},{"_id":"themes/hueman/languages/en.yml","hash":"3a93280606196c642eca66b58b149bf648d71724","modified":1544077782432},{"_id":"themes/hueman/languages/es.yml","hash":"92bbf2ebd70a08d5011e5c8c31597f2dd1ea9901","modified":1544077782433},{"_id":"themes/hueman/languages/id.yml","hash":"dfd5d4ddf4797385093a8a569b71b18aa902e0c2","modified":1544077782436},{"_id":"themes/hueman/languages/fr.yml","hash":"8dd5712d1d3848732a30d53e65db42acfcfaa718","modified":1544077782434},{"_id":"themes/hueman/languages/ko.yml","hash":"e8dbf0a133dab72ea0ae5b98663f7086a83d4771","modified":1544077782438},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"4caa8df5aba98b23672bbe7d70674f5f67744b95","modified":1544077782439},{"_id":"themes/hueman/languages/ru.yml","hash":"fb81066411e37a2472797d4d40a7c409d768d34a","modified":1544077782440},{"_id":"themes/hueman/languages/tr.yml","hash":"e28af4a5b366e116bbbfcd21b45c9c6996f6bfe7","modified":1544077782441},{"_id":"themes/hueman/languages/vi.yml","hash":"4f5d30e07dc3b32a605ffe2a546365157353836d","modified":1544077782441},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"6059406a2ae4c0aeea63c0e67ec9a53a01bf1fcb","modified":1544077782442},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"c9c8a1bc525d00e05def14552bb52f83bcc58728","modified":1544077782443},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1544077782445},{"_id":"themes/hueman/layout/author.ejs","hash":"de99b00563d7c7b00cc7fd4e74e77c171891fbdc","modified":1544077782446},{"_id":"themes/hueman/layout/category.ejs","hash":"de99b00563d7c7b00cc7fd4e74e77c171891fbdc","modified":1544077782447},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1544077782459},{"_id":"themes/hueman/layout/layout.ejs","hash":"4376f9a13a19551ec72aa41b824c635f0a847c55","modified":1544077782459},{"_id":"themes/hueman/languages/ja.yml","hash":"64389f836e1965a55e85e57384b6b7276020f769","modified":1544077782437},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1544077782459},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1544077782475},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1544077782459},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"dc9c3910279551bc8515abf9fdf9d98d3b53f852","modified":1544077782423},{"_id":"themes/hueman/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1544077782475},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"1fe763bf492813dd51276d48dd61a1855b40a53e","modified":1544077782491},{"_id":"themes/hueman/scripts/excerpt.js","hash":"61118ffd53158c6620010f6362752745f8372469","modified":1544077782475},{"_id":"themes/hueman/languages/hu.yml","hash":"1a503b6667515a4027850d3c645d34fa2b496411","modified":1544077782435},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1544077769124},{"_id":"themes/hueman/.git/logs/HEAD","hash":"7238e5576df79106357573e3752be85ab582112d","modified":1544077782398},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1544077769108},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1544077769108},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1544077769108},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1544077769108},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1544077769108},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1544077769124},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1544077769124},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1544077769124},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1544077769124},{"_id":"themes/hueman/layout/comment/changyan.ejs","hash":"1354c7e54f8fb29084b773dd5c0872ef63c2da85","modified":1544077782448},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"9b6eaf3c6da487012483a6d930d0b50ac4f1a307","modified":1544077782449},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"84988da295ab8c509e24299c2c857d707cf78f77","modified":1544077782450},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1544077782451},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"abcd299083a456e92ca91707b92b0da0eead325f","modified":1544077782452},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1544077782450},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"b8da0b50fad39ed39f6674c30112fc0b53acd07b","modified":1544077782452},{"_id":"themes/hueman/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1544077782453},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"47e8e1001dde153c1528812420335f8484d9e50d","modified":1544077782454},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"e5f5561a26343013e57a1f5c049c4f22f878d013","modified":1544077782455},{"_id":"themes/hueman/layout/comment/valine.ejs","hash":"5ebbe64d73c91a08b3fdbe71f6cbd69c05b0feef","modified":1544077782454},{"_id":"themes/hueman/layout/common/article.ejs","hash":"2bbde7fa9060731ffc14373f4b8f6da6d49bf121","modified":1544077782457},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"fd32d9ed053e54656b0bd4604a6a25cd522232b7","modified":1544077782458},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"424647122986c501165b36a512cb48c392142f51","modified":1544077782457},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"1a18f070934ca300a4ae9672f975b6f9aa83b2f0","modified":1544077782459},{"_id":"themes/hueman/layout/common/head.ejs","hash":"8724ca0222477f216a3be73bb1235f28da63cd09","modified":1544077782459},{"_id":"themes/hueman/layout/common/header.ejs","hash":"a27f027fc60d49ca84381a08c7102aa7d3118ec4","modified":1544077782459},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"271ad89a94bbced9f3f7377c145d86b62df0fee9","modified":1544077782459},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"d9f3f3a9d5b02306d0c40eca6ac8b6450f760e36","modified":1544077782459},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"24cafe46466aa4b0b0f93e0028e5c977771ea3e5","modified":1544077782459},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"41a612220b2994d9c7f6345c13237de38f10c08f","modified":1544077782459},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"dc075c744e866c3cea8460439953fa2a073d6475","modified":1544077782459},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1544077782459},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"6db533bb9d86cccdb1a855818d9c24bd8f268195","modified":1544077782459},{"_id":"themes/hueman/layout/plugin/statcounter.ejs","hash":"e2fe080dc8f62cba6791bef3d4ecb6454024f2c4","modified":1544077782459},{"_id":"themes/hueman/layout/pwa/index.ejs","hash":"0ca08d5a308a82fbf372821c4f0fdef0df98af78","modified":1544077782459},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"46515988503a8b8dd07d0cf3ccabf519b4fad2d1","modified":1544077782475},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1b232e45234638a08cdc34d33cd7378636649822","modified":1544077782475},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1544077782475},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1544077782475},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1544077782475},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"015715441fc4075e8c8d8c51f523634c19296bc7","modified":1544077782475},{"_id":"themes/hueman/layout/share/index.ejs","hash":"a0d5e32c68e1e6d3f2f954420bbb48675736b895","modified":1544077782475},{"_id":"themes/hueman/layout/share/default.ejs","hash":"9a12d26f8d01557f69ca403a4b6f96fab7b45bd7","modified":1544077782475},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"038b7d02aa765f6eb222c23356246ee3594b2965","modified":1544077782475},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"4bf2c1433166017450a3e7d265570b34d59195eb","modified":1544077782475},{"_id":"themes/hueman/layout/widget/catalog.ejs","hash":"02c7fe79b53e34f8aa3854c4c205ecfd7caffd6c","modified":1544077782475},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"4f39c49773590a8c854aab6c09623afb1de865b5","modified":1544077782475},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"dd092bbf28104482210b4c4a734e551f7536f525","modified":1544077782475},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"c62a9abcf3d0f2941346f433510eb9bd843ee8c1","modified":1544077782475},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"49c61ba1e57a76ab03053ef1b885ddeaa121c7ce","modified":1544077782475},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"a979a257a0e8720de8c052233840c1ddde95ea37","modified":1544077782475},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"744f0a0a9249745c7afd8abb0faba2cdb5b6811c","modified":1544077782475},{"_id":"themes/hueman/source/css/_extend.styl","hash":"8476764f75db59f94fbabebc5ddbf8fd4523c453","modified":1544077782491},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"0e41183083909fa8d0b9cd6d7ebc5bcacded1b8f","modified":1544077782542},{"_id":"themes/hueman/source/css/_variables.styl","hash":"5d8c6c0acda65f663b5cf7ccd19f25e495e9f4ea","modified":1544077782542},{"_id":"themes/hueman/source/css/style.styl","hash":"99623727296205ab418b220529a17bdd18ffa56c","modified":1544077782542},{"_id":"themes/hueman/source/js/main.js","hash":"ae83bd5df9da13a0dcc4a85d89f8bfe7e3ac93b7","modified":1544077782542},{"_id":"themes/hueman/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1544077782542},{"_id":"themes/hueman/.git/objects/pack/pack-9b25c5c5a1e50160412fe7ea0960e1611ed2080e.idx","hash":"49d34a3a65baaacefa3878870921a770437030c9","modified":1544077782196},{"_id":"themes/hueman/.git/refs/heads/master","hash":"44517445595a82dd3f9872dd4758d14f47e2b010","modified":1544077782394},{"_id":"themes/hueman/layout/common/post/author.ejs","hash":"3e0a968ec92cc4d464d705190615f5eed649875a","modified":1544077782459},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"79c2a591274f863a78dcadaaf63f087ad7b9e7e1","modified":1544077782459},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1544077782459},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"f7a755a93abed84337f2519eae788f20a88c4bf3","modified":1544077782459},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1544077782459},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"e164edee924be00641013f0fd4e53f55b51f90a8","modified":1544077782459},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1544077782491},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"be660dbee7c8840d80654febaa97745a2f7f80eb","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1544077782506},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1544077782522},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1544077782537},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1544077782539},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1544077782540},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1544077782541},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1544077782541},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"46aa36ef93ee77bfa97adad6ab2530a1057a1596","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"1a8e73eafa536aeaa7a34725763c7d7164a621b1","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"c42627622550f02395087c53a1a193f162fded65","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"850f1f84987159da6fa2efdfa95cc82d0a2e59cd","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"c5ab092de0661c344cb5176580443f126d6e31cc","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"64e4b94f1e88d795c8866d261856680ca6faee2a","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"b2941a6a171d2bfb3000be71664c04cc2a2c5964","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"7533eddd2aba59663d21b14d248e485e3ca173d2","modified":1544077782542},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"b29d88a9411f06974aa67381a3f3f39fb3b69feb","modified":1544077782542},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1544077782506},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1544077782542},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1544077782542},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1544077782542},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1544077782542},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1544077782542},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1544077782589},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1544077782589},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1544077782640},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"5780e94a2a38ffa02322edaa780cb58c3199efa7","modified":1544077782644},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"7238e5576df79106357573e3752be85ab582112d","modified":1544077782396},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1544077782382},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1544077782558},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1544077782558},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1544077782589},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1544077782605},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1544077782620},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1544077782620},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1544077782638},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1544077782639},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1544077782642},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1544077782643},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1544077782642},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1544077782644},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1544077782644},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1544077782644},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1544077782558},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1544077782558},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1544077782574},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1544077782589},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1544077782589},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"7238e5576df79106357573e3752be85ab582112d","modified":1544077782388},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1544077782574},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1544077782574},{"_id":"themes/hueman/.git/objects/pack/pack-9b25c5c5a1e50160412fe7ea0960e1611ed2080e.pack","hash":"39b693a4f3fcde7b647c4d345a0776313e1adc36","modified":1544077782208},{"_id":"themes/material-x/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1544079178088},{"_id":"themes/material-x/README.md","hash":"56683a0f799ab57075e805d63101b25cedfc4864","modified":1544079178088},{"_id":"themes/material-x/_config.yml","hash":"e1a71fec077761908dd4451b8f59bff424e108b1","modified":1544082718696},{"_id":"themes/material-x/.gitignore","hash":"4b5e4eb66070da8433cd43d75af0de341e04a2ed","modified":1544079178087},{"_id":"themes/material-x/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1544079178053},{"_id":"themes/material-x/.git/config","hash":"0aafc80a7ec40cda1db9ab3f3ca163b75ff34b3f","modified":1544079178062},{"_id":"themes/material-x/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1544079171959},{"_id":"themes/material-x/.git/index","hash":"e545c59585b61de97096a4672bf36afdce6963c6","modified":1544080188315},{"_id":"themes/material-x/.git/packed-refs","hash":"287b05207c2c9010b063e7adbf2d9801882849ba","modified":1544079178045},{"_id":"themes/material-x/layout/archive.ejs","hash":"e5c2e2a36147379f247788468225e884a32e8e8e","modified":1544079178111},{"_id":"themes/material-x/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1544079178113},{"_id":"themes/material-x/layout/layout.ejs","hash":"0b6baf5cb6048d06f8cb68b4f1e1360c7cd768d0","modified":1544079178114},{"_id":"themes/material-x/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1544079178115},{"_id":"themes/material-x/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1544079178117},{"_id":"themes/material-x/source/style.less","hash":"a003dab76221b7a4076bb7a15a60dcc456fad672","modified":1544079178138},{"_id":"themes/material-x/layout/post.ejs","hash":"f93d8ea38272ca1956134f13760a5a59a01657cf","modified":1544079178116},{"_id":"themes/material-x/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1544079178113},{"_id":"themes/material-x/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1544079171959},{"_id":"themes/material-x/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1544079171975},{"_id":"themes/material-x/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1544079171975},{"_id":"themes/material-x/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1544079171975},{"_id":"themes/material-x/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1544079171975},{"_id":"themes/material-x/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1544079171990},{"_id":"themes/material-x/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1544079171990},{"_id":"themes/material-x/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1544079171990},{"_id":"themes/material-x/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1544079171990},{"_id":"themes/material-x/.git/logs/HEAD","hash":"6701c4b75aa8fb76f7eae846f0dbf73514171594","modified":1544079178058},{"_id":"themes/material-x/.github/ISSUE_TEMPLATE/------.md","hash":"fedc2e8f113a2e57a5aaa59cf7057a0a01ea42bd","modified":1544079178085},{"_id":"themes/material-x/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1544079171975},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"1c40b57acfa87c92c490b1d571da6129283ef2c5","modified":1544079178091},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"7a3c2b0f2ee4bded349df4ec775b8533e58f0d35","modified":1544079178095},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"ca5e2f293174daabb7e4d4d5e5231b249ba01ef0","modified":1544079178096},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"d8033dcfb786d2ce4979b113213fbe0da17a024f","modified":1544079178100},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"7ef69bac5fd36eadc62e4249334dfe2d2c862caa","modified":1544079178101},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"48910c89cef76d9ae6f0b6a7efcce202bd764526","modified":1544079178103},{"_id":"themes/material-x/layout/_partial/loading.ejs","hash":"429547e4ceb5655c5ca615fa5d70b2458848661a","modified":1544079178104},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"098a95facef5b0df13520c323882fee85640fc69","modified":1544079178104},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"3d2e98bc061c8c391ef1cd6e9559f848afd127e9","modified":1544079178105},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"22b0367f7153d56920ae542bffb6142bbdc1a0e3","modified":1544079178106},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"3338b894aeffb838176b3ea4bde73d830fa5280f","modified":1544079178107},{"_id":"themes/material-x/layout/_widget/announcement.ejs","hash":"663f50c772a053fd5c16a32a7070518ac6b3aa6e","modified":1544079178108},{"_id":"themes/material-x/layout/_widget/categories.ejs","hash":"76c9ad40ba8c67595654d5d8f6cd673f0011af7f","modified":1544079178109},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"c54f66c9235354d2522b382514d07b9c4cc5264b","modified":1544079178108},{"_id":"themes/material-x/layout/_widget/links.ejs","hash":"98d273cc9f2582785975b3852e62753ea1bfc87f","modified":1544079178109},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"02b44919dc514984b42682c5e29192ed7ccba37b","modified":1544079178110},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"4eaf1e2c2a85bb66dad7a7362b33ac00fef371ea","modified":1544079178110},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"8552c3562e59234747c8b734b1bb2e8fc9789359","modified":1544079178111},{"_id":"themes/material-x/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1544079178120},{"_id":"themes/material-x/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1544079178120},{"_id":"themes/material-x/source/fonts/icomoon.svg","hash":"d2f6755d619e577d90537e7e92640a2e1b833f6f","modified":1544079178119},{"_id":"themes/material-x/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1544079178118},{"_id":"themes/material-x/source/fonts/selection.json","hash":"63e57a0fdd6138c8872f8cafa24b951eaf9fd564","modified":1544079178121},{"_id":"themes/material-x/source/js/jquery.fitvids.js","hash":"498d2b1a5cfd53ce9b320c9ccd7d53ea7b04ffb7","modified":1544079178123},{"_id":"themes/material-x/source/js/search.js","hash":"0ef711626e3baa6238eb4eebe5a93e06732c0105","modified":1544079178124},{"_id":"themes/material-x/source/less/_archive.less","hash":"4ea472e5379c8037a4254839bbae1664ecbf060e","modified":1544079178125},{"_id":"themes/material-x/source/js/app.js","hash":"0ba16e0d459ffed3d4ba10d7d196538b1170eaed","modified":1544079178122},{"_id":"themes/material-x/source/less/_article.less","hash":"9d7ec216625dec2618491c2ffcb29b5ca400a54c","modified":1544082243273},{"_id":"themes/material-x/source/less/_base.less","hash":"c99b26a22e04c2890b4ced1a91e91eeed87578aa","modified":1544082187242},{"_id":"themes/material-x/source/less/_defines.less","hash":"77bc0da2871ccf8dbf62d192abd6b4993513de3a","modified":1544082323919},{"_id":"themes/material-x/source/less/_fonts.less","hash":"cdb77d9bd7a3e62ec3f29ece0b258719a8c5691c","modified":1544079178129},{"_id":"themes/material-x/source/less/_footer.less","hash":"9d2346bb59e80f73fc8c08ed1ed5c420b1e3a0a0","modified":1544082253357},{"_id":"themes/material-x/source/less/_normalize.less","hash":"de483dd353f70754b87fe993850484b6af1bc920","modified":1544079178133},{"_id":"themes/material-x/source/less/_header.less","hash":"8113468456cdfa1b65a5a45ee5a035e760cfc7a5","modified":1544082266906},{"_id":"themes/material-x/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1544079178134},{"_id":"themes/material-x/source/less/_side.less","hash":"200c822cacd8798e6ecb2e31db3c6b8e71798c44","modified":1544079178135},{"_id":"themes/material-x/source/less/_search.less","hash":"db7eb6fa3cdeb702f877214e389c508f468ee327","modified":1544079178135},{"_id":"themes/material-x/source/less/_toc.less","hash":"2c82313ad2258310d109521567539e8c589d4c12","modified":1544079178136},{"_id":"themes/material-x/source/less/_tog.less","hash":"5cc70283b31ba2865956aa33d3c6f3b4a99cfead","modified":1544079178136},{"_id":"themes/material-x/source/less/_typo.less","hash":"f597c0213ff6d10d86f1bd8d71018a2a604dde71","modified":1544079178137},{"_id":"themes/material-x/source/less/_widget.less","hash":"f0b1de4959a64e05329167bf80b0a04d271c4d3b","modified":1544082270771},{"_id":"themes/material-x/source/less/_main.less","hash":"e2d5df5e5c6dfd893c3c3a6906e2ecda2df98633","modified":1544079178132},{"_id":"themes/material-x/.git/objects/pack/pack-303ded5b6cac6eda9280b8aad41d8ee37d144eef.idx","hash":"a79e993286f13a158309943f0ed48f3460f1d6db","modified":1544079177899},{"_id":"themes/material-x/.git/refs/heads/master","hash":"741ba41a14679fae068e1423ce69eaa83d85a5f3","modified":1544079178055},{"_id":"themes/material-x/layout/_partial/post/recommended_posts.ejs","hash":"024f49b8daecc4179d25f64882230e9c20d22d70","modified":1544079178106},{"_id":"themes/material-x/.git/logs/refs/heads/master","hash":"6701c4b75aa8fb76f7eae846f0dbf73514171594","modified":1544079178057},{"_id":"themes/material-x/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1544079178047},{"_id":"themes/material-x/.git/logs/refs/remotes/origin/HEAD","hash":"6701c4b75aa8fb76f7eae846f0dbf73514171594","modified":1544079178052},{"_id":"themes/material-x/.git/objects/pack/pack-303ded5b6cac6eda9280b8aad41d8ee37d144eef.pack","hash":"34f013caa7efc351d2950c9edd1e74a455f1c053","modified":1544079177908}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-05T02:54:57.777Z","updated":"2018-12-05T03:26:02.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam2lfw00007sq3cdm7eym9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"---\ntitle:  文档的title，页面及列表都会展示\ndescription: 描述这个页面的信息\nshowOnHome: false\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n# 欢迎使用\n本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：\n\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- **丰富的快捷键**\n\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","source":"_posts/Elastic-Technologies/Elasticsearch-2.4-Restful-Api.md","raw":"---\ntitle:  文档的title，页面及列表都会展示\ndescription: 描述这个页面的信息\nshowOnHome: false\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n# 欢迎使用\n本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：\n\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- **丰富的快捷键**\n\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","slug":"Elastic-Technologies/Elasticsearch-2.4-Restful-Api","published":1,"date":"2018-12-05T03:27:52.588Z","updated":"2018-11-01T01:03:16.998Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xbk00017sq32ooawfnb","content":"<hr>\n<p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<h1 id=\"欢迎使用\"><a href=\"#欢迎使用\" class=\"headerlink\" title=\"欢迎使用\"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p>\n<ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<h1 id=\"欢迎使用\"><a href=\"#欢迎使用\" class=\"headerlink\" title=\"欢迎使用\"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p>\n<ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n"},{"title":"Kibana 5.x 加强安全 - x-pack篇","description":"使用插件x-pack来加强Kibana 5.x 的访问控制","_content":" 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 \n \n - 系统： centos7\n - 内容： 增加authentication & enable ssl\n \n elastic 技术栈 的另外一个重要的角色是x-pack. \n\n![elastic-charm](http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png)\n\n### ES安装xpack插件\n参考[安装xpack](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)\nRun bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:\n```\nbin/elasticsearch-plugin install x-pack\n```\n\n### Kibana 安装xpack 插件\n参考[安装xpack](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)\n\nInstall X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.\n```\nbin/kibana-plugin install x-pack\n```\n### 依次启动elasticsearch 和kibana\n\n\n### 修改用户elastic 和 kibana的密码\n[X-Pack 文档：修改密码](https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html)\n> X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.\n\n```\ncurl -XPUT -u elastic 'localhost:9200/_xpack/security/user/elastic/_password' -d '{\n  \"password\" : \"elasticpassword\"\n}'\n```\n```\ncurl -XPUT -u elastic 'localhost:9200/_xpack/security/user/kibana/_password' -d '{\n  \"password\" : \"kibanapassword\"\n}'\n```\n> CURL授权\n在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露\n\n### Enable Kibana SSL\n[Using Kibana in a Production Environment](https://www.elastic.co/guide/en/kibana/current/production.html)\n配置上证书的路径即可：\n```\n# SSL for outgoing requests from the Kibana Server (PEM formatted)\nserver.ssl.key: /path/to/your/server.key\nserver.ssl.cert: /path/to/your/server.crt\n```\n修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的**Dev Tools** 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）\n### 创建用户logstash_writer\n[官方参考](https://www.elastic.co/guide/en/x-pack/5.1/logstash.html)\n上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。\n\n```\n[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. {:url=>#<URI::HTTP:0x17b5a1bd URL:http://localhost:9200>, :error_type=>LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=>\"Got response code '401' contact Elasticsearch at URL 'http://localhost:9200/'\"}\n[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] {}\n\n```\n- 先创建一个role：logstash_writer\n\n```\nPOST _xpack/security/role/logstash_writer\n{\n  \"cluster\": [\"manage_index_templates\", \"monitor\"],\n  \"indices\": [\n    {\n      \"names\": [ \"logstash-*\",\"business-index-*\"], \n      \"privileges\": [\"write\",\"delete\",\"create_index\"]\n    }\n  ]\n}\n```\n\n - 再创建一个用户：logstash_internal拥有Role：logstash_writer\n\n```\nPOST /_xpack/security/user/logstash_internal\n{\n  \"password\" : \"changeme\",\n  \"roles\" : [ \"logstash_writer\"],\n  \"full_name\" : \"Internal Logstash User\"\n}\n```\n> 上面的操作也可以通过Kibana的Management UI来操作\n\n- 配置logstash.conf\n\n```\noutput {\n  elasticsearch {\n    ...\n    user => logstash_internal\n    password => changeme\n  }\n```\n\n> logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考[Enabling Anonymous Access](https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html) 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？\n\n### 给Kibana用户加上index的读的权限\nKibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录\n登录后打开DevTools进行ES API的操作。\n\n\n修改后停掉kibana服务。修改kibana的配置：\n> Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:\n\n```\nelasticsearch.password: \"s0m3th1ngs3cr3t\"\n```\n\n \n### 坑 （Tricky Part）\n\n 1. /etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。[elastic community](https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913)","source":"_posts/Elastic-Technologies/Elasticsearch-Kibana-Security-xpack.md","raw":"---\ntitle: Kibana 5.x 加强安全 - x-pack篇\ndescription: 使用插件x-pack来加强Kibana 5.x 的访问控制\n---\n 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 \n \n - 系统： centos7\n - 内容： 增加authentication & enable ssl\n \n elastic 技术栈 的另外一个重要的角色是x-pack. \n\n![elastic-charm](http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png)\n\n### ES安装xpack插件\n参考[安装xpack](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)\nRun bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:\n```\nbin/elasticsearch-plugin install x-pack\n```\n\n### Kibana 安装xpack 插件\n参考[安装xpack](https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html)\n\nInstall X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.\n```\nbin/kibana-plugin install x-pack\n```\n### 依次启动elasticsearch 和kibana\n\n\n### 修改用户elastic 和 kibana的密码\n[X-Pack 文档：修改密码](https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html)\n> X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.\n\n```\ncurl -XPUT -u elastic 'localhost:9200/_xpack/security/user/elastic/_password' -d '{\n  \"password\" : \"elasticpassword\"\n}'\n```\n```\ncurl -XPUT -u elastic 'localhost:9200/_xpack/security/user/kibana/_password' -d '{\n  \"password\" : \"kibanapassword\"\n}'\n```\n> CURL授权\n在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露\n\n### Enable Kibana SSL\n[Using Kibana in a Production Environment](https://www.elastic.co/guide/en/kibana/current/production.html)\n配置上证书的路径即可：\n```\n# SSL for outgoing requests from the Kibana Server (PEM formatted)\nserver.ssl.key: /path/to/your/server.key\nserver.ssl.cert: /path/to/your/server.crt\n```\n修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的**Dev Tools** 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）\n### 创建用户logstash_writer\n[官方参考](https://www.elastic.co/guide/en/x-pack/5.1/logstash.html)\n上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。\n\n```\n[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. {:url=>#<URI::HTTP:0x17b5a1bd URL:http://localhost:9200>, :error_type=>LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=>\"Got response code '401' contact Elasticsearch at URL 'http://localhost:9200/'\"}\n[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] {}\n\n```\n- 先创建一个role：logstash_writer\n\n```\nPOST _xpack/security/role/logstash_writer\n{\n  \"cluster\": [\"manage_index_templates\", \"monitor\"],\n  \"indices\": [\n    {\n      \"names\": [ \"logstash-*\",\"business-index-*\"], \n      \"privileges\": [\"write\",\"delete\",\"create_index\"]\n    }\n  ]\n}\n```\n\n - 再创建一个用户：logstash_internal拥有Role：logstash_writer\n\n```\nPOST /_xpack/security/user/logstash_internal\n{\n  \"password\" : \"changeme\",\n  \"roles\" : [ \"logstash_writer\"],\n  \"full_name\" : \"Internal Logstash User\"\n}\n```\n> 上面的操作也可以通过Kibana的Management UI来操作\n\n- 配置logstash.conf\n\n```\noutput {\n  elasticsearch {\n    ...\n    user => logstash_internal\n    password => changeme\n  }\n```\n\n> logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考[Enabling Anonymous Access](https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html) 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？\n\n### 给Kibana用户加上index的读的权限\nKibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录\n登录后打开DevTools进行ES API的操作。\n\n\n修改后停掉kibana服务。修改kibana的配置：\n> Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:\n\n```\nelasticsearch.password: \"s0m3th1ngs3cr3t\"\n```\n\n \n### 坑 （Tricky Part）\n\n 1. /etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。[elastic community](https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913)","slug":"Elastic-Technologies/Elasticsearch-Kibana-Security-xpack","published":1,"date":"2018-12-05T03:27:52.598Z","updated":"2018-06-07T13:04:26.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xbk00027sq3h985vgmd","content":"<p> 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 </p>\n<ul>\n<li>系统： centos7</li>\n<li><p>内容： 增加authentication &amp; enable ssl</p>\n<p>elastic 技术栈 的另外一个重要的角色是x-pack. </p>\n</li>\n</ul>\n<p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png\" alt=\"elastic-charm\"></p>\n<h3 id=\"ES安装xpack插件\"><a href=\"#ES安装xpack插件\" class=\"headerlink\" title=\"ES安装xpack插件\"></a>ES安装xpack插件</h3><p>参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html\" target=\"_blank\" rel=\"noopener\">安装xpack</a><br>Run bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Kibana-安装xpack-插件\"><a href=\"#Kibana-安装xpack-插件\" class=\"headerlink\" title=\"Kibana 安装xpack 插件\"></a>Kibana 安装xpack 插件</h3><p>参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html\" target=\"_blank\" rel=\"noopener\">安装xpack</a></p>\n<p>Install X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"依次启动elasticsearch-和kibana\"><a href=\"#依次启动elasticsearch-和kibana\" class=\"headerlink\" title=\"依次启动elasticsearch 和kibana\"></a>依次启动elasticsearch 和kibana</h3><h3 id=\"修改用户elastic-和-kibana的密码\"><a href=\"#修改用户elastic-和-kibana的密码\" class=\"headerlink\" title=\"修改用户elastic 和 kibana的密码\"></a>修改用户elastic 和 kibana的密码</h3><p><a href=\"https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html\" target=\"_blank\" rel=\"noopener\">X-Pack 文档：修改密码</a></p>\n<blockquote>\n<p>X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;elasticpassword&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/kibana/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;kibanapassword&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CURL授权<br>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</p>\n</blockquote>\n<h3 id=\"Enable-Kibana-SSL\"><a href=\"#Enable-Kibana-SSL\" class=\"headerlink\" title=\"Enable Kibana SSL\"></a>Enable Kibana SSL</h3><p><a href=\"https://www.elastic.co/guide/en/kibana/current/production.html\" target=\"_blank\" rel=\"noopener\">Using Kibana in a Production Environment</a><br>配置上证书的路径即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SSL for outgoing requests from the Kibana Server (PEM formatted)</span><br><span class=\"line\">server.ssl.key: /path/to/your/server.key</span><br><span class=\"line\">server.ssl.cert: /path/to/your/server.crt</span><br></pre></td></tr></table></figure></p>\n<p>修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的<strong>Dev Tools</strong> 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）</p>\n<h3 id=\"创建用户logstash-writer\"><a href=\"#创建用户logstash-writer\" class=\"headerlink\" title=\"创建用户logstash_writer\"></a>创建用户logstash_writer</h3><p><a href=\"https://www.elastic.co/guide/en/x-pack/5.1/logstash.html\" target=\"_blank\" rel=\"noopener\">官方参考</a><br>上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. &#123;:url=&gt;#&lt;URI::HTTP:0x17b5a1bd URL:http://localhost:9200&gt;, :error_type=&gt;LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=&gt;&quot;Got response code &apos;401&apos; contact Elasticsearch at URL &apos;http://localhost:9200/&apos;&quot;&#125;</span><br><span class=\"line\">[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先创建一个role：logstash_writer</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _xpack/security/role/logstash_writer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;],</span><br><span class=\"line\">  &quot;indices&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;names&quot;: [ &quot;logstash-*&quot;,&quot;business-index-*&quot;], </span><br><span class=\"line\">      &quot;privileges&quot;: [&quot;write&quot;,&quot;delete&quot;,&quot;create_index&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再创建一个用户：logstash_internal拥有Role：logstash_writer</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_xpack/security/user/logstash_internal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;changeme&quot;,</span><br><span class=\"line\">  &quot;roles&quot; : [ &quot;logstash_writer&quot;],</span><br><span class=\"line\">  &quot;full_name&quot; : &quot;Internal Logstash User&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的操作也可以通过Kibana的Management UI来操作</p>\n</blockquote>\n<ul>\n<li>配置logstash.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    user =&gt; logstash_internal</span><br><span class=\"line\">    password =&gt; changeme</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html\" target=\"_blank\" rel=\"noopener\">Enabling Anonymous Access</a> 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？</p>\n</blockquote>\n<h3 id=\"给Kibana用户加上index的读的权限\"><a href=\"#给Kibana用户加上index的读的权限\" class=\"headerlink\" title=\"给Kibana用户加上index的读的权限\"></a>给Kibana用户加上index的读的权限</h3><p>Kibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录<br>登录后打开DevTools进行ES API的操作。</p>\n<p>修改后停掉kibana服务。修改kibana的配置：</p>\n<blockquote>\n<p>Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.password: &quot;s0m3th1ngs3cr3t&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑-（Tricky-Part）\"><a href=\"#坑-（Tricky-Part）\" class=\"headerlink\" title=\"坑 （Tricky Part）\"></a>坑 （Tricky Part）</h3><ol>\n<li>/etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。<a href=\"https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913\" target=\"_blank\" rel=\"noopener\">elastic community</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p> 此文之前，假定读者已经一次完成了Kibana和elasticsearch的安装。参考官方文档，安装后默认配置已经可以连通kibana和es。 </p>\n<ul>\n<li>系统： centos7</li>\n<li><p>内容： 增加authentication &amp; enable ssl</p>\n<p>elastic 技术栈 的另外一个重要的角色是x-pack. </p>\n</li>\n</ul>\n<p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/elastic-charm.png\" alt=\"elastic-charm\"></p>\n<h3 id=\"ES安装xpack插件\"><a href=\"#ES安装xpack插件\" class=\"headerlink\" title=\"ES安装xpack插件\"></a>ES安装xpack插件</h3><p>参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html\" target=\"_blank\" rel=\"noopener\">安装xpack</a><br>Run bin/elasticsearch-plugin install from ES_HOME on each node in your cluster:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-plugin install x-pack</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Kibana-安装xpack-插件\"><a href=\"#Kibana-安装xpack-插件\" class=\"headerlink\" title=\"Kibana 安装xpack 插件\"></a>Kibana 安装xpack 插件</h3><p>参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/installing-xpack.html\" target=\"_blank\" rel=\"noopener\">安装xpack</a></p>\n<p>Install X-Pack into Kibana by running bin/kibana-plugin in your Kibana installation directory.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kibana-plugin install x-pack</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"依次启动elasticsearch-和kibana\"><a href=\"#依次启动elasticsearch-和kibana\" class=\"headerlink\" title=\"依次启动elasticsearch 和kibana\"></a>依次启动elasticsearch 和kibana</h3><h3 id=\"修改用户elastic-和-kibana的密码\"><a href=\"#修改用户elastic-和-kibana的密码\" class=\"headerlink\" title=\"修改用户elastic 和 kibana的密码\"></a>修改用户elastic 和 kibana的密码</h3><p><a href=\"https://www.elastic.co/guide/en/x-pack/current/security-getting-started.html\" target=\"_blank\" rel=\"noopener\">X-Pack 文档：修改密码</a></p>\n<blockquote>\n<p>X-Pack security provides a built-in elastic superuser you can use to start setting things up. The default password for the elastic user is changeme.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/elastic/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;elasticpassword&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT -u elastic &apos;localhost:9200/_xpack/security/user/kibana/_password&apos; -d &apos;&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;kibanapassword&quot;</span><br><span class=\"line\">&#125;&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CURL授权<br>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权。 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</p>\n</blockquote>\n<h3 id=\"Enable-Kibana-SSL\"><a href=\"#Enable-Kibana-SSL\" class=\"headerlink\" title=\"Enable Kibana SSL\"></a>Enable Kibana SSL</h3><p><a href=\"https://www.elastic.co/guide/en/kibana/current/production.html\" target=\"_blank\" rel=\"noopener\">Using Kibana in a Production Environment</a><br>配置上证书的路径即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SSL for outgoing requests from the Kibana Server (PEM formatted)</span><br><span class=\"line\">server.ssl.key: /path/to/your/server.key</span><br><span class=\"line\">server.ssl.cert: /path/to/your/server.crt</span><br></pre></td></tr></table></figure></p>\n<p>修改了超级用户的密码，enable ssl后，就可以放心的去使用kibana的<strong>Dev Tools</strong> 或者chrome插件（sense）进行大部分API 的操作。 （在此之前需要ssh到服务器通过curl来操作以保证安全）</p>\n<h3 id=\"创建用户logstash-writer\"><a href=\"#创建用户logstash-writer\" class=\"headerlink\" title=\"创建用户logstash_writer\"></a>创建用户logstash_writer</h3><p><a href=\"https://www.elastic.co/guide/en/x-pack/5.1/logstash.html\" target=\"_blank\" rel=\"noopener\">官方参考</a><br>上面步骤完成后会发现logstash推送给es报错了。因为现在ES需要用户名和密码了。 这里我们需要创建一个用户拥有write, delete, and create_index的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2016-12-23T20:42:19,350][WARN ][logstash.outputs.elasticsearch] Attempted to resurrect connection to dead ES instance, but got an error. &#123;:url=&gt;#&lt;URI::HTTP:0x17b5a1bd URL:http://localhost:9200&gt;, :error_type=&gt;LogStash::Outputs::ElasticSearch::HttpClient::Pool::BadResponseCodeError, :error=&gt;&quot;Got response code &apos;401&apos; contact Elasticsearch at URL &apos;http://localhost:9200/&apos;&quot;&#125;</span><br><span class=\"line\">[2016-12-23T20:42:20,132][WARN ][logstash.shutdownwatcher ] &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>先创建一个role：logstash_writer</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _xpack/security/role/logstash_writer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;cluster&quot;: [&quot;manage_index_templates&quot;, &quot;monitor&quot;],</span><br><span class=\"line\">  &quot;indices&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;names&quot;: [ &quot;logstash-*&quot;,&quot;business-index-*&quot;], </span><br><span class=\"line\">      &quot;privileges&quot;: [&quot;write&quot;,&quot;delete&quot;,&quot;create_index&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再创建一个用户：logstash_internal拥有Role：logstash_writer</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /_xpack/security/user/logstash_internal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;password&quot; : &quot;changeme&quot;,</span><br><span class=\"line\">  &quot;roles&quot; : [ &quot;logstash_writer&quot;],</span><br><span class=\"line\">  &quot;full_name&quot; : &quot;Internal Logstash User&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的操作也可以通过Kibana的Management UI来操作</p>\n</blockquote>\n<ul>\n<li>配置logstash.conf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    user =&gt; logstash_internal</span><br><span class=\"line\">    password =&gt; changeme</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>logstash, elasticsearch, kibana 如果在同一网络，而暴露出去的只有kibana的话，logstash和elasticsearch 之前是无需授权的。可以参考<a href=\"https://www.elastic.co/guide/en/x-pack/current/anonymous-access.html\" target=\"_blank\" rel=\"noopener\">Enabling Anonymous Access</a> 另外，logstash和elasticsearch之间如果需要授权，会不会有性能的影响？</p>\n</blockquote>\n<h3 id=\"给Kibana用户加上index的读的权限\"><a href=\"#给Kibana用户加上index的读的权限\" class=\"headerlink\" title=\"给Kibana用户加上index的读的权限\"></a>给Kibana用户加上index的读的权限</h3><p>Kibana安装xpack后默认就需要登录了。也可以用超级用户elastic登录<br>登录后打开DevTools进行ES API的操作。</p>\n<p>修改后停掉kibana服务。修改kibana的配置：</p>\n<blockquote>\n<p>Once you change the password, you need to specify it with the elasticsearch.password property in kibana.yml:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.password: &quot;s0m3th1ngs3cr3t&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"坑-（Tricky-Part）\"><a href=\"#坑-（Tricky-Part）\" class=\"headerlink\" title=\"坑 （Tricky Part）\"></a>坑 （Tricky Part）</h3><ol>\n<li>/etc/logstash/conf.d 下不要有多余的文件。比如logstash.conf.bak， 似乎logstash会读这个文件夹下的不止logstash.conf这个文件配置。logstash.conf.bak 会导致死循环一样的重启。<a href=\"https://discuss.elastic.co/t/logstash-endless-loop-with-starting-and-stopping/69913\" target=\"_blank\" rel=\"noopener\">elastic community</a></li>\n</ol>\n"},{"_content":"---\ntitle: 使用ELK来做日志归总\ndescription:  阐述使用ELK来做日志归总\n...\n\n# ELK 初探\nELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: [漫谈ELK在大数据运维中的应用](https://blog.csdn.net/lively1982/article/details/50678657)\n## 平台\n* CentOS 7 \n* Oracle JDK 8\n* Kibana 4.5.2\n* Elaticsearch 2.3.4\n* logstash 2.3.4\n* filebeat 1.2.3\n查看version command： `filebeat --version`\n## 系统架构图\n![elk](http://tech.jiu-shu.com/Elastic-Technologies/elk.png)\n## 软件的安装\n采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。\n### logstash 安装\n- **Download and install the public signing key**\n\n```\nrpm --import https://packages.elastic.co/GPG-KEY-elasticsearch\n```\n- **添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo**\n\n```\n[logstash-2.3]\nname=Logstash repository for 2.3.x packages\nbaseurl=https://packages.elastic.co/logstash/2.3/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n- **安装**\n\n```\nyum install logstash\n```\n- **随系统自动启动**\n```\nsudo chkconfig --add filebeat\n```\n### 其他软件的repositories\n**filebeat**\n\n```\n[beats]\nname=Elastic Beats Repository\nbaseurl=https://packages.elastic.co/beats/yum/el/$basearch\nenabled=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\ngpgcheck=1\n```\n**elasticsearch [官方介绍](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html)**\n\n```\n[elasticsearch-2.x]\nname=Elasticsearch repository for 2.x packages\nbaseurl=https://packages.elastic.co/elasticsearch/2.x/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n**kibana [在线文档](https://www.elastic.co/guide/en/kibana/current/setup.html)**\n\n```\n[kibana-4.5]\nname=Kibana repository for 4.5.x packages\nbaseurl=http://packages.elastic.co/kibana/4.5/centos\ngpgcheck=1\ngpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n**查看服务状态**\n\n```\nservie logstash status\n```\n\n**查看服务文件路径**\n\n```\nrpm -ql logstash\n```\n## FileBeat 使用\nfilebeat 安装后的配置文件存放于：/etc/filebeat/下\n修改配置文件filebeat.yml\n**1， 修改文件的路径：比如：/home/osboxes/app.log**\n```\nfilebeat:\n  prospectors:\n    -\n      paths:\n        - \"/home/osboxes/app.log\"\n```\n**2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash**\n只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。\n\n```\noutput:\n  logstash:\n    hosts: [\"127.0.0.1:5044\"]\n\n    # Optional load balance the events between the Logstash hosts\n    #loadbalance: true\n```\nfilebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：`filebeat -configtest -e.` **filebeat只能配置一个output项，修改配置后需要重启**\n1，找到Console output，打开注解\n\n```\n##Console output\n   console:\n    # Pretty print json event\n    pretty: true\n```\n2， 停止filebeat服务 `sudo service filebeat stop`，手动启动filebeat来方便我们观察console输出`sudo filebeat -e -c /etc/filebeat/filebeat.yml`。(On windows: `filebeat.exe -e -c filebeat.yml`)\n3， 新开窗口输出信息至文件/var/log/app.log\n```\necho \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\" >> app.log\n```\n4，切换至filebeat的启动窗口可以看到如下的输出。\n\n```\n[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml\n{\n  \"@timestamp\": \"2016-07-11T13:44:43.926Z\",\n  \"beat\": {\n    \"hostname\": \"osboxes\",\n    \"name\": \"osboxes\"\n  },\n  \"count\": 1,\n  \"fields\": null,\n  \"input_type\": \"log\",\n  \"message\": \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\",\n  \"offset\": 130,\n  \"source\": \"/home/osboxes/app.log\",\n  \"type\": \"log\"\n}\n\n```\n## LogStash 配置\n 上面的小测做完后，将filebeat的配置改回输出到logstash。\n### 连通filebeat和logstash\n **1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf**\n\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  stdout{}\n}\n```\n\n修改后可以通过命令验证配置是否正确：\n\n```\nsudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest\n```\n\n**2, 启动logstash**\n采用命令启动方便从console观察输出。`sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf`如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log\n**3，启动filebeat 然后向文件app.log 写入log**\n\n```\necho \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\" >> app.log\n```\n**4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash**\n\n```\n[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf \nSettings: Default pipeline workers: 1\nPipeline main started\n2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\n\n```\n### 使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）\n**1， 修改logstash.conf 添加filter，重启logstash**\n\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\nfilter {\n  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace\n  if [message] =~ \"\\tat\" {\n    grok {\n      match => [\"message\", \"^(\\tat)\"]\n      add_tag => [\"stacktrace\"]\n    }\n  }\n\n  #Grokking Spring Boot's default log format\n  grok {\n    match => [ \"message\",\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[(?<thread>[A-Za-z0-9-]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*:\\s+(?<logmessage>.*)\",\n               \"message\",\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\\s+(?<logmessage>.*)\"\n             ]\n  }\n\n  #Parsing out timestamps which are in timestamp field thanks to previous grok section\n  date {\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n  }\n}\noutput {\n  stdout{\n   codec => rubydebug\n  }\n```\n**2，写入log到文件app.log**\n\n```\necho \"2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\" >> app.log\n\n```\n**3， 切换logstash查看输出**\n\n```\n{\n       \"message\" => \"2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\",\n      \"@version\" => \"1\",\n    \"@timestamp\" => \"2016-06-29T16:14:09.477Z\",\n         \"count\" => 1,\n        \"fields\" => nil,\n        \"source\" => \"/home/osboxes/app.log\",\n        \"offset\" => 987,\n          \"type\" => \"log\",\n    \"input_type\" => \"log\",\n          \"beat\" => {\n        \"hostname\" => \"osboxes\",\n            \"name\" => \"osboxes\"\n    },\n          \"host\" => \"osboxes\",\n          \"tags\" => [\n        [0] \"beats_input_codec_plain_applied\"\n    ],\n     \"timestamp\" => \"2016-06-29 17:14:09.477\",\n         \"level\" => \"INFO\",\n           \"pid\" => \"6244\",\n        \"thread\" => \"main\",\n         \"class\" => \"faultConfiguringBeanFactoryPostProcessor\",\n    \"logmessage\" => \"No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\"\n}\n\n```\n至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。\n\n### 修改logstash配置，输出到elasticsearch\n修改配置文件的output。 \n\n```\noutput {\n    elasticsearch {\n    }\n}\n```\n用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置`hosts => \"es-machine:9092`指定远程Elasticsearch实例。\n### 查看结果\n一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）\n\n### 安装Sense\n进入/opt/kibana/ 运行：`$sudo ./bin/kibana plugin --install elastic/sense`\nYou should now be able to access Sense with a web browser on http://localhost:5601/app/sense\n\n\n\n## spring boot 日志配置\n**尽量采用统一的日志输出格式**\n1, JPA 的sql输出\n\n```\n#spring.jpa.show-sql = true #不推荐这种方式\nlogging.level.org.hibernate.SQL=DEBUG\n```\n\n## 常见的部署方式\n由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 **注意：**当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。\n**打开logstash的端口：**\n\n```\n$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent\n$ sudo firewall-cmd --reload\n```\n**filebeat的配置修改**\n\n```\nlogstash:\n    # The Logstash hosts\n    hosts: [\"192.168.1.186:5044\"]\n```\n**修改hostName**\n如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源\n\n```\n$ hostnamectl status\n# hostnamectl set-hostname Your-New-Host-Name-Here\n```\n\n## 关于日志采集的策略\n（网上未提及此topic）\n配置logstash是件麻烦事情。 一下两种策略互相冲突\n**1， 保证所有的log都index到ES**\n这中策略方便用户查找问题， 因为所有的log都可以搜索到\n**2， 严格过滤， 只提取我们需要的log信息**\n这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。\n\n## 服务器时间设置\n最好保证日志源的服务器时间和ELK的数据库服务器时间一直\n```\n# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n","source":"_posts/Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting.md","raw":"---\ntitle: 使用ELK来做日志归总\ndescription:  阐述使用ELK来做日志归总\n...\n\n# ELK 初探\nELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: [漫谈ELK在大数据运维中的应用](https://blog.csdn.net/lively1982/article/details/50678657)\n## 平台\n* CentOS 7 \n* Oracle JDK 8\n* Kibana 4.5.2\n* Elaticsearch 2.3.4\n* logstash 2.3.4\n* filebeat 1.2.3\n查看version command： `filebeat --version`\n## 系统架构图\n![elk](http://tech.jiu-shu.com/Elastic-Technologies/elk.png)\n## 软件的安装\n采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。\n### logstash 安装\n- **Download and install the public signing key**\n\n```\nrpm --import https://packages.elastic.co/GPG-KEY-elasticsearch\n```\n- **添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo**\n\n```\n[logstash-2.3]\nname=Logstash repository for 2.3.x packages\nbaseurl=https://packages.elastic.co/logstash/2.3/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n- **安装**\n\n```\nyum install logstash\n```\n- **随系统自动启动**\n```\nsudo chkconfig --add filebeat\n```\n### 其他软件的repositories\n**filebeat**\n\n```\n[beats]\nname=Elastic Beats Repository\nbaseurl=https://packages.elastic.co/beats/yum/el/$basearch\nenabled=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\ngpgcheck=1\n```\n**elasticsearch [官方介绍](https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html)**\n\n```\n[elasticsearch-2.x]\nname=Elasticsearch repository for 2.x packages\nbaseurl=https://packages.elastic.co/elasticsearch/2.x/centos\ngpgcheck=1\ngpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n**kibana [在线文档](https://www.elastic.co/guide/en/kibana/current/setup.html)**\n\n```\n[kibana-4.5]\nname=Kibana repository for 4.5.x packages\nbaseurl=http://packages.elastic.co/kibana/4.5/centos\ngpgcheck=1\ngpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n```\n**查看服务状态**\n\n```\nservie logstash status\n```\n\n**查看服务文件路径**\n\n```\nrpm -ql logstash\n```\n## FileBeat 使用\nfilebeat 安装后的配置文件存放于：/etc/filebeat/下\n修改配置文件filebeat.yml\n**1， 修改文件的路径：比如：/home/osboxes/app.log**\n```\nfilebeat:\n  prospectors:\n    -\n      paths:\n        - \"/home/osboxes/app.log\"\n```\n**2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash**\n只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。\n\n```\noutput:\n  logstash:\n    hosts: [\"127.0.0.1:5044\"]\n\n    # Optional load balance the events between the Logstash hosts\n    #loadbalance: true\n```\nfilebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：`filebeat -configtest -e.` **filebeat只能配置一个output项，修改配置后需要重启**\n1，找到Console output，打开注解\n\n```\n##Console output\n   console:\n    # Pretty print json event\n    pretty: true\n```\n2， 停止filebeat服务 `sudo service filebeat stop`，手动启动filebeat来方便我们观察console输出`sudo filebeat -e -c /etc/filebeat/filebeat.yml`。(On windows: `filebeat.exe -e -c filebeat.yml`)\n3， 新开窗口输出信息至文件/var/log/app.log\n```\necho \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\" >> app.log\n```\n4，切换至filebeat的启动窗口可以看到如下的输出。\n\n```\n[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml\n{\n  \"@timestamp\": \"2016-07-11T13:44:43.926Z\",\n  \"beat\": {\n    \"hostname\": \"osboxes\",\n    \"name\": \"osboxes\"\n  },\n  \"count\": 1,\n  \"fields\": null,\n  \"input_type\": \"log\",\n  \"message\": \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\",\n  \"offset\": 130,\n  \"source\": \"/home/osboxes/app.log\",\n  \"type\": \"log\"\n}\n\n```\n## LogStash 配置\n 上面的小测做完后，将filebeat的配置改回输出到logstash。\n### 连通filebeat和logstash\n **1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf**\n\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\n\noutput {\n  stdout{}\n}\n```\n\n修改后可以通过命令验证配置是否正确：\n\n```\nsudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest\n```\n\n**2, 启动logstash**\n采用命令启动方便从console观察输出。`sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf`如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log\n**3，启动filebeat 然后向文件app.log 写入log**\n\n```\necho \"2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\" >> app.log\n```\n**4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash**\n\n```\n[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf \nSettings: Default pipeline workers: 1\nPipeline main started\n2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}\n\n```\n### 使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）\n**1， 修改logstash.conf 添加filter，重启logstash**\n\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\nfilter {\n  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace\n  if [message] =~ \"\\tat\" {\n    grok {\n      match => [\"message\", \"^(\\tat)\"]\n      add_tag => [\"stacktrace\"]\n    }\n  }\n\n  #Grokking Spring Boot's default log format\n  grok {\n    match => [ \"message\",\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[(?<thread>[A-Za-z0-9-]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*:\\s+(?<logmessage>.*)\",\n               \"message\",\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\\s+(?<logmessage>.*)\"\n             ]\n  }\n\n  #Parsing out timestamps which are in timestamp field thanks to previous grok section\n  date {\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n  }\n}\noutput {\n  stdout{\n   codec => rubydebug\n  }\n```\n**2，写入log到文件app.log**\n\n```\necho \"2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\" >> app.log\n\n```\n**3， 切换logstash查看输出**\n\n```\n{\n       \"message\" => \"2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\",\n      \"@version\" => \"1\",\n    \"@timestamp\" => \"2016-06-29T16:14:09.477Z\",\n         \"count\" => 1,\n        \"fields\" => nil,\n        \"source\" => \"/home/osboxes/app.log\",\n        \"offset\" => 987,\n          \"type\" => \"log\",\n    \"input_type\" => \"log\",\n          \"beat\" => {\n        \"hostname\" => \"osboxes\",\n            \"name\" => \"osboxes\"\n    },\n          \"host\" => \"osboxes\",\n          \"tags\" => [\n        [0] \"beats_input_codec_plain_applied\"\n    ],\n     \"timestamp\" => \"2016-06-29 17:14:09.477\",\n         \"level\" => \"INFO\",\n           \"pid\" => \"6244\",\n        \"thread\" => \"main\",\n         \"class\" => \"faultConfiguringBeanFactoryPostProcessor\",\n    \"logmessage\" => \"No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.\"\n}\n\n```\n至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。\n\n### 修改logstash配置，输出到elasticsearch\n修改配置文件的output。 \n\n```\noutput {\n    elasticsearch {\n    }\n}\n```\n用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置`hosts => \"es-machine:9092`指定远程Elasticsearch实例。\n### 查看结果\n一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）\n\n### 安装Sense\n进入/opt/kibana/ 运行：`$sudo ./bin/kibana plugin --install elastic/sense`\nYou should now be able to access Sense with a web browser on http://localhost:5601/app/sense\n\n\n\n## spring boot 日志配置\n**尽量采用统一的日志输出格式**\n1, JPA 的sql输出\n\n```\n#spring.jpa.show-sql = true #不推荐这种方式\nlogging.level.org.hibernate.SQL=DEBUG\n```\n\n## 常见的部署方式\n由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 **注意：**当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。\n**打开logstash的端口：**\n\n```\n$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent\n$ sudo firewall-cmd --reload\n```\n**filebeat的配置修改**\n\n```\nlogstash:\n    # The Logstash hosts\n    hosts: [\"192.168.1.186:5044\"]\n```\n**修改hostName**\n如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源\n\n```\n$ hostnamectl status\n# hostnamectl set-hostname Your-New-Host-Name-Here\n```\n\n## 关于日志采集的策略\n（网上未提及此topic）\n配置logstash是件麻烦事情。 一下两种策略互相冲突\n**1， 保证所有的log都index到ES**\n这中策略方便用户查找问题， 因为所有的log都可以搜索到\n**2， 严格过滤， 只提取我们需要的log信息**\n这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。\n\n## 服务器时间设置\n最好保证日志源的服务器时间和ELK的数据库服务器时间一直\n```\n# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n","slug":"Elastic-Technologies/Elasticsearch-Logstash-Kibana-Log-Collecting","published":1,"date":"2018-12-05T03:27:52.608Z","updated":"2018-06-07T13:04:26.118Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xbu00037sq33t0wrn9k","content":"<hr>\n<p>title: 使用ELK来做日志归总<br>description:  阐述使用ELK来做日志归总<br>…</p>\n<h1 id=\"ELK-初探\"><a href=\"#ELK-初探\" class=\"headerlink\" title=\"ELK 初探\"></a>ELK 初探</h1><p>ELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: <a href=\"https://blog.csdn.net/lively1982/article/details/50678657\" target=\"_blank\" rel=\"noopener\">漫谈ELK在大数据运维中的应用</a></p>\n<h2 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h2><ul>\n<li>CentOS 7 </li>\n<li>Oracle JDK 8</li>\n<li>Kibana 4.5.2</li>\n<li>Elaticsearch 2.3.4</li>\n<li>logstash 2.3.4</li>\n<li>filebeat 1.2.3<br>查看version command： <code>filebeat --version</code><h2 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h2><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/elk.png\" alt=\"elk\"><h2 id=\"软件的安装\"><a href=\"#软件的安装\" class=\"headerlink\" title=\"软件的安装\"></a>软件的安装</h2>采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。<h3 id=\"logstash-安装\"><a href=\"#logstash-安装\" class=\"headerlink\" title=\"logstash 安装\"></a>logstash 安装</h3></li>\n</ul>\n<ul>\n<li><strong>Download and install the public signing key</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[logstash-2.3]</span><br><span class=\"line\">name=Logstash repository for 2.3.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>安装</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logstash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>随系统自动启动</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig --add filebeat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"其他软件的repositories\"><a href=\"#其他软件的repositories\" class=\"headerlink\" title=\"其他软件的repositories\"></a>其他软件的repositories</h3><p><strong>filebeat</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[beats]</span><br><span class=\"line\">name=Elastic Beats Repository</span><br><span class=\"line\">baseurl=https://packages.elastic.co/beats/yum/el/$basearch</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">gpgcheck=1</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html\" target=\"_blank\" rel=\"noopener\">官方介绍</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[elasticsearch-2.x]</span><br><span class=\"line\">name=Elasticsearch repository for 2.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p><strong>kibana <a href=\"https://www.elastic.co/guide/en/kibana/current/setup.html\" target=\"_blank\" rel=\"noopener\">在线文档</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kibana-4.5]</span><br><span class=\"line\">name=Kibana repository for 4.5.x packages</span><br><span class=\"line\">baseurl=http://packages.elastic.co/kibana/4.5/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servie logstash status</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务文件路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql logstash</span><br></pre></td></tr></table></figure>\n<h2 id=\"FileBeat-使用\"><a href=\"#FileBeat-使用\" class=\"headerlink\" title=\"FileBeat 使用\"></a>FileBeat 使用</h2><p>filebeat 安装后的配置文件存放于：/etc/filebeat/下<br>修改配置文件filebeat.yml<br><strong>1， 修改文件的路径：比如：/home/osboxes/app.log</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat:</span><br><span class=\"line\">  prospectors:</span><br><span class=\"line\">    -</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">        - &quot;/home/osboxes/app.log&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash</strong><br>只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    hosts: [&quot;127.0.0.1:5044&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # Optional load balance the events between the Logstash hosts</span><br><span class=\"line\">    #loadbalance: true</span><br></pre></td></tr></table></figure>\n<p>filebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：<code>filebeat -configtest -e.</code> <strong>filebeat只能配置一个output项，修改配置后需要重启</strong><br>1，找到Console output，打开注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##Console output</span><br><span class=\"line\">   console:</span><br><span class=\"line\">    # Pretty print json event</span><br><span class=\"line\">    pretty: true</span><br></pre></td></tr></table></figure>\n<p>2， 停止filebeat服务 <code>sudo service filebeat stop</code>，手动启动filebeat来方便我们观察console输出<code>sudo filebeat -e -c /etc/filebeat/filebeat.yml</code>。(On windows: <code>filebeat.exe -e -c filebeat.yml</code>)<br>3， 新开窗口输出信息至文件/var/log/app.log<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure></p>\n<p>4，切换至filebeat的启动窗口可以看到如下的输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;@timestamp&quot;: &quot;2016-07-11T13:44:43.926Z&quot;,</span><br><span class=\"line\">  &quot;beat&quot;: &#123;</span><br><span class=\"line\">    &quot;hostname&quot;: &quot;osboxes&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;osboxes&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;count&quot;: 1,</span><br><span class=\"line\">  &quot;fields&quot;: null,</span><br><span class=\"line\">  &quot;input_type&quot;: &quot;log&quot;,</span><br><span class=\"line\">  &quot;message&quot;: &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot;,</span><br><span class=\"line\">  &quot;offset&quot;: 130,</span><br><span class=\"line\">  &quot;source&quot;: &quot;/home/osboxes/app.log&quot;,</span><br><span class=\"line\">  &quot;type&quot;: &quot;log&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LogStash-配置\"><a href=\"#LogStash-配置\" class=\"headerlink\" title=\"LogStash 配置\"></a>LogStash 配置</h2><p> 上面的小测做完后，将filebeat的配置改回输出到logstash。</p>\n<h3 id=\"连通filebeat和logstash\"><a href=\"#连通filebeat和logstash\" class=\"headerlink\" title=\"连通filebeat和logstash\"></a>连通filebeat和logstash</h3><p> <strong>1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  stdout&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后可以通过命令验证配置是否正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest</span><br></pre></td></tr></table></figure>\n<p><strong>2, 启动logstash</strong><br>采用命令启动方便从console观察输出。<code>sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf</code>如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log<br><strong>3，启动filebeat 然后向文件app.log 写入log</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure>\n<p><strong>4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf </span><br><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br><span class=\"line\">2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）\"><a href=\"#使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）\" class=\"headerlink\" title=\"使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）\"></a>使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）</h3><p><strong>1， 修改logstash.conf 添加filter，重启logstash</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class=\"line\">  if [message] =~ &quot;\\tat&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; [&quot;message&quot;, &quot;^(\\tat)&quot;]</span><br><span class=\"line\">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Grokking Spring Boot&apos;s default log format</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;message&quot;,</span><br><span class=\"line\">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[(?&lt;thread&gt;[A-Za-z0-9-]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*:\\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class=\"line\">               &quot;message&quot;,</span><br><span class=\"line\">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class=\"line\">             ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  stdout&#123;</span><br><span class=\"line\">   codec =&gt; rubydebug</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2，写入log到文件app.log</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure>\n<p><strong>3， 切换logstash查看输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">       &quot;message&quot; =&gt; &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;,</span><br><span class=\"line\">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class=\"line\">    &quot;@timestamp&quot; =&gt; &quot;2016-06-29T16:14:09.477Z&quot;,</span><br><span class=\"line\">         &quot;count&quot; =&gt; 1,</span><br><span class=\"line\">        &quot;fields&quot; =&gt; nil,</span><br><span class=\"line\">        &quot;source&quot; =&gt; &quot;/home/osboxes/app.log&quot;,</span><br><span class=\"line\">        &quot;offset&quot; =&gt; 987,</span><br><span class=\"line\">          &quot;type&quot; =&gt; &quot;log&quot;,</span><br><span class=\"line\">    &quot;input_type&quot; =&gt; &quot;log&quot;,</span><br><span class=\"line\">          &quot;beat&quot; =&gt; &#123;</span><br><span class=\"line\">        &quot;hostname&quot; =&gt; &quot;osboxes&quot;,</span><br><span class=\"line\">            &quot;name&quot; =&gt; &quot;osboxes&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">          &quot;host&quot; =&gt; &quot;osboxes&quot;,</span><br><span class=\"line\">          &quot;tags&quot; =&gt; [</span><br><span class=\"line\">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">     &quot;timestamp&quot; =&gt; &quot;2016-06-29 17:14:09.477&quot;,</span><br><span class=\"line\">         &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class=\"line\">           &quot;pid&quot; =&gt; &quot;6244&quot;,</span><br><span class=\"line\">        &quot;thread&quot; =&gt; &quot;main&quot;,</span><br><span class=\"line\">         &quot;class&quot; =&gt; &quot;faultConfiguringBeanFactoryPostProcessor&quot;,</span><br><span class=\"line\">    &quot;logmessage&quot; =&gt; &quot;No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。</p>\n<h3 id=\"修改logstash配置，输出到elasticsearch\"><a href=\"#修改logstash配置，输出到elasticsearch\" class=\"headerlink\" title=\"修改logstash配置，输出到elasticsearch\"></a>修改logstash配置，输出到elasticsearch</h3><p>修改配置文件的output。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置<code>hosts =&gt; &quot;es-machine:9092</code>指定远程Elasticsearch实例。</p>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p>一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）</p>\n<h3 id=\"安装Sense\"><a href=\"#安装Sense\" class=\"headerlink\" title=\"安装Sense\"></a>安装Sense</h3><p>进入/opt/kibana/ 运行：<code>$sudo ./bin/kibana plugin --install elastic/sense</code><br>You should now be able to access Sense with a web browser on <a href=\"http://localhost:5601/app/sense\" target=\"_blank\" rel=\"noopener\">http://localhost:5601/app/sense</a></p>\n<h2 id=\"spring-boot-日志配置\"><a href=\"#spring-boot-日志配置\" class=\"headerlink\" title=\"spring boot 日志配置\"></a>spring boot 日志配置</h2><p><strong>尽量采用统一的日志输出格式</strong><br>1, JPA 的sql输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#spring.jpa.show-sql = true #不推荐这种方式</span><br><span class=\"line\">logging.level.org.hibernate.SQL=DEBUG</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的部署方式\"><a href=\"#常见的部署方式\" class=\"headerlink\" title=\"常见的部署方式\"></a>常见的部署方式</h2><p>由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 <strong>注意：</strong>当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。<br><strong>打开logstash的端口：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent</span><br><span class=\"line\">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p><strong>filebeat的配置修改</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logstash:</span><br><span class=\"line\">    # The Logstash hosts</span><br><span class=\"line\">    hosts: [&quot;192.168.1.186:5044&quot;]</span><br></pre></td></tr></table></figure>\n<p><strong>修改hostName</strong><br>如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl status</span><br><span class=\"line\"># hostnamectl set-hostname Your-New-Host-Name-Here</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于日志采集的策略\"><a href=\"#关于日志采集的策略\" class=\"headerlink\" title=\"关于日志采集的策略\"></a>关于日志采集的策略</h2><p>（网上未提及此topic）<br>配置logstash是件麻烦事情。 一下两种策略互相冲突<br><strong>1， 保证所有的log都index到ES</strong><br>这中策略方便用户查找问题， 因为所有的log都可以搜索到<br><strong>2， 严格过滤， 只提取我们需要的log信息</strong><br>这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。</p>\n<h2 id=\"服务器时间设置\"><a href=\"#服务器时间设置\" class=\"headerlink\" title=\"服务器时间设置\"></a>服务器时间设置</h2><p>最好保证日志源的服务器时间和ELK的数据库服务器时间一直<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: 使用ELK来做日志归总<br>description:  阐述使用ELK来做日志归总<br>…</p>\n<h1 id=\"ELK-初探\"><a href=\"#ELK-初探\" class=\"headerlink\" title=\"ELK 初探\"></a>ELK 初探</h1><p>ELK实时日志分析平台 初次尝试。 ELK 的多种架构请参考文章: <a href=\"https://blog.csdn.net/lively1982/article/details/50678657\" target=\"_blank\" rel=\"noopener\">漫谈ELK在大数据运维中的应用</a></p>\n<h2 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h2><ul>\n<li>CentOS 7 </li>\n<li>Oracle JDK 8</li>\n<li>Kibana 4.5.2</li>\n<li>Elaticsearch 2.3.4</li>\n<li>logstash 2.3.4</li>\n<li>filebeat 1.2.3<br>查看version command： <code>filebeat --version</code><h2 id=\"系统架构图\"><a href=\"#系统架构图\" class=\"headerlink\" title=\"系统架构图\"></a>系统架构图</h2><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/elk.png\" alt=\"elk\"><h2 id=\"软件的安装\"><a href=\"#软件的安装\" class=\"headerlink\" title=\"软件的安装\"></a>软件的安装</h2>采用yum的安装模式。首先需要添加对应的repo文件。 对应的详细的安装方法可以参考在线文档， 这里以logstash为例。<h3 id=\"logstash-安装\"><a href=\"#logstash-安装\" class=\"headerlink\" title=\"logstash 安装\"></a>logstash 安装</h3></li>\n</ul>\n<ul>\n<li><strong>Download and install the public signing key</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>添加Repo到目录/etc/yum.repos.d/， 比如：logstash.repo</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[logstash-2.3]</span><br><span class=\"line\">name=Logstash repository for 2.3.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/logstash/2.3/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>安装</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logstash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>随系统自动启动</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chkconfig --add filebeat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"其他软件的repositories\"><a href=\"#其他软件的repositories\" class=\"headerlink\" title=\"其他软件的repositories\"></a>其他软件的repositories</h3><p><strong>filebeat</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[beats]</span><br><span class=\"line\">name=Elastic Beats Repository</span><br><span class=\"line\">baseurl=https://packages.elastic.co/beats/yum/el/$basearch</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">gpgcheck=1</span><br></pre></td></tr></table></figure>\n<p><strong>elasticsearch <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-repositories.html\" target=\"_blank\" rel=\"noopener\">官方介绍</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[elasticsearch-2.x]</span><br><span class=\"line\">name=Elasticsearch repository for 2.x packages</span><br><span class=\"line\">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p><strong>kibana <a href=\"https://www.elastic.co/guide/en/kibana/current/setup.html\" target=\"_blank\" rel=\"noopener\">在线文档</a></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kibana-4.5]</span><br><span class=\"line\">name=Kibana repository for 4.5.x packages</span><br><span class=\"line\">baseurl=http://packages.elastic.co/kibana/4.5/centos</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务状态</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">servie logstash status</span><br></pre></td></tr></table></figure>\n<p><strong>查看服务文件路径</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql logstash</span><br></pre></td></tr></table></figure>\n<h2 id=\"FileBeat-使用\"><a href=\"#FileBeat-使用\" class=\"headerlink\" title=\"FileBeat 使用\"></a>FileBeat 使用</h2><p>filebeat 安装后的配置文件存放于：/etc/filebeat/下<br>修改配置文件filebeat.yml<br><strong>1， 修改文件的路径：比如：/home/osboxes/app.log</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat:</span><br><span class=\"line\">  prospectors:</span><br><span class=\"line\">    -</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">        - &quot;/home/osboxes/app.log&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>2， 修改输出， 默认是直接输出到Elasticsearch，我们修改输出到logstash</strong><br>只需要打开对应的注释即可，将elasticsearch相关注释掉， 打开logstash的注释。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    hosts: [&quot;127.0.0.1:5044&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # Optional load balance the events between the Logstash hosts</span><br><span class=\"line\">    #loadbalance: true</span><br></pre></td></tr></table></figure>\n<p>filebeat.yml 已经配置了多个output选项，我们只需要打开注解。 这里可以做个小的测试。 修改配置后可运行命令验证：<code>filebeat -configtest -e.</code> <strong>filebeat只能配置一个output项，修改配置后需要重启</strong><br>1，找到Console output，打开注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##Console output</span><br><span class=\"line\">   console:</span><br><span class=\"line\">    # Pretty print json event</span><br><span class=\"line\">    pretty: true</span><br></pre></td></tr></table></figure>\n<p>2， 停止filebeat服务 <code>sudo service filebeat stop</code>，手动启动filebeat来方便我们观察console输出<code>sudo filebeat -e -c /etc/filebeat/filebeat.yml</code>。(On windows: <code>filebeat.exe -e -c filebeat.yml</code>)<br>3， 新开窗口输出信息至文件/var/log/app.log<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure></p>\n<p>4，切换至filebeat的启动窗口可以看到如下的输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[osboxes@osboxes logstash]$ sudo filebeat -e -c /etc/filebeat/filebeat.yml</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;@timestamp&quot;: &quot;2016-07-11T13:44:43.926Z&quot;,</span><br><span class=\"line\">  &quot;beat&quot;: &#123;</span><br><span class=\"line\">    &quot;hostname&quot;: &quot;osboxes&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;osboxes&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;count&quot;: 1,</span><br><span class=\"line\">  &quot;fields&quot;: null,</span><br><span class=\"line\">  &quot;input_type&quot;: &quot;log&quot;,</span><br><span class=\"line\">  &quot;message&quot;: &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot;,</span><br><span class=\"line\">  &quot;offset&quot;: 130,</span><br><span class=\"line\">  &quot;source&quot;: &quot;/home/osboxes/app.log&quot;,</span><br><span class=\"line\">  &quot;type&quot;: &quot;log&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LogStash-配置\"><a href=\"#LogStash-配置\" class=\"headerlink\" title=\"LogStash 配置\"></a>LogStash 配置</h2><p> 上面的小测做完后，将filebeat的配置改回输出到logstash。</p>\n<h3 id=\"连通filebeat和logstash\"><a href=\"#连通filebeat和logstash\" class=\"headerlink\" title=\"连通filebeat和logstash\"></a>连通filebeat和logstash</h3><p> <strong>1， 添加logstash.conf 文件在/etc/logstash/conf.d/logstash.conf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  stdout&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后可以通过命令验证配置是否正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --configtest</span><br></pre></td></tr></table></figure>\n<p><strong>2, 启动logstash</strong><br>采用命令启动方便从console观察输出。<code>sudo /opt/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf</code>如果采用service的启动方式，需要去/var/log/logstash/logstash.stdout 查看log<br><strong>3，启动filebeat 然后向文件app.log 写入log</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure>\n<p><strong>4，切换至logstash窗口， 可以观察到一下输出，证明filebeat已经可以成功输出到logstash</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[osboxes@osboxes bin]$ sudo ./logstash -f /etc/logstash/conf.d/logstash.conf </span><br><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br><span class=\"line\">2016-07-12T05:57:46.877Z osboxes 2016-06-29 17:14:13.802  INFO 6244 --- [main] org.hibernate.Version                    : HHH000412: Hibernate Core &#123;4.3.11.Final&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）\"><a href=\"#使用Grok-Filter-Plugin解析日志-（spring-boot-的默认日志格式）\" class=\"headerlink\" title=\"使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）\"></a>使用Grok Filter Plugin解析日志 （spring boot 的默认日志格式）</h3><p><strong>1， 修改logstash.conf 添加filter，重启logstash</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class=\"line\">  if [message] =~ &quot;\\tat&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; [&quot;message&quot;, &quot;^(\\tat)&quot;]</span><br><span class=\"line\">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Grokking Spring Boot&apos;s default log format</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;message&quot;,</span><br><span class=\"line\">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[(?&lt;thread&gt;[A-Za-z0-9-]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*:\\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class=\"line\">               &quot;message&quot;,</span><br><span class=\"line\">               &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class=\"line\">             ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  stdout&#123;</span><br><span class=\"line\">   codec =&gt; rubydebug</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2，写入log到文件app.log</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure>\n<p><strong>3， 切换logstash查看输出</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">       &quot;message&quot; =&gt; &quot;2016-06-29 17:14:09.477  INFO 6244 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;,</span><br><span class=\"line\">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class=\"line\">    &quot;@timestamp&quot; =&gt; &quot;2016-06-29T16:14:09.477Z&quot;,</span><br><span class=\"line\">         &quot;count&quot; =&gt; 1,</span><br><span class=\"line\">        &quot;fields&quot; =&gt; nil,</span><br><span class=\"line\">        &quot;source&quot; =&gt; &quot;/home/osboxes/app.log&quot;,</span><br><span class=\"line\">        &quot;offset&quot; =&gt; 987,</span><br><span class=\"line\">          &quot;type&quot; =&gt; &quot;log&quot;,</span><br><span class=\"line\">    &quot;input_type&quot; =&gt; &quot;log&quot;,</span><br><span class=\"line\">          &quot;beat&quot; =&gt; &#123;</span><br><span class=\"line\">        &quot;hostname&quot; =&gt; &quot;osboxes&quot;,</span><br><span class=\"line\">            &quot;name&quot; =&gt; &quot;osboxes&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">          &quot;host&quot; =&gt; &quot;osboxes&quot;,</span><br><span class=\"line\">          &quot;tags&quot; =&gt; [</span><br><span class=\"line\">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">     &quot;timestamp&quot; =&gt; &quot;2016-06-29 17:14:09.477&quot;,</span><br><span class=\"line\">         &quot;level&quot; =&gt; &quot;INFO&quot;,</span><br><span class=\"line\">           &quot;pid&quot; =&gt; &quot;6244&quot;,</span><br><span class=\"line\">        &quot;thread&quot; =&gt; &quot;main&quot;,</span><br><span class=\"line\">         &quot;class&quot; =&gt; &quot;faultConfiguringBeanFactoryPostProcessor&quot;,</span><br><span class=\"line\">    &quot;logmessage&quot; =&gt; &quot;No bean named &apos;errorChannel&apos; has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，完成了初步的日志的解析，日志别解析至对应的fields中。 接下来将这些数据推送至Elasticsearch进行索引。</p>\n<h3 id=\"修改logstash配置，输出到elasticsearch\"><a href=\"#修改logstash配置，输出到elasticsearch\" class=\"headerlink\" title=\"修改logstash配置，输出到elasticsearch\"></a>修改logstash配置，输出到elasticsearch</h3><p>修改配置文件的output。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用这样的结构，Logstash使用http协议连接到Elasticsearch。上面的例子假设Logstash和Elasticsearch运行在同一个机器上。您可以使用主机配置<code>hosts =&gt; &quot;es-machine:9092</code>指定远程Elasticsearch实例。</p>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p>一次启动elasticsearch，kibana，logstash，filebeat。 （filebeat已启动的话，无需重启）</p>\n<h3 id=\"安装Sense\"><a href=\"#安装Sense\" class=\"headerlink\" title=\"安装Sense\"></a>安装Sense</h3><p>进入/opt/kibana/ 运行：<code>$sudo ./bin/kibana plugin --install elastic/sense</code><br>You should now be able to access Sense with a web browser on <a href=\"http://localhost:5601/app/sense\" target=\"_blank\" rel=\"noopener\">http://localhost:5601/app/sense</a></p>\n<h2 id=\"spring-boot-日志配置\"><a href=\"#spring-boot-日志配置\" class=\"headerlink\" title=\"spring boot 日志配置\"></a>spring boot 日志配置</h2><p><strong>尽量采用统一的日志输出格式</strong><br>1, JPA 的sql输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#spring.jpa.show-sql = true #不推荐这种方式</span><br><span class=\"line\">logging.level.org.hibernate.SQL=DEBUG</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见的部署方式\"><a href=\"#常见的部署方式\" class=\"headerlink\" title=\"常见的部署方式\"></a>常见的部署方式</h2><p>由于logstash比较消耗系统资源， 采用filebeat 来采集数据， 然后推送到logstash。 简单的case可以将logstash elasticsearch  kibana 放在一个虚拟机。 filebeat可以分别安装在各个对应的微服务上。 <strong>注意：</strong>当这些部署在不同的机器上的时候，需要打开对应的端口。 对应的配置也需要相对修改下。<br><strong>打开logstash的端口：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo firewall-cmd --zone=public --add-port=5044/tcp --permanent</span><br><span class=\"line\">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p><strong>filebeat的配置修改</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logstash:</span><br><span class=\"line\">    # The Logstash hosts</span><br><span class=\"line\">    hosts: [&quot;192.168.1.186:5044&quot;]</span><br></pre></td></tr></table></figure>\n<p><strong>修改hostName</strong><br>如果微服务部署在不同的虚拟机中， 可以通过修改hostname，然后在ES的index中通过hostname 来区分日志的来源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostnamectl status</span><br><span class=\"line\"># hostnamectl set-hostname Your-New-Host-Name-Here</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于日志采集的策略\"><a href=\"#关于日志采集的策略\" class=\"headerlink\" title=\"关于日志采集的策略\"></a>关于日志采集的策略</h2><p>（网上未提及此topic）<br>配置logstash是件麻烦事情。 一下两种策略互相冲突<br><strong>1， 保证所有的log都index到ES</strong><br>这中策略方便用户查找问题， 因为所有的log都可以搜索到<br><strong>2， 严格过滤， 只提取我们需要的log信息</strong><br>这种很方便做统计， 但是其他很多log会被过滤掉， 用来找问题不方便。</p>\n<h2 id=\"服务器时间设置\"><a href=\"#服务器时间设置\" class=\"headerlink\" title=\"服务器时间设置\"></a>服务器时间设置</h2><p>最好保证日志源的服务器时间和ELK的数据库服务器时间一直<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Elasticsearch 自定义Mapping","description":"Elasticsearch 自定义Mapping","_content":"## Mapping 定义\n前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：[5.x已经不再支持string 类型](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html)）\n**这里截取一点官网对应的**[定义](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html)：\n > elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。\n\n基于5.x，[前面博客](http://blog.csdn.net/choelea/article/details/53320140) 提到的user，uri等字段就可以使用[keyword type](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html)。\n\n```\nPUT /business-index-*/_mapping/business\n{\n \"properties\" : {\n    \"uri\" : {\"type\": \"keyword\"},\n    \"user\" : {\"type\": \"keyword\"},\n    \"keyword\" : {\"type\": \"keyword\"},\n    \"responseStatus\" : { \"type\" : \"integer\" },\n    \"responseTime\" : { \"type\" : \"long\" }\n }\n}\n```\n\nelastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 [elastic 官网](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html)\t \n\n","source":"_posts/Elastic-Technologies/Elasticsearch-Mapping.md","raw":"---\ntitle: Elasticsearch 自定义Mapping\ndescription: Elasticsearch 自定义Mapping\n---\n## Mapping 定义\n前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：[5.x已经不再支持string 类型](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html)）\n**这里截取一点官网对应的**[定义](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html)：\n > elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。\n\n基于5.x，[前面博客](http://blog.csdn.net/choelea/article/details/53320140) 提到的user，uri等字段就可以使用[keyword type](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html)。\n\n```\nPUT /business-index-*/_mapping/business\n{\n \"properties\" : {\n    \"uri\" : {\"type\": \"keyword\"},\n    \"user\" : {\"type\": \"keyword\"},\n    \"keyword\" : {\"type\": \"keyword\"},\n    \"responseStatus\" : { \"type\" : \"integer\" },\n    \"responseTime\" : { \"type\" : \"long\" }\n }\n}\n```\n\nelastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 [elastic 官网](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html)\t \n\n","slug":"Elastic-Technologies/Elasticsearch-Mapping","published":1,"date":"2018-12-05T03:27:52.608Z","updated":"2018-03-05T01:03:32.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xbu00047sq3xrwyb1fm","content":"<h2 id=\"Mapping-定义\"><a href=\"#Mapping-定义\" class=\"headerlink\" title=\"Mapping 定义\"></a>Mapping 定义</h2><p>前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html\" target=\"_blank\" rel=\"noopener\">5.x已经不再支持string 类型</a>）<br><strong>这里截取一点官网对应的</strong><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html\" target=\"_blank\" rel=\"noopener\">定义</a>：</p>\n<blockquote>\n<p>elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。</p>\n</blockquote>\n<p>基于5.x，<a href=\"http://blog.csdn.net/choelea/article/details/53320140\" target=\"_blank\" rel=\"noopener\">前面博客</a> 提到的user，uri等字段就可以使用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html\" target=\"_blank\" rel=\"noopener\">keyword type</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /business-index-*/_mapping/business</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;properties&quot; : &#123;</span><br><span class=\"line\">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;keyword&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class=\"line\">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>elastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html\" target=\"_blank\" rel=\"noopener\">elastic 官网</a>     </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mapping-定义\"><a href=\"#Mapping-定义\" class=\"headerlink\" title=\"Mapping 定义\"></a>Mapping 定义</h2><p>前面有一个篇简单的关于mapping的博客，当时是基于2.4 版本。 elastic技术栈在最近很活跃，目前版本已经更新至5.x。5.x有了比较大的变化。2.4 版本的定义在5.x上大部分已经失去了意义。（比如：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/string.html\" target=\"_blank\" rel=\"noopener\">5.x已经不再支持string 类型</a>）<br><strong>这里截取一点官网对应的</strong><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/mapping.html\" target=\"_blank\" rel=\"noopener\">定义</a>：</p>\n<blockquote>\n<p>elasticsearch 通过定义的映射mapping来决定文档及其字段改如何被存储和索引。比如：字段是否可以支持全文搜索; 字段是否包含日期，地理位置; 日期的格式; 自定义自动映射的规则。</p>\n</blockquote>\n<p>基于5.x，<a href=\"http://blog.csdn.net/choelea/article/details/53320140\" target=\"_blank\" rel=\"noopener\">前面博客</a> 提到的user，uri等字段就可以使用<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/keyword.html\" target=\"_blank\" rel=\"noopener\">keyword type</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /business-index-*/_mapping/business</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;properties&quot; : &#123;</span><br><span class=\"line\">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;keyword&quot; : &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class=\"line\">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class=\"line\">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>elastic的文档维护的算是比较好的，基本英语OK的都是直接去参考官方文档。  mapping的更新可以参考 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-put-mapping.html\" target=\"_blank\" rel=\"noopener\">elastic 官网</a>     </p>\n"},{"_content":"---\ntitle:  Elasticsearch 模糊匹配\ndescription: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n\nhttps://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html\n以下来自\n```\n模糊性评分编辑\n用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。\n\n假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！\n\n换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。\n```","source":"_posts/Elastic-Technologies/elasticsearch-fuzzy-query.md","raw":"---\ntitle:  Elasticsearch 模糊匹配\ndescription: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n\nhttps://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html\n以下来自\n```\n模糊性评分编辑\n用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。\n\n假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！\n\n换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。\n```","slug":"Elastic-Technologies/elasticsearch-fuzzy-query","published":1,"date":"2018-12-05T03:27:52.598Z","updated":"2018-11-05T06:06:01.817Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xbu00057sq338rvmo1q","content":"<hr>\n<p>title:  Elasticsearch 模糊匹配<br>description: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<p><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html</a><br>以下来自<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模糊性评分编辑</span><br><span class=\"line\">用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。</span><br><span class=\"line\"></span><br><span class=\"line\">假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！</span><br><span class=\"line\"></span><br><span class=\"line\">换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  Elasticsearch 模糊匹配<br>description: fuzzy 查询是一个词项级别的查询，所以它不做任何分析。它通过某个词项以及指定的 fuzziness 查找到词典中所有的词项。 fuzziness 默认设置为 AUTO 。<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<p><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/cn/fuzzy-scoring.html</a><br>以下来自<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模糊性评分编辑</span><br><span class=\"line\">用户喜欢模糊查询。他们认为这种查询会魔法般的找到正确拼写组合。 很遗憾，实际效果平平。</span><br><span class=\"line\"></span><br><span class=\"line\">假设我们有1000个文档包含 ``Schwarzenegger`` ，只是一个文档的出现拼写错误 ``Schwarzeneger`` 。 根据 term frequency/inverse document frequency 理论，这个拼写错误文档比拼写正确的相关度更高，因为错误拼写出现在更少的文档中！</span><br><span class=\"line\"></span><br><span class=\"line\">换句话说，如果我们对待模糊匹配 类似其他匹配方法，我们将偏爱错误的拼写超过了正确的拼写，这会让用户抓狂。</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Elasticsearch 2.X 自定义字段的Mapping","description":"Elasticsearch 2.X 自定义字段的Mapping","_content":"说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。\n\n默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。\n> 引用博客：http://blog.csdn.net/top_code/article/details/50767138\n## 术语\nterm - individual word （拆分后的最小单词）\n## Mapping 简介\n[Elasticsearch Reference [2.4] » Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html)\nMapping是用来定义文档及包含字段的保存和索引的方式。\n## Why\n接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：test@gmail.com）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，test@gmail.com 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。\n [Mapping parameters » index](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html) \n > 通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息\n## 自定义mapping\n可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。\n**示例：**\n\n```\ncurl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d '\n{\n \"properties\" : {\n    \"uri\" : {\"type\": \"string\",\"index\" : \"not_analyzed\"},\n    \"user\" : {\"type\": \"string\", \"index\" : \"not_analyzed\"},\n\t\"keyword\" : {\"type\": \"string\", \"index\" : \"not_analyzed\"},\n    \"responseStatus\" : { \"type\" : \"integer\" },\n    \"responseTime\" : { \"type\" : \"long\" }\n }\n}';\n```\n\n## 自定义template\n对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。 \n但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 \"***time-based index pattern***\" , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： `logstash-2016.08.20 ` 针对这种场景，就需要引入更高一层的配置: [Index Template](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) \n设定自己的template的示例如下：\n\n```\ncurl -XPUT http://localhost:9200/_template/business -d '\n{\n\t\"template\": \"business*\",\n\t\"settings\": {\n\t\t\"number_of_shards\": 1\n\t},\n\t\"mappings\": {\n\t\t\"_default_\": {\n\t\t\t\"properties\": {\n\t\t\t\t\"uri\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"user\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"keyword\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"responseStatus\": {\n\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t},\n\t\t\t\t\"responseTime\": {\n\t\t\t\t\t\"type\": \"long\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n';\n```\n> The settings and mappings will be applied to any index name that matches the business* template\n\n","source":"_posts/Elastic-Technologies/Elasticsearch-2-X-Mapping.md","raw":"---\ntitle: Elasticsearch 2.X 自定义字段的Mapping\ndescription: Elasticsearch 2.X 自定义字段的Mapping\n---\n说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。\n\n默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。\n> 引用博客：http://blog.csdn.net/top_code/article/details/50767138\n## 术语\nterm - individual word （拆分后的最小单词）\n## Mapping 简介\n[Elasticsearch Reference [2.4] » Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html)\nMapping是用来定义文档及包含字段的保存和索引的方式。\n## Why\n接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：test@gmail.com）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，test@gmail.com 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。\n [Mapping parameters » index](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html) \n > 通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息\n## 自定义mapping\n可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。\n**示例：**\n\n```\ncurl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d '\n{\n \"properties\" : {\n    \"uri\" : {\"type\": \"string\",\"index\" : \"not_analyzed\"},\n    \"user\" : {\"type\": \"string\", \"index\" : \"not_analyzed\"},\n\t\"keyword\" : {\"type\": \"string\", \"index\" : \"not_analyzed\"},\n    \"responseStatus\" : { \"type\" : \"integer\" },\n    \"responseTime\" : { \"type\" : \"long\" }\n }\n}';\n```\n\n## 自定义template\n对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。 \n但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 \"***time-based index pattern***\" , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： `logstash-2016.08.20 ` 针对这种场景，就需要引入更高一层的配置: [Index Template](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) \n设定自己的template的示例如下：\n\n```\ncurl -XPUT http://localhost:9200/_template/business -d '\n{\n\t\"template\": \"business*\",\n\t\"settings\": {\n\t\t\"number_of_shards\": 1\n\t},\n\t\"mappings\": {\n\t\t\"_default_\": {\n\t\t\t\"properties\": {\n\t\t\t\t\"uri\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"user\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"keyword\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"index\": \"not_analyzed\"\n\t\t\t\t},\n\t\t\t\t\"responseStatus\": {\n\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t},\n\t\t\t\t\"responseTime\": {\n\t\t\t\t\t\"type\": \"long\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n';\n```\n> The settings and mappings will be applied to any index name that matches the business* template\n\n","slug":"Elastic-Technologies/Elasticsearch-2-X-Mapping","published":1,"date":"2018-12-05T03:27:52.588Z","updated":"2018-03-05T01:03:32.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xc400067sq3dohgcebz","content":"<p>说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。</p>\n<p>默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。</p>\n<blockquote>\n<p>引用博客：<a href=\"http://blog.csdn.net/top_code/article/details/50767138\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/top_code/article/details/50767138</a></p>\n</blockquote>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>term - individual word （拆分后的最小单词）</p>\n<h2 id=\"Mapping-简介\"><a href=\"#Mapping-简介\" class=\"headerlink\" title=\"Mapping 简介\"></a>Mapping 简介</h2><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch Reference [2.4] » Mapping</a><br>Mapping是用来定义文档及包含字段的保存和索引的方式。</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：<a href=\"mailto:test@gmail.com\" target=\"_blank\" rel=\"noopener\">test@gmail.com</a>）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，<a href=\"mailto:test@gmail.com\" target=\"_blank\" rel=\"noopener\">test@gmail.com</a> 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。<br> <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html\" target=\"_blank\" rel=\"noopener\">Mapping parameters » index</a> </p>\n<blockquote>\n<p>通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息</p>\n</blockquote>\n<h2 id=\"自定义mapping\"><a href=\"#自定义mapping\" class=\"headerlink\" title=\"自定义mapping\"></a>自定义mapping</h2><p>可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。<br><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;properties&quot; : &#123;</span><br><span class=\"line\">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;string&quot;,&quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">\t&quot;keyword&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class=\"line\">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义template\"><a href=\"#自定义template\" class=\"headerlink\" title=\"自定义template\"></a>自定义template</h2><p>对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。<br>但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 “<strong><em>time-based index pattern</em></strong>“ , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： <code>logstash-2016.08.20</code> 针对这种场景，就需要引入更高一层的配置: <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html\" target=\"_blank\" rel=\"noopener\">Index Template</a><br>设定自己的template的示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://localhost:9200/_template/business -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;template&quot;: &quot;business*&quot;,</span><br><span class=\"line\">\t&quot;settings&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;number_of_shards&quot;: 1</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;mappings&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;_default_&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;properties&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t&quot;uri&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;user&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;keyword&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;responseStatus&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;integer&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;responseTime&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The settings and mappings will be applied to any index name that matches the business* template</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>说到Mapping大家可能觉得有些不解，其实我大体上可以将Elasticsearch理解为一个RDBMS（关系型数据库，比如MySQL），那么index 就相当于数据库实例，type可以理解为表,这样mapping可以理解为表的结构和相关设置的信息（当然mapping有更大范围的意思）。</p>\n<p>默认情况不需要显式的定义mapping， 当新的type或者field引入时，Elasticsearch会自动创建并且注册有合理的默认值的mapping(毫无性能压力)， 只有要覆盖默认值时才必须要提供mapping定义。</p>\n<blockquote>\n<p>引用博客：<a href=\"http://blog.csdn.net/top_code/article/details/50767138\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/top_code/article/details/50767138</a></p>\n</blockquote>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>term - individual word （拆分后的最小单词）</p>\n<h2 id=\"Mapping-简介\"><a href=\"#Mapping-简介\" class=\"headerlink\" title=\"Mapping 简介\"></a>Mapping 简介</h2><p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch Reference [2.4] » Mapping</a><br>Mapping是用来定义文档及包含字段的保存和索引的方式。</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>接触mapping是因为要收集除了log之外的业务信息。 业务log和系统log不同，很多的自定义字段，并将这些信息推送到单独的index。 最终目的是用过kibana的图形化的展示来统计和分析。当我们要统计比如：用户的访问排名（字段名：user：<a href=\"mailto:test@gmail.com\" target=\"_blank\" rel=\"noopener\">test@gmail.com</a>）。 当没有设置任何mapping的时候，ES会采用动态mapping（Dynamic Mapping），针对String的字段默认的index方式是：analyzed。这种方式下，<a href=\"mailto:test@gmail.com\" target=\"_blank\" rel=\"noopener\">test@gmail.com</a> 会被拆分成test和gmail.com(怎么拆分取决于用什么analyzer)。这样不便于统计，这里我们必须显示地去设置mapping。<br> <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/mapping-index.html\" target=\"_blank\" rel=\"noopener\">Mapping parameters » index</a> </p>\n<blockquote>\n<p>通过kibana去选择analyzed的字段去做terms aggregation可以看到对应的warning信息</p>\n</blockquote>\n<h2 id=\"自定义mapping\"><a href=\"#自定义mapping\" class=\"headerlink\" title=\"自定义mapping\"></a>自定义mapping</h2><p>可以通过API 去自定义mapping。 （这个最好在数据开始index之前，因为数据index的时候会动态设置mapping，再去修改会出现一些冲突）新增加的字段可以继续通过修改mapping来增加。  ES 支持一个index多个type，mapping可以针对单个type也可以针对index。<br><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://localhost:9200/business-index-*/_mapping/biz -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;properties&quot; : &#123;</span><br><span class=\"line\">    &quot;uri&quot; : &#123;&quot;type&quot;: &quot;string&quot;,&quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">    &quot;user&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">\t&quot;keyword&quot; : &#123;&quot;type&quot;: &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;&#125;,</span><br><span class=\"line\">    &quot;responseStatus&quot; : &#123; &quot;type&quot; : &quot;integer&quot; &#125;,</span><br><span class=\"line\">    &quot;responseTime&quot; : &#123; &quot;type&quot; : &quot;long&quot; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义template\"><a href=\"#自定义template\" class=\"headerlink\" title=\"自定义template\"></a>自定义template</h2><p>对于确定的index，通过mapping的方式就可以达到我们的目的。 比如： 商品的索引，这个index不会变，里面的数据document会增删改查，但是index始终在那里。<br>但是对于类似log和数据分析的数据，这些数据会惊人的速度增加，如果放在一个index就不现实。 所以ELK就有了 “<strong><em>time-based index pattern</em></strong>“ , 通过这种方式可以每天或者每月生成一个index文件。比如logstash的日志： <code>logstash-2016.08.20</code> 针对这种场景，就需要引入更高一层的配置: <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html\" target=\"_blank\" rel=\"noopener\">Index Template</a><br>设定自己的template的示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT http://localhost:9200/_template/business -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;template&quot;: &quot;business*&quot;,</span><br><span class=\"line\">\t&quot;settings&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;number_of_shards&quot;: 1</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;mappings&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;_default_&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;properties&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t&quot;uri&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;user&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;keyword&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">\t\t\t\t\t&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;responseStatus&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;integer&quot;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&quot;responseTime&quot;: &#123;</span><br><span class=\"line\">\t\t\t\t\t&quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The settings and mappings will be applied to any index name that matches the business* template</p>\n</blockquote>\n"},{"_content":"---\ntitle:  Elastcisearch 6.2 Restful API \ndescription: Elastcisearch 常用的 Restful API\n...\n\n# Elastcisearch\n详细的API请参考官方网站： https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html 这里只列举常用的方式。\n\n## 索引API\n官方链接： [https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html)\n### 创建索引\n#### 快速创建\n\n```\nPUT /news\n```\n创建名为test的索引，没有创建任何对应的Type,以及Mapping\n```\n{\n  \"acknowledged\": true,\n  \"shards_acknowledged\": true,\n  \"index\": \"news\"\n}\n```\n\n### 查看索引\n```\nGET /news\n```\n```\n{\n  \"news\": {\n    \"aliases\": {},\n    \"mappings\": {},\n    \"settings\": {\n      \"index\": {\n        \"creation_date\": \"1535677066065\",\n        \"number_of_shards\": \"5\",\n        \"number_of_replicas\": \"1\",\n        \"uuid\": \"-fZX17QdQjWE_AK79pO8lQ\",\n        \"version\": {\n          \"created\": \"6020499\"\n        },\n        \"provided_name\": \"news\"\n      }\n    }\n  }\n}\n```\n\n### 删除索引\n```\ncurl -XDELETE \"http://192.168.1.99:9200/news\" // 删除索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n#### 设置类型并定义Mapping (推荐)\n\n```\nPUT /news/_mapping/_doc\n{\n   \"properties\":{\n     \"title\":{\n       \"type\":\"text\"\n     },\n     \"content\":{\n       \"type\":\"text\"\n     },\n     \"postDate\":{\n       \"type\":\"date\"\n     },\n     \"categories\":{\n       \"type\":\"keyword\"\n     },\n     \"tags\":{\n       \"type\":\"keyword\"\n     }\n   }\n}\n```\n1. title和content是用于全文检索的，同时需要分词的\n2. categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考[Array DataType](https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html)\n\n> elasticsearch 支持 [Dynamical Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html), 大多数情况下，这都不是一个推荐方式。\n\n\n","source":"_posts/Elastic-Technologies/Elasticsearch-6_2-Restful-API.md","raw":"---\ntitle:  Elastcisearch 6.2 Restful API \ndescription: Elastcisearch 常用的 Restful API\n...\n\n# Elastcisearch\n详细的API请参考官方网站： https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html 这里只列举常用的方式。\n\n## 索引API\n官方链接： [https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html](https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html)\n### 创建索引\n#### 快速创建\n\n```\nPUT /news\n```\n创建名为test的索引，没有创建任何对应的Type,以及Mapping\n```\n{\n  \"acknowledged\": true,\n  \"shards_acknowledged\": true,\n  \"index\": \"news\"\n}\n```\n\n### 查看索引\n```\nGET /news\n```\n```\n{\n  \"news\": {\n    \"aliases\": {},\n    \"mappings\": {},\n    \"settings\": {\n      \"index\": {\n        \"creation_date\": \"1535677066065\",\n        \"number_of_shards\": \"5\",\n        \"number_of_replicas\": \"1\",\n        \"uuid\": \"-fZX17QdQjWE_AK79pO8lQ\",\n        \"version\": {\n          \"created\": \"6020499\"\n        },\n        \"provided_name\": \"news\"\n      }\n    }\n  }\n}\n```\n\n### 删除索引\n```\ncurl -XDELETE \"http://192.168.1.99:9200/news\" // 删除索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n#### 设置类型并定义Mapping (推荐)\n\n```\nPUT /news/_mapping/_doc\n{\n   \"properties\":{\n     \"title\":{\n       \"type\":\"text\"\n     },\n     \"content\":{\n       \"type\":\"text\"\n     },\n     \"postDate\":{\n       \"type\":\"date\"\n     },\n     \"categories\":{\n       \"type\":\"keyword\"\n     },\n     \"tags\":{\n       \"type\":\"keyword\"\n     }\n   }\n}\n```\n1. title和content是用于全文检索的，同时需要分词的\n2. categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考[Array DataType](https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html)\n\n> elasticsearch 支持 [Dynamical Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html), 大多数情况下，这都不是一个推荐方式。\n\n\n","slug":"Elastic-Technologies/Elasticsearch-6_2-Restful-API","published":1,"date":"2018-12-05T03:27:52.598Z","updated":"2018-11-01T01:03:16.999Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xc400077sq33grw866e","content":"<hr>\n<p>title:  Elastcisearch 6.2 Restful API<br>description: Elastcisearch 常用的 Restful API<br>…</p>\n<h1 id=\"Elastcisearch\"><a href=\"#Elastcisearch\" class=\"headerlink\" title=\"Elastcisearch\"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p>\n<h2 id=\"索引API\"><a href=\"#索引API\" class=\"headerlink\" title=\"索引API\"></a>索引API</h2><p>官方链接： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html</a></p>\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><h4 id=\"快速创建\"><a href=\"#快速创建\" class=\"headerlink\" title=\"快速创建\"></a>快速创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /news</span><br></pre></td></tr></table></figure>\n<p>创建名为test的索引，没有创建任何对应的Type,以及Mapping<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;acknowledged&quot;: true,</span><br><span class=\"line\">  &quot;shards_acknowledged&quot;: true,</span><br><span class=\"line\">  &quot;index&quot;: &quot;news&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /news</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;news&quot;: &#123;</span><br><span class=\"line\">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;index&quot;: &#123;</span><br><span class=\"line\">        &quot;creation_date&quot;: &quot;1535677066065&quot;,</span><br><span class=\"line\">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class=\"line\">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class=\"line\">        &quot;uuid&quot;: &quot;-fZX17QdQjWE_AK79pO8lQ&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &#123;</span><br><span class=\"line\">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;provided_name&quot;: &quot;news&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &quot;http://192.168.1.99:9200/news&quot; // 删除索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置类型并定义Mapping-推荐\"><a href=\"#设置类型并定义Mapping-推荐\" class=\"headerlink\" title=\"设置类型并定义Mapping (推荐)\"></a>设置类型并定义Mapping (推荐)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /news/_mapping/_doc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;properties&quot;:&#123;</span><br><span class=\"line\">     &quot;title&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;text&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;content&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;text&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;postDate&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;date&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;categories&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;tags&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>title和content是用于全文检索的，同时需要分词的</li>\n<li>categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html\" target=\"_blank\" rel=\"noopener\">Array DataType</a></li>\n</ol>\n<blockquote>\n<p>elasticsearch 支持 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html\" target=\"_blank\" rel=\"noopener\">Dynamical Mapping</a>, 大多数情况下，这都不是一个推荐方式。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  Elastcisearch 6.2 Restful API<br>description: Elastcisearch 常用的 Restful API<br>…</p>\n<h1 id=\"Elastcisearch\"><a href=\"#Elastcisearch\" class=\"headerlink\" title=\"Elastcisearch\"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p>\n<h2 id=\"索引API\"><a href=\"#索引API\" class=\"headerlink\" title=\"索引API\"></a>索引API</h2><p>官方链接： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/indices.html</a></p>\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><h4 id=\"快速创建\"><a href=\"#快速创建\" class=\"headerlink\" title=\"快速创建\"></a>快速创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /news</span><br></pre></td></tr></table></figure>\n<p>创建名为test的索引，没有创建任何对应的Type,以及Mapping<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;acknowledged&quot;: true,</span><br><span class=\"line\">  &quot;shards_acknowledged&quot;: true,</span><br><span class=\"line\">  &quot;index&quot;: &quot;news&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /news</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;news&quot;: &#123;</span><br><span class=\"line\">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;index&quot;: &#123;</span><br><span class=\"line\">        &quot;creation_date&quot;: &quot;1535677066065&quot;,</span><br><span class=\"line\">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class=\"line\">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class=\"line\">        &quot;uuid&quot;: &quot;-fZX17QdQjWE_AK79pO8lQ&quot;,</span><br><span class=\"line\">        &quot;version&quot;: &#123;</span><br><span class=\"line\">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;provided_name&quot;: &quot;news&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &quot;http://192.168.1.99:9200/news&quot; // 删除索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置类型并定义Mapping-推荐\"><a href=\"#设置类型并定义Mapping-推荐\" class=\"headerlink\" title=\"设置类型并定义Mapping (推荐)\"></a>设置类型并定义Mapping (推荐)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /news/_mapping/_doc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;properties&quot;:&#123;</span><br><span class=\"line\">     &quot;title&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;text&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;content&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;text&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;postDate&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;date&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;categories&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &quot;tags&quot;:&#123;</span><br><span class=\"line\">       &quot;type&quot;:&quot;keyword&quot;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>title和content是用于全文检索的，同时需要分词的</li>\n<li>categories tags无需分词，这里的categories和tags都会存放多个值的数组。关于数组类型参考<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html\" target=\"_blank\" rel=\"noopener\">Array DataType</a></li>\n</ol>\n<blockquote>\n<p>elasticsearch 支持 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-mapping.html\" target=\"_blank\" rel=\"noopener\">Dynamical Mapping</a>, 大多数情况下，这都不是一个推荐方式。</p>\n</blockquote>\n"},{"_content":"---\ntitle:  Elastcisearch 2.4 Restful API \ndescription: Elastcisearch 常用的 Restful API\n...\n\n# Elastcisearch\n详细的API请参考官方网站： https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html 这里只列举常用的方式。\n## 索引API\n官方链接： [https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html)\n### 创建索引\n```\ncurl -XPUT \"http://192.168.1.99:9200/test\" //创建test的索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n### 删除索引\n```\ncurl -XDELETE \"http://192.168.1.99:9200/test\" // 删除索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n\n**以下开始使用Kibana的Sense 来简化curl的操作**\n### 查看索引\n```\nGET /test\n```\n### 创建索引并设置Type和Mapping\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","source":"_posts/Elastic-Technologies/Elasticsearch-2_4-Restful-Api.md","raw":"---\ntitle:  Elastcisearch 2.4 Restful API \ndescription: Elastcisearch 常用的 Restful API\n...\n\n# Elastcisearch\n详细的API请参考官方网站： https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html 这里只列举常用的方式。\n## 索引API\n官方链接： [https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html)\n### 创建索引\n```\ncurl -XPUT \"http://192.168.1.99:9200/test\" //创建test的索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n### 删除索引\n```\ncurl -XDELETE \"http://192.168.1.99:9200/test\" // 删除索引\n```\n```\n{\n   \"ok\": true,\n   \"acknowledged\": true\n}\n```\n\n**以下开始使用Kibana的Sense 来简化curl的操作**\n### 查看索引\n```\nGET /test\n```\n### 创建索引并设置Type和Mapping\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","slug":"Elastic-Technologies/Elasticsearch-2_4-Restful-Api","published":1,"date":"2018-12-05T03:27:52.598Z","updated":"2018-11-01T01:03:16.998Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpam3xc400087sq3pp7x3l01","content":"<hr>\n<p>title:  Elastcisearch 2.4 Restful API<br>description: Elastcisearch 常用的 Restful API<br>…</p>\n<h1 id=\"Elastcisearch\"><a href=\"#Elastcisearch\" class=\"headerlink\" title=\"Elastcisearch\"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p>\n<h2 id=\"索引API\"><a href=\"#索引API\" class=\"headerlink\" title=\"索引API\"></a>索引API</h2><p>官方链接： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html</a></p>\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT &quot;http://192.168.1.99:9200/test&quot; //创建test的索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &quot;http://192.168.1.99:9200/test&quot; // 删除索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以下开始使用Kibana的Sense 来简化curl的操作</strong></p>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /test</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建索引并设置Type和Mapping\"><a href=\"#创建索引并设置Type和Mapping\" class=\"headerlink\" title=\"创建索引并设置Type和Mapping\"></a>创建索引并设置Type和Mapping</h3><hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  Elastcisearch 2.4 Restful API<br>description: Elastcisearch 常用的 Restful API<br>…</p>\n<h1 id=\"Elastcisearch\"><a href=\"#Elastcisearch\" class=\"headerlink\" title=\"Elastcisearch\"></a>Elastcisearch</h1><p>详细的API请参考官方网站： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> 这里只列举常用的方式。</p>\n<h2 id=\"索引API\"><a href=\"#索引API\" class=\"headerlink\" title=\"索引API\"></a>索引API</h2><p>官方链接： <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html</a></p>\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPUT &quot;http://192.168.1.99:9200/test&quot; //创建test的索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XDELETE &quot;http://192.168.1.99:9200/test&quot; // 删除索引</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;ok&quot;: true,</span><br><span class=\"line\">   &quot;acknowledged&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以下开始使用Kibana的Sense 来简化curl的操作</strong></p>\n<h3 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /test</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建索引并设置Type和Mapping\"><a href=\"#创建索引并设置Type和Mapping\" class=\"headerlink\" title=\"创建索引并设置Type和Mapping\"></a>创建索引并设置Type和Mapping</h3><hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n"},{"title":"Logstash Filter 配置","description":"Logstash Filter 配置","_content":"笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：[logstash-logback-encoder](https://github.com/logstash/logstash-logback-encoder)\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\nfilter {\n  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace\n  if [message] =~ \"\\tat\" {\n    grok {\n      match => [\"message\", \"^(\\tat)\"]\n      add_tag => [\"stacktrace\"]\n    }\n  }\n\n  #Grokking Spring Boot's default log format\n  grok {\n    match => [ \n\t\t\t\t#\tRecord transaction\n\t\t\t\t\"message\",\"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[\\s*(?<thread>[^\\]]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*: \\[\\s*(?<transactionInfo>[^\\]]+)\\]\",\n\t\t\t\t\"message\", \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[\\s*(?<thread>[^\\]]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*:\\s+(?<logmessage>.*)\",\n\t\t\t\t\"message\", \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\\s+(?<logmessage>.*)\"\n             ]\n  }\n\n  #Parsing out timestamps which are in timestamp field thanks to previous grok section\n  date {\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n  }\n}\noutput {\n elasticsearch{} \n stdout{\n   codec => rubydebug\n  }\n}\n\n```\n\n这里grok配置了三册过滤， 第一层用作统计，message的格式如下：\n\n```\n2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [{\"transactionCode\":\"ofbizProxy\",\"transactionDuration\":246}]\n```\n使用[Grok Debugger](http://grokdebug.herokuapp.com/) 解析后如下\n\n```\tJson\n{\n  \"timestamp\": [\n    [\n      \"2016-07-15 20:30:30.884\"\n    ]\n  ],\n  \"YEAR\": [\n    [\n      \"2016\"\n    ]\n  ],\n  \"MONTHNUM\": [\n    [\n      \"07\"\n    ]\n  ],\n  \"MONTHDAY\": [\n    [\n      \"15\"\n    ]\n  ],\n  \"TIME\": [\n    [\n      \"20:30:30.884\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"20\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"30\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"30.884\"\n    ]\n  ],\n  \"level\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"pid\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"BASE10NUM\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"thread\": [\n    [\n      \"nio-8081-exec-3\"\n    ]\n  ],\n  \"class\": [\n    [\n      \"c.l.a.w.controller.OfbizProxyController\"\n    ]\n  ],\n  \"transactionInfo\": [\n    [\n      \"{\"transactionCode\":\"ofbizProxy\",\"transactionDuration\":246}\"\n    ]\n  ]\n}\n```\n\n第二层针对普通的log\n\n```\n2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1\n```\n解析后的json如下：\n\n```\n{\n  \"timestamp\": [\n    [\n      \"2016-07-15 20:30:07.768\"\n    ]\n  ],\n  \"YEAR\": [\n    [\n      \"2016\"\n    ]\n  ],\n  \"MONTHNUM\": [\n    [\n      \"07\"\n    ]\n  ],\n  \"MONTHDAY\": [\n    [\n      \"15\"\n    ]\n  ],\n  \"TIME\": [\n    [\n      \"20:30:07.768\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"20\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"30\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"07.768\"\n    ]\n  ],\n  \"level\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"pid\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"BASE10NUM\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"thread\": [\n    [\n      \"nio-8081-exec-1\"\n    ]\n  ],\n  \"class\": [\n    [\n      \"c.l.a.web.controller.LoginController\"\n    ]\n  ],\n  \"logmessage\": [\n    [\n      \"Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1\"\n    ]\n  ]\n}\n```\n第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例","source":"_posts/Elastic-Technologies/Logstash-Filter.md","raw":"---\ntitle: Logstash Filter 配置\ndescription: Logstash Filter 配置\n---\n笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：[logstash-logback-encoder](https://github.com/logstash/logstash-logback-encoder)\n```\ninput {\n  beats {\n    port => 5044\n  }\n}\nfilter {\n  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace\n  if [message] =~ \"\\tat\" {\n    grok {\n      match => [\"message\", \"^(\\tat)\"]\n      add_tag => [\"stacktrace\"]\n    }\n  }\n\n  #Grokking Spring Boot's default log format\n  grok {\n    match => [ \n\t\t\t\t#\tRecord transaction\n\t\t\t\t\"message\",\"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[\\s*(?<thread>[^\\]]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*: \\[\\s*(?<transactionInfo>[^\\]]+)\\]\",\n\t\t\t\t\"message\", \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \\[\\s*(?<thread>[^\\]]+)\\] (?<class>[A-Za-z0-9.#_]+)\\s*:\\s+(?<logmessage>.*)\",\n\t\t\t\t\"message\", \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\\s+(?<logmessage>.*)\"\n             ]\n  }\n\n  #Parsing out timestamps which are in timestamp field thanks to previous grok section\n  date {\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n  }\n}\noutput {\n elasticsearch{} \n stdout{\n   codec => rubydebug\n  }\n}\n\n```\n\n这里grok配置了三册过滤， 第一层用作统计，message的格式如下：\n\n```\n2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [{\"transactionCode\":\"ofbizProxy\",\"transactionDuration\":246}]\n```\n使用[Grok Debugger](http://grokdebug.herokuapp.com/) 解析后如下\n\n```\tJson\n{\n  \"timestamp\": [\n    [\n      \"2016-07-15 20:30:30.884\"\n    ]\n  ],\n  \"YEAR\": [\n    [\n      \"2016\"\n    ]\n  ],\n  \"MONTHNUM\": [\n    [\n      \"07\"\n    ]\n  ],\n  \"MONTHDAY\": [\n    [\n      \"15\"\n    ]\n  ],\n  \"TIME\": [\n    [\n      \"20:30:30.884\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"20\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"30\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"30.884\"\n    ]\n  ],\n  \"level\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"pid\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"BASE10NUM\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"thread\": [\n    [\n      \"nio-8081-exec-3\"\n    ]\n  ],\n  \"class\": [\n    [\n      \"c.l.a.w.controller.OfbizProxyController\"\n    ]\n  ],\n  \"transactionInfo\": [\n    [\n      \"{\"transactionCode\":\"ofbizProxy\",\"transactionDuration\":246}\"\n    ]\n  ]\n}\n```\n\n第二层针对普通的log\n\n```\n2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1\n```\n解析后的json如下：\n\n```\n{\n  \"timestamp\": [\n    [\n      \"2016-07-15 20:30:07.768\"\n    ]\n  ],\n  \"YEAR\": [\n    [\n      \"2016\"\n    ]\n  ],\n  \"MONTHNUM\": [\n    [\n      \"07\"\n    ]\n  ],\n  \"MONTHDAY\": [\n    [\n      \"15\"\n    ]\n  ],\n  \"TIME\": [\n    [\n      \"20:30:07.768\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"20\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"30\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"07.768\"\n    ]\n  ],\n  \"level\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"pid\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"BASE10NUM\": [\n    [\n      \"14624\"\n    ]\n  ],\n  \"thread\": [\n    [\n      \"nio-8081-exec-1\"\n    ]\n  ],\n  \"class\": [\n    [\n      \"c.l.a.web.controller.LoginController\"\n    ]\n  ],\n  \"logmessage\": [\n    [\n      \"Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1\"\n    ]\n  ]\n}\n```\n第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例","slug":"Elastic-Technologies/Logstash-Filter","published":1,"date":"2018-12-05T03:27:52.618Z","updated":"2018-03-05T01:03:32.240Z","_id":"cjpam3xd800097sq3gdxxdnfz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：<a href=\"https://github.com/logstash/logstash-logback-encoder\" target=\"_blank\" rel=\"noopener\">logstash-logback-encoder</a><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class=\"line\">  if [message] =~ &quot;\\tat&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; [&quot;message&quot;, &quot;^(\\tat)&quot;]</span><br><span class=\"line\">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Grokking Spring Boot&apos;s default log format</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; [ </span><br><span class=\"line\">\t\t\t\t#\tRecord transaction</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;,&quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[\\s*(?&lt;thread&gt;[^\\]]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*: \\[\\s*(?&lt;transactionInfo&gt;[^\\]]+)\\]&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[\\s*(?&lt;thread&gt;[^\\]]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*:\\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class=\"line\">             ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\"> elasticsearch&#123;&#125; </span><br><span class=\"line\"> stdout&#123;</span><br><span class=\"line\">   codec =&gt; rubydebug</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里grok配置了三册过滤， 第一层用作统计，message的格式如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [&#123;&quot;transactionCode&quot;:&quot;ofbizProxy&quot;,&quot;transactionDuration&quot;:246&#125;]</span><br></pre></td></tr></table></figure>\n<p>使用<a href=\"http://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Grok Debugger</a> 解析后如下</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"timestamp\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"2016-07-15 20:30:30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"YEAR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"2016\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"MONTHNUM\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"07\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"MONTHDAY\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"15\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"TIME\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"20:30:30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"HOUR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"20\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"MINUTE\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"30\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"SECOND\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"level\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"INFO\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"pid\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"14624\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"BASE10NUM\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"14624\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"thread\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"nio-8081-exec-3\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"class\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"c.l.a.w.controller.OfbizProxyController\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"transactionInfo\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"hljs-string\">\"&#123;\"</span>transactionCode<span class=\"hljs-string\">\":\"</span>ofbizProxy<span class=\"hljs-string\">\",\"</span>transactionDuration<span class=\"hljs-string\">\":246&#125;\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二层针对普通的log</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure>\n<p>解析后的json如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;timestamp&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;2016-07-15 20:30:07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;YEAR&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;2016&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MONTHNUM&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;07&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MONTHDAY&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;15&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;TIME&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;20:30:07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;HOUR&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;20&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MINUTE&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;30&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;SECOND&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;level&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;INFO&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;pid&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;14624&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;BASE10NUM&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;14624&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;thread&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;nio-8081-exec-1&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;class&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;c.l.a.web.controller.LoginController&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;logmessage&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例</p>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<p>笔者这里仅仅列出配置文件，在研究之后最红并没有采用在logstash的接下日志为json的做法。而是将json的输出放在了各个服务/应用中处理， spring boot的app可以参考：<a href=\"https://github.com/logstash/logstash-logback-encoder\" target=\"_blank\" rel=\"noopener\">logstash-logback-encoder</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  #If log line contains tab character followed by &apos;at&apos; then we will tag that entry as stacktrace</span><br><span class=\"line\">  if [message] =~ &quot;\\tat&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; [&quot;message&quot;, &quot;^(\\tat)&quot;]</span><br><span class=\"line\">      add_tag =&gt; [&quot;stacktrace&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Grokking Spring Boot&apos;s default log format</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; [ </span><br><span class=\"line\">\t\t\t\t#\tRecord transaction</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;,&quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[\\s*(?&lt;thread&gt;[^\\]]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*: \\[\\s*(?&lt;transactionInfo&gt;[^\\]]+)\\]&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- \\[\\s*(?&lt;thread&gt;[^\\]]+)\\] (?&lt;class&gt;[A-Za-z0-9.#_]+)\\s*:\\s+(?&lt;logmessage&gt;.*)&quot;,</span><br><span class=\"line\">\t\t\t\t&quot;message&quot;, &quot;(?&lt;timestamp&gt;%&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125; %&#123;TIME&#125;)  %&#123;LOGLEVEL:level&#125; %&#123;NUMBER:pid&#125; --- .+? :\\s+(?&lt;logmessage&gt;.*)&quot;</span><br><span class=\"line\">             ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #Parsing out timestamps which are in timestamp field thanks to previous grok section</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot; , &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\"> elasticsearch&#123;&#125; </span><br><span class=\"line\"> stdout&#123;</span><br><span class=\"line\">   codec =&gt; rubydebug</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里grok配置了三册过滤， 第一层用作统计，message的格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-15 20:30:30.884  INFO 14624 --- [nio-8081-exec-3] c.l.a.w.controller.OfbizProxyController  : [&#123;&quot;transactionCode&quot;:&quot;ofbizProxy&quot;,&quot;transactionDuration&quot;:246&#125;]</span><br></pre></td></tr></table></figure>\n<p>使用<a href=\"http://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Grok Debugger</a> 解析后如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"timestamp\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"2016-07-15 20:30:30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"YEAR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"2016\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"MONTHNUM\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"07\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"MONTHDAY\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"15\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"TIME\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"20:30:30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"HOUR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"20\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"MINUTE\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"30\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"SECOND\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"30.884\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"level\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"INFO\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"pid\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"14624\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"BASE10NUM\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"14624\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"thread\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"nio-8081-exec-3\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"class\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"c.l.a.w.controller.OfbizProxyController\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"transactionInfo\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"&#123;\"</span>transactionCode<span class=\"string\">\":\"</span>ofbizProxy<span class=\"string\">\",\"</span>transactionDuration<span class=\"string\">\":246&#125;\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二层针对普通的log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-07-15 20:30:07.768  INFO 14624 --- [nio-8081-exec-1] c.l.a.web.controller.LoginController     : Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure>\n<p>解析后的json如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;timestamp&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;2016-07-15 20:30:07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;YEAR&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;2016&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MONTHNUM&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;07&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MONTHDAY&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;15&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;TIME&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;20:30:07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;HOUR&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;20&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;MINUTE&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;30&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;SECOND&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;07.768&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;level&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;INFO&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;pid&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;14624&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;BASE10NUM&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;14624&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;thread&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;nio-8081-exec-1&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;class&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;c.l.a.web.controller.LoginController&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;logmessage&quot;: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;Login username:vincent.chen@okchem.com IP is:0:0:0:0:0:0:0:1&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三层针对遗漏的无法匹配到的log再次解析， 这里暂时没有示例</p>\n"},{"_content":"---\ntitle:  文档的title，页面及列表都会展示\ndescription: 描述这个页面的信息\nshowOnHome: false\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n# 欢迎使用\n本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：\n\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- **丰富的快捷键**\n\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","source":"_posts/Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight.md","raw":"---\ntitle:  文档的title，页面及列表都会展示\ndescription: 描述这个页面的信息\nshowOnHome: false\n...\n\n这个是一个模板, 请务必将showOnHome 修改为true\n\n# 欢迎使用\n本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：\n\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- **丰富的快捷键**\n\n\n-------------------\n\n\n## 快捷键\n\n- Cmd-' 引用\n- Cmd-B\t加粗\n- Cmd-E\t 清除Block\n- Cmd-H\t 标题Header变小\n- Cmd-I\t   斜体\n- Cmd-K\t  链接\n- Cmd-L\t 无序列表\n- Cmd-P\t Preview\n- Cmd-Alt-C\t 代码块\n- Cmd-Alt-I\t 插入图片\n- Cmd-Alt-L\t有序列表\n- Shift-Cmd-H  标题Header变大\n- F9\t 窗口拆分\n- F11\t全屏\n\n\n","slug":"Elastic-Technologies/spring-data-elasticsearch-2.1.12-highlight","published":1,"date":"2018-12-05T03:27:52.628Z","updated":"2018-11-01T01:03:16.999Z","_id":"cjpam3xd8000a7sq3xvcw254q","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<h1 id=\"欢迎使用\"><a href=\"#欢迎使用\" class=\"headerlink\" title=\"欢迎使用\"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p>\n<ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<hr>\n<p>title:  文档的title，页面及列表都会展示<br>description: 描述这个页面的信息<br>showOnHome: false<br>…</p>\n<p>这个是一个模板, 请务必将showOnHome 修改为true</p>\n<h1 id=\"欢迎使用\"><a href=\"#欢迎使用\" class=\"headerlink\" title=\"欢迎使用\"></a>欢迎使用</h1><p>本Markdown编辑器使用simplemde-plus，用它写博客，将会带来全新的体验哦：</p>\n<ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>Cmd-‘ 引用</li>\n<li>Cmd-B    加粗</li>\n<li>Cmd-E     清除Block</li>\n<li>Cmd-H     标题Header变小</li>\n<li>Cmd-I       斜体</li>\n<li>Cmd-K      链接</li>\n<li>Cmd-L     无序列表</li>\n<li>Cmd-P     Preview</li>\n<li>Cmd-Alt-C     代码块</li>\n<li>Cmd-Alt-I     插入图片</li>\n<li>Cmd-Alt-L    有序列表</li>\n<li>Shift-Cmd-H  标题Header变大</li>\n<li>F9     窗口拆分</li>\n<li>F11    全屏</li>\n</ul>\n"},{"title":"Metricbeat 的使用","description":"通过Metricbeat 来统计并展示系统的信息 cpu， 内存等","_content":"### 目标\n统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)\n### 前提\n 1. 版本： 5.x\n 2. 已经安装了ELK (elasticsearch, logstash (可选）, kibana)\n 3. 安装了x-pack  （配置了对应的security）（可选） 参考 [Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218)\n\n### 安装配置\n安装，配置参考  [官方网站](https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html)\n使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。\n（创建角色和用户可以参考 [Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218) ，这里角色需要用操作索引metricbeat-*）\n> elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置`network.host: 0.0.0.0` 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）\n\n### 加载kibana的示例 index template 和 dashboards\n> 因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。\n\n```\n./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme\n```\n\n### kibana中查看对应的结果\n\n登录kibana打开对应的dashboard 既可以看到统计报告了\n\n![Kibana 中 展示系统运行状态](http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png)\n\n","source":"_posts/Elastic-Technologies/Metricbeat-Usage.md","raw":"---\ntitle: Metricbeat 的使用\ndescription: 通过Metricbeat 来统计并展示系统的信息 cpu， 内存等\n---\n### 目标\n统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)\n### 前提\n 1. 版本： 5.x\n 2. 已经安装了ELK (elasticsearch, logstash (可选）, kibana)\n 3. 安装了x-pack  （配置了对应的security）（可选） 参考 [Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218)\n\n### 安装配置\n安装，配置参考  [官方网站](https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html)\n使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。\n（创建角色和用户可以参考 [Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218) ，这里角色需要用操作索引metricbeat-*）\n> elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置`network.host: 0.0.0.0` 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）\n\n### 加载kibana的示例 index template 和 dashboards\n> 因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。\n\n```\n./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme\n```\n\n### kibana中查看对应的结果\n\n登录kibana打开对应的dashboard 既可以看到统计报告了\n\n![Kibana 中 展示系统运行状态](http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png)\n\n","slug":"Elastic-Technologies/Metricbeat-Usage","published":1,"date":"2018-12-05T03:27:52.628Z","updated":"2018-06-07T13:04:26.119Z","_id":"cjpam3xd8000b7sq3khcrbpwv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)</p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ol>\n<li>版本： 5.x</li>\n<li>已经安装了ELK (elasticsearch, logstash (可选）, kibana)</li>\n<li>安装了x-pack  （配置了对应的security）（可选） 参考 <a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\">Kibana 5.x 加强安全</a></li>\n</ol>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>安装，配置参考  <a href=\"https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html\" target=\"_blank\" rel=\"noopener\">官方网站</a><br>使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。<br>（创建角色和用户可以参考 <a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\">Kibana 5.x 加强安全</a> ，这里角色需要用操作索引metricbeat-*）</p>\n<blockquote>\n<p>elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置<code>network.host: 0.0.0.0</code> 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）</p>\n</blockquote>\n<h3 id=\"加载kibana的示例-index-template-和-dashboards\"><a href=\"#加载kibana的示例-index-template-和-dashboards\" class=\"headerlink\" title=\"加载kibana的示例 index template 和 dashboards\"></a>加载kibana的示例 index template 和 dashboards</h3><blockquote>\n<p>因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。</p>\n</blockquote>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme</span><br></pre></td></tr></table></figure>\n<h3 id=\"kibana中查看对应的结果\"><a href=\"#kibana中查看对应的结果\" class=\"headerlink\" title=\"kibana中查看对应的结果\"></a>kibana中查看对应的结果</h3><p>登录kibana打开对应的dashboard 既可以看到统计报告了</p>\n<p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png\" alt=\"Kibana 中 展示系统运行状态\"></p>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>统计并展示系统的信息 cpu， 内存等 (当然metricbeat能收集的信息种类还很多)</p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ol>\n<li>版本： 5.x</li>\n<li>已经安装了ELK (elasticsearch, logstash (可选）, kibana)</li>\n<li>安装了x-pack  （配置了对应的security）（可选） 参考 <a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\">Kibana 5.x 加强安全</a></li>\n</ol>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>安装，配置参考  <a href=\"https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-installation.html\" target=\"_blank\" rel=\"noopener\">官方网站</a><br>使用OOTB配置即可，一般只需要修改ES的端口和地址。 如果加强了security，也需要更改 metricbeat.yml。 这里已经加强了安全，配置了用户，故需要更改metricbeat.yml添加elasticsearch的相关访问用户。<br>（创建角色和用户可以参考 <a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\">Kibana 5.x 加强安全</a> ，这里角色需要用操作索引metricbeat-*）</p>\n<blockquote>\n<p>elasticsearch 默认绑定了localhost的访问，需要取消这种绑定。 设置<code>network.host: 0.0.0.0</code> 0.0.0.0 表示任意地址，如果设置成了IP地址，那么同台机器的kibana和logstash的需要做对应的修改。（比如：192.168.1.50， logstash和kibana需要把链接elasticsearch的hosts 从localhost改成：192.168.1.50）</p>\n</blockquote>\n<h3 id=\"加载kibana的示例-index-template-和-dashboards\"><a href=\"#加载kibana的示例-index-template-和-dashboards\" class=\"headerlink\" title=\"加载kibana的示例 index template 和 dashboards\"></a>加载kibana的示例 index template 和 dashboards</h3><blockquote>\n<p>因为metricbeat 可能装在多个机器，index template 和dashboard 只需要导入一次即可。默认会自动加载index template到elasticsearch。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./scripts/import_dashboards -es http://localhost:9200 -user elastic -pass changeme</span><br></pre></td></tr></table></figure>\n<h3 id=\"kibana中查看对应的结果\"><a href=\"#kibana中查看对应的结果\" class=\"headerlink\" title=\"kibana中查看对应的结果\"></a>kibana中查看对应的结果</h3><p>登录kibana打开对应的dashboard 既可以看到统计报告了</p>\n<p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/kibana-statics.png\" alt=\"Kibana 中 展示系统运行状态\"></p>\n"},{"_content":"---\ntitle:  Spring Data Elasticsearch 快速上手全文检索 - 进阶\ndescription: 通过Spring Data Elasticsearch 实现全文检索并高亮关键词。\n...\n\n继上一篇 [Spring Data Elasticsearch 快速上手全文检索](http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start)之后，进一步深入以下内容：\n* 高亮显示关键词\n* 指定Analyzer更合理的检索\n\n> 最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。\n\n## 代码\n```\ngit clone https://github.com/choelea/spring-data-elasticsearch-quick-start\n```\n\nhttps://github.com/elastic/elasticsearch/issues/11713\n\n## 高亮关键词\n对name和description中的关键字进行高亮显示，直接参考代码：\n```\nSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)\n\t\t\t\t.withPageable(pageable)\n\t\t\t\t.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))\n\t\t\t\t.addAggregation(termBuilder).build();\n```\n默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。","source":"_posts/Elastic-Technologies/spring-data-elasticsearch-quick-start-2.md","raw":"---\ntitle:  Spring Data Elasticsearch 快速上手全文检索 - 进阶\ndescription: 通过Spring Data Elasticsearch 实现全文检索并高亮关键词。\n...\n\n继上一篇 [Spring Data Elasticsearch 快速上手全文检索](http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start)之后，进一步深入以下内容：\n* 高亮显示关键词\n* 指定Analyzer更合理的检索\n\n> 最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。\n\n## 代码\n```\ngit clone https://github.com/choelea/spring-data-elasticsearch-quick-start\n```\n\nhttps://github.com/elastic/elasticsearch/issues/11713\n\n## 高亮关键词\n对name和description中的关键字进行高亮显示，直接参考代码：\n```\nSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)\n\t\t\t\t.withPageable(pageable)\n\t\t\t\t.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))\n\t\t\t\t.addAggregation(termBuilder).build();\n```\n默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。","slug":"Elastic-Technologies/spring-data-elasticsearch-quick-start-2","published":1,"date":"2018-12-05T03:27:52.628Z","updated":"2018-11-01T01:03:17.001Z","_id":"cjpam3xdi000c7sq3wlqi4kb4","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title:  Spring Data Elasticsearch 快速上手全文检索 - 进阶<br>description: 通过Spring Data Elasticsearch 实现全文检索并高亮关键词。<br>…</p>\n<p>继上一篇 <a href=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start\" target=\"_blank\" rel=\"noopener\">Spring Data Elasticsearch 快速上手全文检索</a>之后，进一步深入以下内容：</p>\n<ul>\n<li>高亮显示关键词</li>\n<li>指定Analyzer更合理的检索</li>\n</ul>\n<blockquote>\n<p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/elastic/elasticsearch/issues/11713\" target=\"_blank\" rel=\"noopener\">https://github.com/elastic/elasticsearch/issues/11713</a></p>\n<h2 id=\"高亮关键词\"><a href=\"#高亮关键词\" class=\"headerlink\" title=\"高亮关键词\"></a>高亮关键词</h2><p>对name和description中的关键字进行高亮显示，直接参考代码：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class=\"line\">\t\t\t\t.withPageable(pageable)</span><br><span class=\"line\">\t\t\t\t.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))</span><br><span class=\"line\">\t\t\t\t.addAggregation(termBuilder).build();</span><br></pre></td></tr></table></figure></p>\n<p>默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。</p>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<hr>\n<p>title:  Spring Data Elasticsearch 快速上手全文检索 - 进阶<br>description: 通过Spring Data Elasticsearch 实现全文检索并高亮关键词。<br>…</p>\n<p>继上一篇 <a href=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-quick-start\" target=\"_blank\" rel=\"noopener\">Spring Data Elasticsearch 快速上手全文检索</a>之后，进一步深入以下内容：</p>\n<ul>\n<li>高亮显示关键词</li>\n<li>指定Analyzer更合理的检索</li>\n</ul>\n<blockquote>\n<p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch 自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper 已经支持了聚合。无需为聚合儿自定义ResultMapper。</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/elastic/elasticsearch/issues/11713\" target=\"_blank\" rel=\"noopener\">https://github.com/elastic/elasticsearch/issues/11713</a></p>\n<h2 id=\"高亮关键词\"><a href=\"#高亮关键词\" class=\"headerlink\" title=\"高亮关键词\"></a>高亮关键词</h2><p>对name和description中的关键字进行高亮显示，直接参考代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class=\"line\">\t\t\t\t.withPageable(pageable)</span><br><span class=\"line\">\t\t\t\t.withHighlightFields( new HighlightBuilder.Field(ProductDoc._name).forceSource(true), new HighlightBuilder.Field(ProductDoc._description).forceSource(true))</span><br><span class=\"line\">\t\t\t\t.addAggregation(termBuilder).build();</span><br></pre></td></tr></table></figure></p>\n<p>默认情况下返回高亮字段不在_source内，当转成成我们的ProductDoc的时候对应的name和description是不会有变化的， 这个时候还是需要定制ResultMapper， 因此这里定制了一个ExtResultMapper。 将高亮字段覆盖到ProductDoc 中对应的字段去。</p>\n"},{"title":"kibana的访问控制 - Nginx 反向代理 - 免费","description":"通过Nginx的反向代理来加强kibana的访问安全","_content":"前一篇[ Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218) 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）\n\n### 参考：\n[How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7](https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7)\n\n### 配置Nginx SSL\n#### 第一步: 安装 Nginx 并配置防火墙\n参考上面的文章\n> **注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放**\n\n#### 第二步：生成证书\n参考上面的文章\n#### 第三步：添加kibana.https.conf配置\n\n配置如下：\n\n```\nserver {\n    listen 443 http2 ssl;\n    listen [::]:443 http2 ssl;\n\n    server_name kibana.domain.com;\n\n    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\n    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    ########################################################################\n    # from https://cipherli.st/                                            #\n    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #\n    ########################################################################\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n    ssl_ecdh_curve secp384r1;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_tickets off;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n    # Disable preloading HSTS for now.  You can use the commented out header line that includes\n    # the \"preload\" directive if you understand the implications.\n    #add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains\";\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n\n    ##################################\n    # END https://cipherli.st/ BLOCK #\n    ##################################\n    \n    # 这里是反向代理到kibana服务 走http协议\n    location / {\n       proxy_pass   http://localhost:5601;       \n    }\n}\n\n```\n#### 第四步：验证SSL 访问\n为设置http跳转的时候，注意在浏览器地址栏中输入https://kibana.domain.com 来验证\n#### 第五步： 添加Nginx的Basic Authentication 访问控制\n\n 1. 查看是否有安装httpd-tools `sudo rpm -qa | grep httpd-tools`, 如果有，则可以看到如下信息：`httpd-tools-2.4.6-40.el7.centos.4.x86_64` 如果没有安装，可以通过`sudo yum -y install httpd-tools` 来安装\n 2. 配置nginx 反向代理 添加\n```\n auth_basic \" Basic Authentication \";      \n auth_basic_user_file \"/etc/nginx/.htpasswd\";\n```\n 添加至反向代理的配置\n```\n......\nlocation / {\n    proxy_pass   http://localhost:5601;\n    auth_basic \" Basic Authentication \";      \n    auth_basic_user_file \"/etc/nginx/.htpasswd\";       \n}\n.....\n```\n 3. 生成密码文件 `sudo htpasswd -c /etc/nginx/.htpasswd username` 根据提示输入密码\n 4. 重新加载ngixn `sudo service nginx reload`\n 5. 再次登录来，提示弹出框，输入用户名和密码\n\n","source":"_posts/Elastic-Technologies/Nignx-Kibana-Security.md","raw":"---\ntitle: kibana的访问控制 - Nginx 反向代理 - 免费\ndescription: 通过Nginx的反向代理来加强kibana的访问安全\n---\n前一篇[ Kibana 5.x 加强安全](http://blog.csdn.net/choelea/article/details/53841218) 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）\n\n### 参考：\n[How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7](https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7)\n\n### 配置Nginx SSL\n#### 第一步: 安装 Nginx 并配置防火墙\n参考上面的文章\n> **注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放**\n\n#### 第二步：生成证书\n参考上面的文章\n#### 第三步：添加kibana.https.conf配置\n\n配置如下：\n\n```\nserver {\n    listen 443 http2 ssl;\n    listen [::]:443 http2 ssl;\n\n    server_name kibana.domain.com;\n\n    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\n    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    ########################################################################\n    # from https://cipherli.st/                                            #\n    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #\n    ########################################################################\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n    ssl_ecdh_curve secp384r1;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_tickets off;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n    # Disable preloading HSTS for now.  You can use the commented out header line that includes\n    # the \"preload\" directive if you understand the implications.\n    #add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains\";\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n\n    ##################################\n    # END https://cipherli.st/ BLOCK #\n    ##################################\n    \n    # 这里是反向代理到kibana服务 走http协议\n    location / {\n       proxy_pass   http://localhost:5601;       \n    }\n}\n\n```\n#### 第四步：验证SSL 访问\n为设置http跳转的时候，注意在浏览器地址栏中输入https://kibana.domain.com 来验证\n#### 第五步： 添加Nginx的Basic Authentication 访问控制\n\n 1. 查看是否有安装httpd-tools `sudo rpm -qa | grep httpd-tools`, 如果有，则可以看到如下信息：`httpd-tools-2.4.6-40.el7.centos.4.x86_64` 如果没有安装，可以通过`sudo yum -y install httpd-tools` 来安装\n 2. 配置nginx 反向代理 添加\n```\n auth_basic \" Basic Authentication \";      \n auth_basic_user_file \"/etc/nginx/.htpasswd\";\n```\n 添加至反向代理的配置\n```\n......\nlocation / {\n    proxy_pass   http://localhost:5601;\n    auth_basic \" Basic Authentication \";      \n    auth_basic_user_file \"/etc/nginx/.htpasswd\";       \n}\n.....\n```\n 3. 生成密码文件 `sudo htpasswd -c /etc/nginx/.htpasswd username` 根据提示输入密码\n 4. 重新加载ngixn `sudo service nginx reload`\n 5. 再次登录来，提示弹出框，输入用户名和密码\n\n","slug":"Elastic-Technologies/Nignx-Kibana-Security","published":1,"date":"2018-12-05T03:27:52.628Z","updated":"2018-03-05T01:03:32.242Z","_id":"cjpam3xdi000d7sq3syz0cbzr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前一篇<a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\"> Kibana 5.x 加强安全</a> 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）</p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7\" target=\"_blank\" rel=\"noopener\">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p>\n<h3 id=\"配置Nginx-SSL\"><a href=\"#配置Nginx-SSL\" class=\"headerlink\" title=\"配置Nginx SSL\"></a>配置Nginx SSL</h3><h4 id=\"第一步-安装-Nginx-并配置防火墙\"><a href=\"#第一步-安装-Nginx-并配置防火墙\" class=\"headerlink\" title=\"第一步: 安装 Nginx 并配置防火墙\"></a>第一步: 安装 Nginx 并配置防火墙</h4><p>参考上面的文章</p>\n<blockquote>\n<p><strong>注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放</strong></p>\n</blockquote>\n<h4 id=\"第二步：生成证书\"><a href=\"#第二步：生成证书\" class=\"headerlink\" title=\"第二步：生成证书\"></a>第二步：生成证书</h4><p>参考上面的文章</p>\n<h4 id=\"第三步：添加kibana-https-conf配置\"><a href=\"#第三步：添加kibana-https-conf配置\" class=\"headerlink\" title=\"第三步：添加kibana.https.conf配置\"></a>第三步：添加kibana.https.conf配置</h4><p>配置如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 http2 ssl;</span><br><span class=\"line\">    listen [::]:443 http2 ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name kibana.domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;</span><br><span class=\"line\">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ########################################################################</span><br><span class=\"line\">    # from https://cipherli.st/                                            #</span><br><span class=\"line\">    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #</span><br><span class=\"line\">    ########################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class=\"line\">    ssl_ecdh_curve secp384r1;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class=\"line\">    resolver_timeout 5s;</span><br><span class=\"line\">    # Disable preloading HSTS for now.  You can use the commented out header line that includes</span><br><span class=\"line\">    # the &quot;preload&quot; directive if you understand the implications.</span><br><span class=\"line\">    #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;</span><br><span class=\"line\">    add_header X-Frame-Options DENY;</span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\"></span><br><span class=\"line\">    ##################################</span><br><span class=\"line\">    # END https://cipherli.st/ BLOCK #</span><br><span class=\"line\">    ##################################</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 这里是反向代理到kibana服务 走http协议</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       proxy_pass   http://localhost:5601;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步：验证SSL-访问\"><a href=\"#第四步：验证SSL-访问\" class=\"headerlink\" title=\"第四步：验证SSL 访问\"></a>第四步：验证SSL 访问</h4><p>为设置http跳转的时候，注意在浏览器地址栏中输入<a href=\"https://kibana.domain.com\" target=\"_blank\" rel=\"noopener\">https://kibana.domain.com</a> 来验证</p>\n<h4 id=\"第五步：-添加Nginx的Basic-Authentication-访问控制\"><a href=\"#第五步：-添加Nginx的Basic-Authentication-访问控制\" class=\"headerlink\" title=\"第五步： 添加Nginx的Basic Authentication 访问控制\"></a>第五步： 添加Nginx的Basic Authentication 访问控制</h4><ol>\n<li>查看是否有安装httpd-tools <code>sudo rpm -qa | grep httpd-tools</code>, 如果有，则可以看到如下信息：<code>httpd-tools-2.4.6-40.el7.centos.4.x86_64</code> 如果没有安装，可以通过<code>sudo yum -y install httpd-tools</code> 来安装</li>\n<li><p>配置nginx 反向代理 添加</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth_basic &quot; Basic Authentication &quot;;      </span><br><span class=\"line\">auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;</span><br></pre></td></tr></table></figure>\n<p>添加至反向代理的配置</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass   http://localhost:5601;</span><br><span class=\"line\">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class=\"line\">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成密码文件 <code>sudo htpasswd -c /etc/nginx/.htpasswd username</code> 根据提示输入密码</p>\n</li>\n<li>重新加载ngixn <code>sudo service nginx reload</code></li>\n<li>再次登录来，提示弹出框，输入用户名和密码</li>\n</ol>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<p>前一篇<a href=\"http://blog.csdn.net/choelea/article/details/53841218\" target=\"_blank\" rel=\"noopener\"> Kibana 5.x 加强安全</a> 采用的是官方的x-pack 插件来实现elastic技术栈的相关产品的权限控制。功能不错，也提供了很大的灵活性，不过x-pack并非免费产品；咨询了下licence价格，大概三个节点年费六千多美刀。。。废话不多说了，想想替代方案 - Nginx 反向代理 （收回5601端口，通过nginx反向代理+basic authentication来保证安全）</p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7\" target=\"_blank\" rel=\"noopener\">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p>\n<h3 id=\"配置Nginx-SSL\"><a href=\"#配置Nginx-SSL\" class=\"headerlink\" title=\"配置Nginx SSL\"></a>配置Nginx SSL</h3><h4 id=\"第一步-安装-Nginx-并配置防火墙\"><a href=\"#第一步-安装-Nginx-并配置防火墙\" class=\"headerlink\" title=\"第一步: 安装 Nginx 并配置防火墙\"></a>第一步: 安装 Nginx 并配置防火墙</h4><p>参考上面的文章</p>\n<blockquote>\n<p><strong>注意： 80 和 443 端口必须对外打开。 当遇见ERR_CONNECTION_REFUSED 这类错误的时候，一定要提高警惕查看端口是否打开。以免浪费时间在配置上面。可以ssh到nginx机器上通过curl 的命令来验证，如果服务器上curl可以访问，外面不可访问；那么很可能端口没开放</strong></p>\n</blockquote>\n<h4 id=\"第二步：生成证书\"><a href=\"#第二步：生成证书\" class=\"headerlink\" title=\"第二步：生成证书\"></a>第二步：生成证书</h4><p>参考上面的文章</p>\n<h4 id=\"第三步：添加kibana-https-conf配置\"><a href=\"#第三步：添加kibana-https-conf配置\" class=\"headerlink\" title=\"第三步：添加kibana.https.conf配置\"></a>第三步：添加kibana.https.conf配置</h4><p>配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 http2 ssl;</span><br><span class=\"line\">    listen [::]:443 http2 ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name kibana.domain.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;</span><br><span class=\"line\">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ########################################################################</span><br><span class=\"line\">    # from https://cipherli.st/                                            #</span><br><span class=\"line\">    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #</span><br><span class=\"line\">    ########################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;</span><br><span class=\"line\">    ssl_ecdh_curve secp384r1;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.8.8 8.8.4.4 valid=300s;</span><br><span class=\"line\">    resolver_timeout 5s;</span><br><span class=\"line\">    # Disable preloading HSTS for now.  You can use the commented out header line that includes</span><br><span class=\"line\">    # the &quot;preload&quot; directive if you understand the implications.</span><br><span class=\"line\">    #add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;</span><br><span class=\"line\">    add_header X-Frame-Options DENY;</span><br><span class=\"line\">    add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\"></span><br><span class=\"line\">    ##################################</span><br><span class=\"line\">    # END https://cipherli.st/ BLOCK #</span><br><span class=\"line\">    ##################################</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 这里是反向代理到kibana服务 走http协议</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       proxy_pass   http://localhost:5601;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步：验证SSL-访问\"><a href=\"#第四步：验证SSL-访问\" class=\"headerlink\" title=\"第四步：验证SSL 访问\"></a>第四步：验证SSL 访问</h4><p>为设置http跳转的时候，注意在浏览器地址栏中输入<a href=\"https://kibana.domain.com\" target=\"_blank\" rel=\"noopener\">https://kibana.domain.com</a> 来验证</p>\n<h4 id=\"第五步：-添加Nginx的Basic-Authentication-访问控制\"><a href=\"#第五步：-添加Nginx的Basic-Authentication-访问控制\" class=\"headerlink\" title=\"第五步： 添加Nginx的Basic Authentication 访问控制\"></a>第五步： 添加Nginx的Basic Authentication 访问控制</h4><ol>\n<li>查看是否有安装httpd-tools <code>sudo rpm -qa | grep httpd-tools</code>, 如果有，则可以看到如下信息：<code>httpd-tools-2.4.6-40.el7.centos.4.x86_64</code> 如果没有安装，可以通过<code>sudo yum -y install httpd-tools</code> 来安装</li>\n<li><p>配置nginx 反向代理 添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth_basic &quot; Basic Authentication &quot;;      </span><br><span class=\"line\">auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;</span><br></pre></td></tr></table></figure>\n<p>添加至反向代理的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass   http://localhost:5601;</span><br><span class=\"line\">    auth_basic &quot; Basic Authentication &quot;;      </span><br><span class=\"line\">    auth_basic_user_file &quot;/etc/nginx/.htpasswd&quot;;       </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成密码文件 <code>sudo htpasswd -c /etc/nginx/.htpasswd username</code> 根据提示输入密码</p>\n</li>\n<li>重新加载ngixn <code>sudo service nginx reload</code></li>\n<li>再次登录来，提示弹出框，输入用户名和密码</li>\n</ol>\n"},{"_content":"---\ntitle:  Spring Data Elasticsearch 快速上手全文检索\ndescription: 通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能\n...\n通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。\n\n## Elasticsearch 基础知识\n建立对Elasticsearch的初步的认识可以参考：[https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA](https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA)\n\n上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。 \nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\n\n官方的中文文档参考： [https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html)\n## 版本\n - Spring Boot： 1.4.7\n - Spring Data Elasticsearch  2.0.11\n - Elasticsearch server 2.4\n\n> 追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了`AggregatedPage` ， 同时`org.springframework.data.elasticsearch.core.DefaultResultMapper` 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。\n\n## 安装与运行\n### Elasticsearch 安装及运行\nelasticsearch 是运行于java之上，可以直接下载运行。从https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6 下载2.4.6 版本。 \n - ZIP sha   ----- window安装包  \n - TAR sha   ----- Mac 或者linux安装包\n - DEB sha   \n - RPM sha   ----- linux rpm 包可以安装成系统服务\n\nZIP包解压的直接进入 bin 目录运行 `./elasticserach`, 运行 `./elasticsearch -d` 后台运行\n RPM 安装后通过 `service elasticsearch start` 来启动\n \n### Kibana 安装及运行\n 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： https://www.elastic.co/downloads/past-releases/kibana-4-6-6 \n > kibana 解压方式无后台运行命令，建议通过rpm方式安装`sudo rpm -ivh kibana-4.6.6-x86_64.rpm` , 以服务方式启动和停止。\n### 安装Kibana的Sense插件\n此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 `/opt/kibana` 运行`./bin/kibana plugin --install elastic/sense`。 \n## 代码\nhttps://github.com/choelea/spring-data-elasticsearch-quick-start  2.0.11.RELEASE\n```\ngit clone https://github.com/choelea/spring-data-elasticsearch-quick-start\ncd spring-data-elasticsearch-quick-start/\ngit checkout tags/2.0.11.RELEASE\n```\n\n> 最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 \n## 配置\n```\nspring.data.elasticsearch.repositories.enabled = true\nspring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300\n```\n## 定义Document\n参考： `com.joe.springdataelasticsearch.document.ProductDoc` . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：`No id property found for class com.joe.springdataelasticsearch.document.ProductDoc`\n\n当前版本下需要指定Field的type，否则也会报错。\n> 修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：`mapper [type] of different type, current_type [long], merged_type [string]`\n\n\n\n## 创建索引\n系统启动后，创建索引和创建/更新mapping\n\n```\nelasticsearchTemplate.deleteIndex(ProductDoc.class);\nelasticsearchTemplate.createIndex(ProductDoc.class);\nelasticsearchTemplate.putMapping(ProductDoc.class);\n```\n启动后可以通过`http://192.168.1.99:9200/product-index/_mapping/main/` 来查看mapping。\n> Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working\n## 索引文档\nelasticsearch 是通过PUT接口来索引文档。[https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html)。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  `ProductDocRespository.save(ProductDoc doc)`  来索引和更新文档。 \n```\npublic interface ProductDocRespository extends ElasticsearchRepository<ProductDoc, Long>\n```\n参考`com.joe.springdataelasticsearch.listner.ContextRefreshedListener` 来查看索引测试文档数据。\n\n## 测试数据\n![spring-data-elasticsearch-productdocs](http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png)\n\n## 全文检索\n查询主要解决：\n* 多个字段搜索查询使用布尔匹配的方式， 参考官方说明 [布尔匹配](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html)\n* 不同字段的权重设置，采用设置Boost方式， 参考： [查询语句提升权重](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html)\n* 聚合结果集 \n\n**具体代码参考如下**：\n```\npublic Page<ProductDoc> search(String keyword, Boolean isSelfRun, Pageable pageable) {\n\t\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\t\tif (StringUtils.isNotEmpty(keyword)) {\n\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重\n\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1\n\t\t\tqueryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足\n\t\t}\n\n\t\tif (isSelfRun!=null && isSelfRun) {\n\t\t\tqueryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询\n\t\t}\n\t\t\n\t\t\t\t\n\t\tSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)\n\t\t\t\t.withPageable(pageable).build();\n\t\tLOGGER.info(\"\\n search(): searchContent [\" + keyword + \"] \\n DSL  = \\n \" + searchQuery.getQuery().toString());\n\t\treturn productDocRespository.search(searchQuery);\n\t}\n```\n\n\n## 测试全文检索\n1. http://localhost:8080/products?keyword=huawei \n2. http://localhost:8080/products?keyword=iphone 通过对iphone的搜索可以验证boost值得效果\n3. http://localhost:8080/products?keyword=iphone&isSelfRun=true  验证精准值匹配效果\n\n## 聚合查询\n**需求： **统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。\n\n聚合的详细理解参考 [聚合 | Elasticsearch: 权威指南  | Elastic](https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html)， 这里我们只通过简单的桶（Bucket）的方式来实现需求。\n\n通过google搜索`spring data elasticsearch aggregation example` 不难找到类似如下链接中的代码：https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java； 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？\n\n通过查看spring-data-elasticsearch的源代码我们可以发现`org.springframework.data.elasticsearch.core.DefaultResultMapper` 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：`com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper`。\n\n## 聚合查询测试\nhttp://localhost:8080/products/aggregation?keyword=China 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。\n**返回JSON 数据如下：**\n```\n{\n  \"content\": [\n    {\n      \"id\": 2,\n      \"name\": \"Huawei\",\n      \"description\": \"Made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": false\n    },\n    {\n      \"id\": 5,\n      \"name\": \"Iphone X\",\n      \"description\": \"Iphone X is made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": true\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Mac Pro\",\n      \"description\": \"Mac Pro is made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": true\n    },\n    {\n      \"id\": 7,\n      \"name\": \"Nokia N90\",\n      \"description\": \"Nokia N 90 is made by China\",\n      \"type\": \"GENERAL\",\n      \"isSelfRun\": false\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Huawei Max3\",\n      \"description\": \"Huawei is designed / made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": false\n    }\n  ],\n  \"bucketsByType\": [\n    {\n      \"key\": \"SMARTPHONE\",\n      \"lable\": \"type\",\n      \"docCount\": 4\n    },\n    {\n      \"key\": \"GENERAL\",\n      \"lable\": \"type\",\n      \"docCount\": 1\n    }\n  ],\n  \"totalElements\": 5,\n  \"last\": true,\n  \"totalPages\": 1,\n  \"number\": 0,\n  \"size\": 10,\n  \"sort\": null,\n  \"numberOfElements\": 5,\n  \"first\": true\n}\n```\n\n## 高亮显示\n参考：http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight\n","source":"_posts/Elastic-Technologies/spring-data-elasticsearch-quick-start.md","raw":"---\ntitle:  Spring Data Elasticsearch 快速上手全文检索\ndescription: 通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能\n...\n通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。\n\n## Elasticsearch 基础知识\n建立对Elasticsearch的初步的认识可以参考：[https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA](https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA)\n\n上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。 \nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\n\n官方的中文文档参考： [https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html)\n## 版本\n - Spring Boot： 1.4.7\n - Spring Data Elasticsearch  2.0.11\n - Elasticsearch server 2.4\n\n> 追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了`AggregatedPage` ， 同时`org.springframework.data.elasticsearch.core.DefaultResultMapper` 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。\n\n## 安装与运行\n### Elasticsearch 安装及运行\nelasticsearch 是运行于java之上，可以直接下载运行。从https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6 下载2.4.6 版本。 \n - ZIP sha   ----- window安装包  \n - TAR sha   ----- Mac 或者linux安装包\n - DEB sha   \n - RPM sha   ----- linux rpm 包可以安装成系统服务\n\nZIP包解压的直接进入 bin 目录运行 `./elasticserach`, 运行 `./elasticsearch -d` 后台运行\n RPM 安装后通过 `service elasticsearch start` 来启动\n \n### Kibana 安装及运行\n 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： https://www.elastic.co/downloads/past-releases/kibana-4-6-6 \n > kibana 解压方式无后台运行命令，建议通过rpm方式安装`sudo rpm -ivh kibana-4.6.6-x86_64.rpm` , 以服务方式启动和停止。\n### 安装Kibana的Sense插件\n此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 `/opt/kibana` 运行`./bin/kibana plugin --install elastic/sense`。 \n## 代码\nhttps://github.com/choelea/spring-data-elasticsearch-quick-start  2.0.11.RELEASE\n```\ngit clone https://github.com/choelea/spring-data-elasticsearch-quick-start\ncd spring-data-elasticsearch-quick-start/\ngit checkout tags/2.0.11.RELEASE\n```\n\n> 最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 \n## 配置\n```\nspring.data.elasticsearch.repositories.enabled = true\nspring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300\n```\n## 定义Document\n参考： `com.joe.springdataelasticsearch.document.ProductDoc` . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：`No id property found for class com.joe.springdataelasticsearch.document.ProductDoc`\n\n当前版本下需要指定Field的type，否则也会报错。\n> 修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：`mapper [type] of different type, current_type [long], merged_type [string]`\n\n\n\n## 创建索引\n系统启动后，创建索引和创建/更新mapping\n\n```\nelasticsearchTemplate.deleteIndex(ProductDoc.class);\nelasticsearchTemplate.createIndex(ProductDoc.class);\nelasticsearchTemplate.putMapping(ProductDoc.class);\n```\n启动后可以通过`http://192.168.1.99:9200/product-index/_mapping/main/` 来查看mapping。\n> Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working\n## 索引文档\nelasticsearch 是通过PUT接口来索引文档。[https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html](https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html)。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  `ProductDocRespository.save(ProductDoc doc)`  来索引和更新文档。 \n```\npublic interface ProductDocRespository extends ElasticsearchRepository<ProductDoc, Long>\n```\n参考`com.joe.springdataelasticsearch.listner.ContextRefreshedListener` 来查看索引测试文档数据。\n\n## 测试数据\n![spring-data-elasticsearch-productdocs](http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png)\n\n## 全文检索\n查询主要解决：\n* 多个字段搜索查询使用布尔匹配的方式， 参考官方说明 [布尔匹配](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html)\n* 不同字段的权重设置，采用设置Boost方式， 参考： [查询语句提升权重](https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html)\n* 聚合结果集 \n\n**具体代码参考如下**：\n```\npublic Page<ProductDoc> search(String keyword, Boolean isSelfRun, Pageable pageable) {\n\t\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\t\tif (StringUtils.isNotEmpty(keyword)) {\n\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重\n\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1\n\t\t\tqueryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足\n\t\t}\n\n\t\tif (isSelfRun!=null && isSelfRun) {\n\t\t\tqueryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询\n\t\t}\n\t\t\n\t\t\t\t\n\t\tSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)\n\t\t\t\t.withPageable(pageable).build();\n\t\tLOGGER.info(\"\\n search(): searchContent [\" + keyword + \"] \\n DSL  = \\n \" + searchQuery.getQuery().toString());\n\t\treturn productDocRespository.search(searchQuery);\n\t}\n```\n\n\n## 测试全文检索\n1. http://localhost:8080/products?keyword=huawei \n2. http://localhost:8080/products?keyword=iphone 通过对iphone的搜索可以验证boost值得效果\n3. http://localhost:8080/products?keyword=iphone&isSelfRun=true  验证精准值匹配效果\n\n## 聚合查询\n**需求： **统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。\n\n聚合的详细理解参考 [聚合 | Elasticsearch: 权威指南  | Elastic](https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html)， 这里我们只通过简单的桶（Bucket）的方式来实现需求。\n\n通过google搜索`spring data elasticsearch aggregation example` 不难找到类似如下链接中的代码：https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java； 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？\n\n通过查看spring-data-elasticsearch的源代码我们可以发现`org.springframework.data.elasticsearch.core.DefaultResultMapper` 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：`com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper`。\n\n## 聚合查询测试\nhttp://localhost:8080/products/aggregation?keyword=China 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。\n**返回JSON 数据如下：**\n```\n{\n  \"content\": [\n    {\n      \"id\": 2,\n      \"name\": \"Huawei\",\n      \"description\": \"Made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": false\n    },\n    {\n      \"id\": 5,\n      \"name\": \"Iphone X\",\n      \"description\": \"Iphone X is made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": true\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Mac Pro\",\n      \"description\": \"Mac Pro is made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": true\n    },\n    {\n      \"id\": 7,\n      \"name\": \"Nokia N90\",\n      \"description\": \"Nokia N 90 is made by China\",\n      \"type\": \"GENERAL\",\n      \"isSelfRun\": false\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Huawei Max3\",\n      \"description\": \"Huawei is designed / made by China\",\n      \"type\": \"SMARTPHONE\",\n      \"isSelfRun\": false\n    }\n  ],\n  \"bucketsByType\": [\n    {\n      \"key\": \"SMARTPHONE\",\n      \"lable\": \"type\",\n      \"docCount\": 4\n    },\n    {\n      \"key\": \"GENERAL\",\n      \"lable\": \"type\",\n      \"docCount\": 1\n    }\n  ],\n  \"totalElements\": 5,\n  \"last\": true,\n  \"totalPages\": 1,\n  \"number\": 0,\n  \"size\": 10,\n  \"sort\": null,\n  \"numberOfElements\": 5,\n  \"first\": true\n}\n```\n\n## 高亮显示\n参考：http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight\n","slug":"Elastic-Technologies/spring-data-elasticsearch-quick-start","published":1,"date":"2018-12-05T03:27:52.638Z","updated":"2018-11-01T01:03:17.003Z","_id":"cjpam3xdi000e7sq307aff1l9","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title:  Spring Data Elasticsearch 快速上手全文检索<br>description: 通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能<br>…<br>通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。</p>\n<h2 id=\"Elasticsearch-基础知识\"><a href=\"#Elasticsearch-基础知识\" class=\"headerlink\" title=\"Elasticsearch 基础知识\"></a>Elasticsearch 基础知识</h2><p>建立对Elasticsearch的初步的认识可以参考：<a href=\"https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA</a></p>\n<p>上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。<br><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</a></p>\n<p>官方的中文文档参考： <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>Spring Boot： 1.4.7</li>\n<li>Spring Data Elasticsearch  2.0.11</li>\n<li>Elasticsearch server 2.4</li>\n</ul>\n<blockquote>\n<p>追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了<code>AggregatedPage</code> ， 同时<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。</p>\n</blockquote>\n<h2 id=\"安装与运行\"><a href=\"#安装与运行\" class=\"headerlink\" title=\"安装与运行\"></a>安装与运行</h2><h3 id=\"Elasticsearch-安装及运行\"><a href=\"#Elasticsearch-安装及运行\" class=\"headerlink\" title=\"Elasticsearch 安装及运行\"></a>Elasticsearch 安装及运行</h3><p>elasticsearch 是运行于java之上，可以直接下载运行。从<a href=\"https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6</a> 下载2.4.6 版本。 </p>\n<ul>\n<li>ZIP sha   —– window安装包  </li>\n<li>TAR sha   —– Mac 或者linux安装包</li>\n<li>DEB sha   </li>\n<li>RPM sha   —– linux rpm 包可以安装成系统服务</li>\n</ul>\n<p>ZIP包解压的直接进入 bin 目录运行 <code>./elasticserach</code>, 运行 <code>./elasticsearch -d</code> 后台运行<br> RPM 安装后通过 <code>service elasticsearch start</code> 来启动</p>\n<h3 id=\"Kibana-安装及运行\"><a href=\"#Kibana-安装及运行\" class=\"headerlink\" title=\"Kibana 安装及运行\"></a>Kibana 安装及运行</h3><p> 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： <a href=\"https://www.elastic.co/downloads/past-releases/kibana-4-6-6\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/past-releases/kibana-4-6-6</a> </p>\n<blockquote>\n<p>kibana 解压方式无后台运行命令，建议通过rpm方式安装<code>sudo rpm -ivh kibana-4.6.6-x86_64.rpm</code> , 以服务方式启动和停止。</p>\n</blockquote>\n<h3 id=\"安装Kibana的Sense插件\"><a href=\"#安装Kibana的Sense插件\" class=\"headerlink\" title=\"安装Kibana的Sense插件\"></a>安装Kibana的Sense插件</h3><p>此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 <code>/opt/kibana</code> 运行<code>./bin/kibana plugin --install elastic/sense</code>。 </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/choelea/spring-data-elasticsearch-quick-start\" target=\"_blank\" rel=\"noopener\">https://github.com/choelea/spring-data-elasticsearch-quick-start</a>  2.0.11.RELEASE<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br><span class=\"line\">cd spring-data-elasticsearch-quick-start/</span><br><span class=\"line\">git checkout tags/2.0.11.RELEASE</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 </p>\n</blockquote>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.data.elasticsearch.repositories.enabled = true</span><br><span class=\"line\">spring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义Document\"><a href=\"#定义Document\" class=\"headerlink\" title=\"定义Document\"></a>定义Document</h2><p>参考： <code>com.joe.springdataelasticsearch.document.ProductDoc</code> . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：<code>No id property found for class com.joe.springdataelasticsearch.document.ProductDoc</code></p>\n<p>当前版本下需要指定Field的type，否则也会报错。</p>\n<blockquote>\n<p>修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：<code>mapper [type] of different type, current_type [long], merged_type [string]</code></p>\n</blockquote>\n<h2 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>系统启动后，创建索引和创建/更新mapping</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearchTemplate.deleteIndex(ProductDoc.class);</span><br><span class=\"line\">elasticsearchTemplate.createIndex(ProductDoc.class);</span><br><span class=\"line\">elasticsearchTemplate.putMapping(ProductDoc.class);</span><br></pre></td></tr></table></figure>\n<p>启动后可以通过<code>http://192.168.1.99:9200/product-index/_mapping/main/</code> 来查看mapping。</p>\n<blockquote>\n<p>Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：<a href=\"https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working</a></p>\n</blockquote>\n<h2 id=\"索引文档\"><a href=\"#索引文档\" class=\"headerlink\" title=\"索引文档\"></a>索引文档</h2><p>elasticsearch 是通过PUT接口来索引文档。<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html</a>。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  <code>ProductDocRespository.save(ProductDoc doc)</code>  来索引和更新文档。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ProductDocRespository extends ElasticsearchRepository&lt;ProductDoc, Long&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参考<code>com.joe.springdataelasticsearch.listner.ContextRefreshedListener</code> 来查看索引测试文档数据。</p>\n<h2 id=\"测试数据\"><a href=\"#测试数据\" class=\"headerlink\" title=\"测试数据\"></a>测试数据</h2><p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png\" alt=\"spring-data-elasticsearch-productdocs\"></p>\n<h2 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h2><p>查询主要解决：</p>\n<ul>\n<li>多个字段搜索查询使用布尔匹配的方式， 参考官方说明 <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html\" target=\"_blank\" rel=\"noopener\">布尔匹配</a></li>\n<li>不同字段的权重设置，采用设置Boost方式， 参考： <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html\" target=\"_blank\" rel=\"noopener\">查询语句提升权重</a></li>\n<li>聚合结果集 </li>\n</ul>\n<p><strong>具体代码参考如下</strong>：<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Page&lt;ProductDoc&gt; search(String keyword, Boolean isSelfRun, Pageable pageable) &#123;</span><br><span class=\"line\">\t\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class=\"line\">\t\tif (StringUtils.isNotEmpty(keyword)) &#123;</span><br><span class=\"line\">\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重</span><br><span class=\"line\">\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1</span><br><span class=\"line\">\t\t\tqueryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (isSelfRun!=null &amp;&amp; isSelfRun) &#123;</span><br><span class=\"line\">\t\t\tqueryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\tSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class=\"line\">\t\t\t\t.withPageable(pageable).build();</span><br><span class=\"line\">\t\tLOGGER.info(&quot;\\n search(): searchContent [&quot; + keyword + &quot;] \\n DSL  = \\n &quot; + searchQuery.getQuery().toString());</span><br><span class=\"line\">\t\treturn productDocRespository.search(searchQuery);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试全文检索\"><a href=\"#测试全文检索\" class=\"headerlink\" title=\"测试全文检索\"></a>测试全文检索</h2><ol>\n<li><a href=\"http://localhost:8080/products?keyword=huawei\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=huawei</a> </li>\n<li><a href=\"http://localhost:8080/products?keyword=iphone\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=iphone</a> 通过对iphone的搜索可以验证boost值得效果</li>\n<li><a href=\"http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true</a>  验证精准值匹配效果</li>\n</ol>\n<h2 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h2><p><strong>需求： </strong>统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。</p>\n<p>聚合的详细理解参考 <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html\" target=\"_blank\" rel=\"noopener\">聚合 | Elasticsearch: 权威指南  | Elastic</a>， 这里我们只通过简单的桶（Bucket）的方式来实现需求。</p>\n<p>通过google搜索<code>spring data elasticsearch aggregation example</code> 不难找到类似如下链接中的代码：<a href=\"https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；</a> 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？</p>\n<p>通过查看spring-data-elasticsearch的源代码我们可以发现<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：<code>com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper</code>。</p>\n<h2 id=\"聚合查询测试\"><a href=\"#聚合查询测试\" class=\"headerlink\" title=\"聚合查询测试\"></a>聚合查询测试</h2><p><a href=\"http://localhost:8080/products/aggregation?keyword=China\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products/aggregation?keyword=China</a> 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。<br><strong>返回JSON 数据如下：</strong><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;content&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 2,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Huawei&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 5,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Iphone X&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Iphone X is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 1,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Mac Pro&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Mac Pro is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 7,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Nokia N90&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Nokia N 90 is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;GENERAL&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 3,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Huawei Max3&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Huawei is designed / made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;bucketsByType&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;key&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class=\"line\">      &quot;docCount&quot;: 4</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;key&quot;: &quot;GENERAL&quot;,</span><br><span class=\"line\">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class=\"line\">      &quot;docCount&quot;: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;totalElements&quot;: 5,</span><br><span class=\"line\">  &quot;last&quot;: true,</span><br><span class=\"line\">  &quot;totalPages&quot;: 1,</span><br><span class=\"line\">  &quot;number&quot;: 0,</span><br><span class=\"line\">  &quot;size&quot;: 10,</span><br><span class=\"line\">  &quot;sort&quot;: null,</span><br><span class=\"line\">  &quot;numberOfElements&quot;: 5,</span><br><span class=\"line\">  &quot;first&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"高亮显示\"><a href=\"#高亮显示\" class=\"headerlink\" title=\"高亮显示\"></a>高亮显示</h2><p>参考：<a href=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight\" target=\"_blank\" rel=\"noopener\">http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight</a></p>\n","site":{"data":{}},"_categories":[],"_tags":[],"excerpt":"","more":"<hr>\n<p>title:  Spring Data Elasticsearch 快速上手全文检索<br>description: 通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能<br>…<br>通过Spring Data Elasticsearch 实现全文检索; 通过指定 boost 来控制查询语句的相对的权重; 通过自定义ResultMapper 来实现查询聚合功能。</p>\n<h2 id=\"Elasticsearch-基础知识\"><a href=\"#Elasticsearch-基础知识\" class=\"headerlink\" title=\"Elasticsearch 基础知识\"></a>Elasticsearch 基础知识</h2><p>建立对Elasticsearch的初步的认识可以参考：<a href=\"https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/stC_xMP1n3aQ-0ZNAc3eQA</a></p>\n<p>上面的有些解释只是为了方便初学者快速掌握知识。ES的索引的Type在后期ES中会逐渐消失。<br><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html</a></p>\n<p>官方的中文文档参考： <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>Spring Boot： 1.4.7</li>\n<li>Spring Data Elasticsearch  2.0.11</li>\n<li>Elasticsearch server 2.4</li>\n</ul>\n<blockquote>\n<p>追加补充： 在随后的版本spring-data-elasticsearch 2.1.10.RELEASE 中增加了<code>AggregatedPage</code> ， 同时<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 也增加了聚合的支持。 笔者这里针对聚合的有部分工作，在2.1.10.RELEASE种已经不在需要，或者可以更优化一些。</p>\n</blockquote>\n<h2 id=\"安装与运行\"><a href=\"#安装与运行\" class=\"headerlink\" title=\"安装与运行\"></a>安装与运行</h2><h3 id=\"Elasticsearch-安装及运行\"><a href=\"#Elasticsearch-安装及运行\" class=\"headerlink\" title=\"Elasticsearch 安装及运行\"></a>Elasticsearch 安装及运行</h3><p>elasticsearch 是运行于java之上，可以直接下载运行。从<a href=\"https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-6</a> 下载2.4.6 版本。 </p>\n<ul>\n<li>ZIP sha   —– window安装包  </li>\n<li>TAR sha   —– Mac 或者linux安装包</li>\n<li>DEB sha   </li>\n<li>RPM sha   —– linux rpm 包可以安装成系统服务</li>\n</ul>\n<p>ZIP包解压的直接进入 bin 目录运行 <code>./elasticserach</code>, 运行 <code>./elasticsearch -d</code> 后台运行<br> RPM 安装后通过 <code>service elasticsearch start</code> 来启动</p>\n<h3 id=\"Kibana-安装及运行\"><a href=\"#Kibana-安装及运行\" class=\"headerlink\" title=\"Kibana 安装及运行\"></a>Kibana 安装及运行</h3><p> 和es的类似，elasticsearch2.4 对应kibana的版本是4.6； 下载地址： <a href=\"https://www.elastic.co/downloads/past-releases/kibana-4-6-6\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/past-releases/kibana-4-6-6</a> </p>\n<blockquote>\n<p>kibana 解压方式无后台运行命令，建议通过rpm方式安装<code>sudo rpm -ivh kibana-4.6.6-x86_64.rpm</code> , 以服务方式启动和停止。</p>\n</blockquote>\n<h3 id=\"安装Kibana的Sense插件\"><a href=\"#安装Kibana的Sense插件\" class=\"headerlink\" title=\"安装Kibana的Sense插件\"></a>安装Kibana的Sense插件</h3><p>此版本下没有dev tools，需要单独安装sense插件, 进入Kibana 的安装目录 <code>/opt/kibana</code> 运行<code>./bin/kibana plugin --install elastic/sense</code>。 </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/choelea/spring-data-elasticsearch-quick-start\" target=\"_blank\" rel=\"noopener\">https://github.com/choelea/spring-data-elasticsearch-quick-start</a>  2.0.11.RELEASE<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/choelea/spring-data-elasticsearch-quick-start</span><br><span class=\"line\">cd spring-data-elasticsearch-quick-start/</span><br><span class=\"line\">git checkout tags/2.0.11.RELEASE</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>最新的master的代码升级Spring Boot到1.5.13.RELEASE， 对应的spring-data-elasticsearch  自动升级至2.1.12.RELEASE， 在此版本基础上，DefaultResultMapper  已经支持了聚合。无需为聚合儿自定义ResultMapper。 </p>\n</blockquote>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.data.elasticsearch.repositories.enabled = true</span><br><span class=\"line\">spring.data.elasticsearch.cluster-nodes : 192.168.1.99:9300</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义Document\"><a href=\"#定义Document\" class=\"headerlink\" title=\"定义Document\"></a>定义Document</h2><p>参考： <code>com.joe.springdataelasticsearch.document.ProductDoc</code> . 定义文档需要注意必须有个id字段或者通过注解指定一个id字段，只有在有ID得情况下，文档才可以被更新。 否则会抛出异常：<code>No id property found for class com.joe.springdataelasticsearch.document.ProductDoc</code></p>\n<p>当前版本下需要指定Field的type，否则也会报错。</p>\n<blockquote>\n<p>修改FieldType 会导致无法通过程序启动异常，需要手动删除后创建索引。 比如: 原有的type字段的FieldType是Long，改成String后会出现类似如下错误：<code>mapper [type] of different type, current_type [long], merged_type [string]</code></p>\n</blockquote>\n<h2 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>系统启动后，创建索引和创建/更新mapping</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearchTemplate.deleteIndex(ProductDoc.class);</span><br><span class=\"line\">elasticsearchTemplate.createIndex(ProductDoc.class);</span><br><span class=\"line\">elasticsearchTemplate.putMapping(ProductDoc.class);</span><br></pre></td></tr></table></figure>\n<p>启动后可以通过<code>http://192.168.1.99:9200/product-index/_mapping/main/</code> 来查看mapping。</p>\n<blockquote>\n<p>Notes：文档索引的mapping的创建，不会因为注解@Document， 而是因为ElasticsearchRepository的存在。删除ProductDocRespository，可以发现启动服务后，文档不会自动创建。 参考问题：<a href=\"https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/29496081/spring-data-elasticsearchs-field-annotation-not-working</a></p>\n</blockquote>\n<h2 id=\"索引文档\"><a href=\"#索引文档\" class=\"headerlink\" title=\"索引文档\"></a>索引文档</h2><p>elasticsearch 是通过PUT接口来索引文档。<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-doc.html</a>。 在使用Spring Data Elasticsearch的的时候，我们可以很方便的通过防JPA Repository的方式来操作;  <code>ProductDocRespository.save(ProductDoc doc)</code>  来索引和更新文档。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ProductDocRespository extends ElasticsearchRepository&lt;ProductDoc, Long&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参考<code>com.joe.springdataelasticsearch.listner.ContextRefreshedListener</code> 来查看索引测试文档数据。</p>\n<h2 id=\"测试数据\"><a href=\"#测试数据\" class=\"headerlink\" title=\"测试数据\"></a>测试数据</h2><p><img src=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-productdocs.png\" alt=\"spring-data-elasticsearch-productdocs\"></p>\n<h2 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h2><p>查询主要解决：</p>\n<ul>\n<li>多个字段搜索查询使用布尔匹配的方式， 参考官方说明 <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_how_match_uses_bool.html\" target=\"_blank\" rel=\"noopener\">布尔匹配</a></li>\n<li>不同字段的权重设置，采用设置Boost方式， 参考： <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_boosting_query_clauses.html\" target=\"_blank\" rel=\"noopener\">查询语句提升权重</a></li>\n<li>聚合结果集 </li>\n</ul>\n<p><strong>具体代码参考如下</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Page&lt;ProductDoc&gt; search(String keyword, Boolean isSelfRun, Pageable pageable) &#123;</span><br><span class=\"line\">\t\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class=\"line\">\t\tif (StringUtils.isNotEmpty(keyword)) &#123;</span><br><span class=\"line\">\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._name, keyword).boost(3)); // 给name字段更高的权重</span><br><span class=\"line\">\t\t\tqueryBuilder.should(QueryBuilders.matchQuery(ProductDoc._description, keyword));   // description 默认权重 1</span><br><span class=\"line\">\t\t\tqueryBuilder.minimumNumberShouldMatch(1); // 至少一个should条件满足</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (isSelfRun!=null &amp;&amp; isSelfRun) &#123;</span><br><span class=\"line\">\t\t\tqueryBuilder.must(QueryBuilders.matchQuery(ProductDoc._isSelfRun, Boolean.TRUE)); // 精准值条件查询</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\tSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(queryBuilder)</span><br><span class=\"line\">\t\t\t\t.withPageable(pageable).build();</span><br><span class=\"line\">\t\tLOGGER.info(&quot;\\n search(): searchContent [&quot; + keyword + &quot;] \\n DSL  = \\n &quot; + searchQuery.getQuery().toString());</span><br><span class=\"line\">\t\treturn productDocRespository.search(searchQuery);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"测试全文检索\"><a href=\"#测试全文检索\" class=\"headerlink\" title=\"测试全文检索\"></a>测试全文检索</h2><ol>\n<li><a href=\"http://localhost:8080/products?keyword=huawei\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=huawei</a> </li>\n<li><a href=\"http://localhost:8080/products?keyword=iphone\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=iphone</a> 通过对iphone的搜索可以验证boost值得效果</li>\n<li><a href=\"http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products?keyword=iphone&amp;isSelfRun=true</a>  验证精准值匹配效果</li>\n</ol>\n<h2 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h2><p><strong>需求： </strong>统计搜索出来的智能手机和普通手机的数量，从而提供进一步的过滤。</p>\n<p>聚合的详细理解参考 <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/aggregations.html\" target=\"_blank\" rel=\"noopener\">聚合 | Elasticsearch: 权威指南  | Elastic</a>， 这里我们只通过简单的桶（Bucket）的方式来实现需求。</p>\n<p>通过google搜索<code>spring data elasticsearch aggregation example</code> 不难找到类似如下链接中的代码：<a href=\"https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-projects/spring-data-elasticsearch/blob/master/src/test/java/org/springframework/data/elasticsearch/core/aggregation/ElasticsearchTemplateAggregationTests.java；</a> 但是我们需要同时返回桶的信息和检索出来的分页信息。如何利用Spring Data Elasticsearch来完成？</p>\n<p>通过查看spring-data-elasticsearch的源代码我们可以发现<code>org.springframework.data.elasticsearch.core.DefaultResultMapper</code> 会被默认用来返回分页检索出来的数据。需要同时返回分页数据及桶的数据，我们就需要定制一个ResultMapper； 参考：<code>com.joe.springdataelasticsearch.core.ProductDocAggregationResultMapper</code>。</p>\n<h2 id=\"聚合查询测试\"><a href=\"#聚合查询测试\" class=\"headerlink\" title=\"聚合查询测试\"></a>聚合查询测试</h2><p><a href=\"http://localhost:8080/products/aggregation?keyword=China\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/products/aggregation?keyword=China</a> 可以查出总共有5条结果，聚合返回告诉你其中有4个智能手机，1个普通手机。<br><strong>返回JSON 数据如下：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;content&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 2,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Huawei&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 5,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Iphone X&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Iphone X is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 1,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Mac Pro&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Mac Pro is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 7,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Nokia N90&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Nokia N 90 is made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;GENERAL&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;id&quot;: 3,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Huawei Max3&quot;,</span><br><span class=\"line\">      &quot;description&quot;: &quot;Huawei is designed / made by China&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;isSelfRun&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;bucketsByType&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;key&quot;: &quot;SMARTPHONE&quot;,</span><br><span class=\"line\">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class=\"line\">      &quot;docCount&quot;: 4</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;key&quot;: &quot;GENERAL&quot;,</span><br><span class=\"line\">      &quot;lable&quot;: &quot;type&quot;,</span><br><span class=\"line\">      &quot;docCount&quot;: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;totalElements&quot;: 5,</span><br><span class=\"line\">  &quot;last&quot;: true,</span><br><span class=\"line\">  &quot;totalPages&quot;: 1,</span><br><span class=\"line\">  &quot;number&quot;: 0,</span><br><span class=\"line\">  &quot;size&quot;: 10,</span><br><span class=\"line\">  &quot;sort&quot;: null,</span><br><span class=\"line\">  &quot;numberOfElements&quot;: 5,</span><br><span class=\"line\">  &quot;first&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"高亮显示\"><a href=\"#高亮显示\" class=\"headerlink\" title=\"高亮显示\"></a>高亮显示</h2><p>参考：<a href=\"http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight\" target=\"_blank\" rel=\"noopener\">http://tech.jiu-shu.com/Elastic-Technologies/spring-data-elasticsearch-highlight</a></p>\n"},{"_content":"---\ntitle: Centos 常用命令\nsort: 1\ndescription: Centos 常用命令\n...\n\n> 以下命令仅在centos7上验证过\n\n### 软件安装\n#### yum 安装\n示例如下：\n```\nsudo yum install elasticsearch\n```\n\n#### rpm  包安装\n```\nsudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动\n```\n\n#### 查看安装程序路径\n```\nsudo rpm -ql kibana  // 查看到安装在了/opt/kibana\n```\n\n\n### 开放端口\n\n```\n$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent\n$ sudo firewall-cmd --reload\n```\n\n### netstat 使用\n#### 查看某个服务是否在运行\n\n```\nsudo netstat -aple | grep nginx\n```\n只查看tcp或者udp的connections需要添加-t参数: `sudo netstat -nplt` \n> 更多更实用的netstat命令参考：[Linux netstat 命令示例](http://www.binarytides.com/linux-netstat-command-examples/)\n\n### 查看centos 版本\ncat /etc/centos-release\n**设置环境变量**\n\n```\nexport KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1\necho $KAFKA_HOME\n```\n### 磁盘空间\n\n```\ndf -h\n```\n```\nfree\n```\n### 查看目录所占空间大小\n\n```\ndu -smh *\n```\n### 统计文件夹下面的文件数量\n```\nls -1 | wc -l\n```\n### grep 搜索文件内容\n**指定的文件类型中查找**\n当前子目录中查找： `grep -r abcd *.properties` 当前子目录递归查找含有`abcd` 的*.properties 文件\n指定目录及子目录中查找：`grep -r 3306 /home/okchem/storage92g/srm/ ` \n\n### 拷贝整个文件夹\n```\ncp -avr /home/vivek/letters /usb/backup\n```\n### 用户和组\n> /etc/group file that lists all users groups  可以使用cut命令列出来`cut -d: -f1 /etc/group`\n\n**查看当前用户的group:\t** `$ groups`\n**查看用户的group:\t** `$ groups root` `id -Gn root`\n**添加用户到组:\t** `$ sudo usermod -a -G osboxes nginx` 添加用户nginx到组osboxes  `usermod -a -G <groupname> username` 添加完成请用`groups <username> ` 来验证\n**获取组的所有用户:\t** `getent group kibana`\n\n其他有用资源： [CentOS7之新建用户与SSH登陆](https://segmentfault.com/a/1190000004141370)\n### 文件权限\n#### 修改文件[夹]owner\nchown 代表change owner；`chown --help` 提供了更详细的信息\n```\nsudo chown -R okchem:root /ebs\n```\n#### 修改文件[夹]访问权限\nchmod 代表change mode; \n例如：`chmod 644 important.txt` owner可读可写,group可读，others可读\n> First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute\n\n文件权限更详细的解释可以参考：[Linux File Permissions](https://www.pluralsight.com/blog/it-ops/linux-file-permissions)\n### PS 命令\n#### 查看java进程 `ps -ef|grep java`\n#### 产看进程的详细信息 `ps -auxwe | grep subscribe`\n\n### 命令行快捷键\n**CTRL-a** 光标移至行首\n**CTRL-e** 光标移至行尾\n**CTRL-u** 删除整行\n**CTRL-h**\t删除光标前字符\n\n### gzip / gunzip\n 压缩单个文件 `gzip fileName` 压缩后的名字=原文件名字加上后缀.gz\n 解压缩单个文件`gunzip filename` 或者 `gzip -d filename`\ngzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： `tar -z`命令。\n> gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件\n### tar 命令\ngzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。\n压缩整个文件夹`tar -zcvf outputFileName folderToCompress` \n[Examples](https://www.tecmint.com/18-tar-command-examples-in-linux/)\n> bzip2 \n\n### sftp 命令\n#### sftp登录\n```\nsftp  name@123.21.331.1\n```\n#### sftp 下载文件夹\n```\nget -r  folder  /home/joe/\n```\n#### sftp 上传文件\n```\nput  /name1.html  /name2/\n```\n\n### crontab 命令\n创建执行任务， 添加cron job\n参考cronjob `crontab -l`\n编辑cronjob `crontab -e`\n\n```\n0 1 * * * /data/scripts/mysql-job.sh A\n20 1 * * 0 /data/scripts/mysql-job.sh I\n```\n两个cron job 分别：\n\n 1. 每天1点执行\n 2. 每周日1点20 执行\n\n参考：crontab 时间可以参考： https://www.cnblogs.com/intval/p/5763929.html","source":"_posts/Dev-Ops/Centos-Common-Commands.md","raw":"---\ntitle: Centos 常用命令\nsort: 1\ndescription: Centos 常用命令\n...\n\n> 以下命令仅在centos7上验证过\n\n### 软件安装\n#### yum 安装\n示例如下：\n```\nsudo yum install elasticsearch\n```\n\n#### rpm  包安装\n```\nsudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动\n```\n\n#### 查看安装程序路径\n```\nsudo rpm -ql kibana  // 查看到安装在了/opt/kibana\n```\n\n\n### 开放端口\n\n```\n$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent\n$ sudo firewall-cmd --reload\n```\n\n### netstat 使用\n#### 查看某个服务是否在运行\n\n```\nsudo netstat -aple | grep nginx\n```\n只查看tcp或者udp的connections需要添加-t参数: `sudo netstat -nplt` \n> 更多更实用的netstat命令参考：[Linux netstat 命令示例](http://www.binarytides.com/linux-netstat-command-examples/)\n\n### 查看centos 版本\ncat /etc/centos-release\n**设置环境变量**\n\n```\nexport KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1\necho $KAFKA_HOME\n```\n### 磁盘空间\n\n```\ndf -h\n```\n```\nfree\n```\n### 查看目录所占空间大小\n\n```\ndu -smh *\n```\n### 统计文件夹下面的文件数量\n```\nls -1 | wc -l\n```\n### grep 搜索文件内容\n**指定的文件类型中查找**\n当前子目录中查找： `grep -r abcd *.properties` 当前子目录递归查找含有`abcd` 的*.properties 文件\n指定目录及子目录中查找：`grep -r 3306 /home/okchem/storage92g/srm/ ` \n\n### 拷贝整个文件夹\n```\ncp -avr /home/vivek/letters /usb/backup\n```\n### 用户和组\n> /etc/group file that lists all users groups  可以使用cut命令列出来`cut -d: -f1 /etc/group`\n\n**查看当前用户的group:\t** `$ groups`\n**查看用户的group:\t** `$ groups root` `id -Gn root`\n**添加用户到组:\t** `$ sudo usermod -a -G osboxes nginx` 添加用户nginx到组osboxes  `usermod -a -G <groupname> username` 添加完成请用`groups <username> ` 来验证\n**获取组的所有用户:\t** `getent group kibana`\n\n其他有用资源： [CentOS7之新建用户与SSH登陆](https://segmentfault.com/a/1190000004141370)\n### 文件权限\n#### 修改文件[夹]owner\nchown 代表change owner；`chown --help` 提供了更详细的信息\n```\nsudo chown -R okchem:root /ebs\n```\n#### 修改文件[夹]访问权限\nchmod 代表change mode; \n例如：`chmod 644 important.txt` owner可读可写,group可读，others可读\n> First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute\n\n文件权限更详细的解释可以参考：[Linux File Permissions](https://www.pluralsight.com/blog/it-ops/linux-file-permissions)\n### PS 命令\n#### 查看java进程 `ps -ef|grep java`\n#### 产看进程的详细信息 `ps -auxwe | grep subscribe`\n\n### 命令行快捷键\n**CTRL-a** 光标移至行首\n**CTRL-e** 光标移至行尾\n**CTRL-u** 删除整行\n**CTRL-h**\t删除光标前字符\n\n### gzip / gunzip\n 压缩单个文件 `gzip fileName` 压缩后的名字=原文件名字加上后缀.gz\n 解压缩单个文件`gunzip filename` 或者 `gzip -d filename`\ngzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： `tar -z`命令。\n> gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件\n### tar 命令\ngzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。\n压缩整个文件夹`tar -zcvf outputFileName folderToCompress` \n[Examples](https://www.tecmint.com/18-tar-command-examples-in-linux/)\n> bzip2 \n\n### sftp 命令\n#### sftp登录\n```\nsftp  name@123.21.331.1\n```\n#### sftp 下载文件夹\n```\nget -r  folder  /home/joe/\n```\n#### sftp 上传文件\n```\nput  /name1.html  /name2/\n```\n\n### crontab 命令\n创建执行任务， 添加cron job\n参考cronjob `crontab -l`\n编辑cronjob `crontab -e`\n\n```\n0 1 * * * /data/scripts/mysql-job.sh A\n20 1 * * 0 /data/scripts/mysql-job.sh I\n```\n两个cron job 分别：\n\n 1. 每天1点执行\n 2. 每周日1点20 执行\n\n参考：crontab 时间可以参考： https://www.cnblogs.com/intval/p/5763929.html","slug":"Dev-Ops/Centos-Common-Commands","published":1,"date":"2018-12-05T03:27:52.650Z","updated":"2018-11-05T06:06:01.817Z","_id":"cjpam3xds000f7sq3b7j4vzas","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: Centos 常用命令<br>sort: 1<br>description: Centos 常用命令<br>…</p>\n<blockquote>\n<p>以下命令仅在centos7上验证过</p>\n</blockquote>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><h4 id=\"yum-安装\"><a href=\"#yum-安装\" class=\"headerlink\" title=\"yum 安装\"></a>yum 安装</h4><p>示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install elasticsearch</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"rpm-包安装\"><a href=\"#rpm-包安装\" class=\"headerlink\" title=\"rpm  包安装\"></a>rpm  包安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看安装程序路径\"><a href=\"#查看安装程序路径\" class=\"headerlink\" title=\"查看安装程序路径\"></a>查看安装程序路径</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ql kibana  // 查看到安装在了/opt/kibana</span><br></pre></td></tr></table></figure>\n<h3 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"netstat-使用\"><a href=\"#netstat-使用\" class=\"headerlink\" title=\"netstat 使用\"></a>netstat 使用</h3><h4 id=\"查看某个服务是否在运行\"><a href=\"#查看某个服务是否在运行\" class=\"headerlink\" title=\"查看某个服务是否在运行\"></a>查看某个服务是否在运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -aple | grep nginx</span><br></pre></td></tr></table></figure>\n<p>只查看tcp或者udp的connections需要添加-t参数: <code>sudo netstat -nplt</code> </p>\n<blockquote>\n<p>更多更实用的netstat命令参考：<a href=\"http://www.binarytides.com/linux-netstat-command-examples/\" target=\"_blank\" rel=\"noopener\">Linux netstat 命令示例</a></p>\n</blockquote>\n<h3 id=\"查看centos-版本\"><a href=\"#查看centos-版本\" class=\"headerlink\" title=\"查看centos 版本\"></a>查看centos 版本</h3><p>cat /etc/centos-release<br><strong>设置环境变量</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1</span><br><span class=\"line\">echo $KAFKA_HOME</span><br></pre></td></tr></table></figure>\n<h3 id=\"磁盘空间\"><a href=\"#磁盘空间\" class=\"headerlink\" title=\"磁盘空间\"></a>磁盘空间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看目录所占空间大小\"><a href=\"#查看目录所占空间大小\" class=\"headerlink\" title=\"查看目录所占空间大小\"></a>查看目录所占空间大小</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -smh *</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计文件夹下面的文件数量\"><a href=\"#统计文件夹下面的文件数量\" class=\"headerlink\" title=\"统计文件夹下面的文件数量\"></a>统计文件夹下面的文件数量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -1 | wc -l</span><br></pre></td></tr></table></figure>\n<h3 id=\"grep-搜索文件内容\"><a href=\"#grep-搜索文件内容\" class=\"headerlink\" title=\"grep 搜索文件内容\"></a>grep 搜索文件内容</h3><p><strong>指定的文件类型中查找</strong><br>当前子目录中查找： <code>grep -r abcd *.properties</code> 当前子目录递归查找含有<code>abcd</code> 的*.properties 文件<br>指定目录及子目录中查找：<code>grep -r 3306 /home/okchem/storage92g/srm/</code> </p>\n<h3 id=\"拷贝整个文件夹\"><a href=\"#拷贝整个文件夹\" class=\"headerlink\" title=\"拷贝整个文件夹\"></a>拷贝整个文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -avr /home/vivek/letters /usb/backup</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户和组\"><a href=\"#用户和组\" class=\"headerlink\" title=\"用户和组\"></a>用户和组</h3><blockquote>\n<p>/etc/group file that lists all users groups  可以使用cut命令列出来<code>cut -d: -f1 /etc/group</code></p>\n</blockquote>\n<p><strong>查看当前用户的group:    </strong> <code>$ groups</code><br><strong>查看用户的group:    </strong> <code>$ groups root</code> <code>id -Gn root</code><br><strong>添加用户到组:    </strong> <code>$ sudo usermod -a -G osboxes nginx</code> 添加用户nginx到组osboxes  <code>usermod -a -G &lt;groupname&gt; username</code> 添加完成请用<code>groups &lt;username&gt;</code> 来验证<br><strong>获取组的所有用户:    </strong> <code>getent group kibana</code></p>\n<p>其他有用资源： <a href=\"https://segmentfault.com/a/1190000004141370\" target=\"_blank\" rel=\"noopener\">CentOS7之新建用户与SSH登陆</a></p>\n<h3 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h3><h4 id=\"修改文件-夹-owner\"><a href=\"#修改文件-夹-owner\" class=\"headerlink\" title=\"修改文件[夹]owner\"></a>修改文件[夹]owner</h4><p>chown 代表change owner；<code>chown --help</code> 提供了更详细的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R okchem:root /ebs</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改文件-夹-访问权限\"><a href=\"#修改文件-夹-访问权限\" class=\"headerlink\" title=\"修改文件[夹]访问权限\"></a>修改文件[夹]访问权限</h4><p>chmod 代表change mode;<br>例如：<code>chmod 644 important.txt</code> owner可读可写,group可读，others可读</p>\n<blockquote>\n<p>First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute</p>\n</blockquote>\n<p>文件权限更详细的解释可以参考：<a href=\"https://www.pluralsight.com/blog/it-ops/linux-file-permissions\" target=\"_blank\" rel=\"noopener\">Linux File Permissions</a></p>\n<h3 id=\"PS-命令\"><a href=\"#PS-命令\" class=\"headerlink\" title=\"PS 命令\"></a>PS 命令</h3><h4 id=\"查看java进程-ps-ef-grep-java\"><a href=\"#查看java进程-ps-ef-grep-java\" class=\"headerlink\" title=\"查看java进程 ps -ef|grep java\"></a>查看java进程 <code>ps -ef|grep java</code></h4><h4 id=\"产看进程的详细信息-ps-auxwe-grep-subscribe\"><a href=\"#产看进程的详细信息-ps-auxwe-grep-subscribe\" class=\"headerlink\" title=\"产看进程的详细信息 ps -auxwe | grep subscribe\"></a>产看进程的详细信息 <code>ps -auxwe | grep subscribe</code></h4><h3 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h3><p><strong>CTRL-a</strong> 光标移至行首<br><strong>CTRL-e</strong> 光标移至行尾<br><strong>CTRL-u</strong> 删除整行<br><strong>CTRL-h</strong>    删除光标前字符</p>\n<h3 id=\"gzip-gunzip\"><a href=\"#gzip-gunzip\" class=\"headerlink\" title=\"gzip / gunzip\"></a>gzip / gunzip</h3><p> 压缩单个文件 <code>gzip fileName</code> 压缩后的名字=原文件名字加上后缀.gz<br> 解压缩单个文件<code>gunzip filename</code> 或者 <code>gzip -d filename</code><br>gzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： <code>tar -z</code>命令。</p>\n<blockquote>\n<p>gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件</p>\n</blockquote>\n<h3 id=\"tar-命令\"><a href=\"#tar-命令\" class=\"headerlink\" title=\"tar 命令\"></a>tar 命令</h3><p>gzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。<br>压缩整个文件夹<code>tar -zcvf outputFileName folderToCompress</code><br><a href=\"https://www.tecmint.com/18-tar-command-examples-in-linux/\" target=\"_blank\" rel=\"noopener\">Examples</a></p>\n<blockquote>\n<p>bzip2 </p>\n</blockquote>\n<h3 id=\"sftp-命令\"><a href=\"#sftp-命令\" class=\"headerlink\" title=\"sftp 命令\"></a>sftp 命令</h3><h4 id=\"sftp登录\"><a href=\"#sftp登录\" class=\"headerlink\" title=\"sftp登录\"></a>sftp登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp  name@123.21.331.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"sftp-下载文件夹\"><a href=\"#sftp-下载文件夹\" class=\"headerlink\" title=\"sftp 下载文件夹\"></a>sftp 下载文件夹</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get -r  folder  /home/joe/</span><br></pre></td></tr></table></figure>\n<h4 id=\"sftp-上传文件\"><a href=\"#sftp-上传文件\" class=\"headerlink\" title=\"sftp 上传文件\"></a>sftp 上传文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">put  /name1.html  /name2/</span><br></pre></td></tr></table></figure>\n<h3 id=\"crontab-命令\"><a href=\"#crontab-命令\" class=\"headerlink\" title=\"crontab 命令\"></a>crontab 命令</h3><p>创建执行任务， 添加cron job<br>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class=\"line\">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure>\n<p>两个cron job 分别：</p>\n<ol>\n<li>每天1点执行</li>\n<li>每周日1点20 执行</li>\n</ol>\n<p>参考：crontab 时间可以参考： <a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: Centos 常用命令<br>sort: 1<br>description: Centos 常用命令<br>…</p>\n<blockquote>\n<p>以下命令仅在centos7上验证过</p>\n</blockquote>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><h4 id=\"yum-安装\"><a href=\"#yum-安装\" class=\"headerlink\" title=\"yum 安装\"></a>yum 安装</h4><p>示例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install elasticsearch</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"rpm-包安装\"><a href=\"#rpm-包安装\" class=\"headerlink\" title=\"rpm  包安装\"></a>rpm  包安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ivh kibana-4.6.6-x86_64.rpm  // 安装后通过 sudo service kibana start 来启动</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看安装程序路径\"><a href=\"#查看安装程序路径\" class=\"headerlink\" title=\"查看安装程序路径\"></a>查看安装程序路径</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ql kibana  // 查看到安装在了/opt/kibana</span><br></pre></td></tr></table></figure>\n<h3 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\">$ sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"netstat-使用\"><a href=\"#netstat-使用\" class=\"headerlink\" title=\"netstat 使用\"></a>netstat 使用</h3><h4 id=\"查看某个服务是否在运行\"><a href=\"#查看某个服务是否在运行\" class=\"headerlink\" title=\"查看某个服务是否在运行\"></a>查看某个服务是否在运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -aple | grep nginx</span><br></pre></td></tr></table></figure>\n<p>只查看tcp或者udp的connections需要添加-t参数: <code>sudo netstat -nplt</code> </p>\n<blockquote>\n<p>更多更实用的netstat命令参考：<a href=\"http://www.binarytides.com/linux-netstat-command-examples/\" target=\"_blank\" rel=\"noopener\">Linux netstat 命令示例</a></p>\n</blockquote>\n<h3 id=\"查看centos-版本\"><a href=\"#查看centos-版本\" class=\"headerlink\" title=\"查看centos 版本\"></a>查看centos 版本</h3><p>cat /etc/centos-release<br><strong>设置环境变量</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export KAFKA_HOME=/home/osboxes/kafka_2.10-0.10.0.1</span><br><span class=\"line\">echo $KAFKA_HOME</span><br></pre></td></tr></table></figure>\n<h3 id=\"磁盘空间\"><a href=\"#磁盘空间\" class=\"headerlink\" title=\"磁盘空间\"></a>磁盘空间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看目录所占空间大小\"><a href=\"#查看目录所占空间大小\" class=\"headerlink\" title=\"查看目录所占空间大小\"></a>查看目录所占空间大小</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -smh *</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计文件夹下面的文件数量\"><a href=\"#统计文件夹下面的文件数量\" class=\"headerlink\" title=\"统计文件夹下面的文件数量\"></a>统计文件夹下面的文件数量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -1 | wc -l</span><br></pre></td></tr></table></figure>\n<h3 id=\"grep-搜索文件内容\"><a href=\"#grep-搜索文件内容\" class=\"headerlink\" title=\"grep 搜索文件内容\"></a>grep 搜索文件内容</h3><p><strong>指定的文件类型中查找</strong><br>当前子目录中查找： <code>grep -r abcd *.properties</code> 当前子目录递归查找含有<code>abcd</code> 的*.properties 文件<br>指定目录及子目录中查找：<code>grep -r 3306 /home/okchem/storage92g/srm/</code> </p>\n<h3 id=\"拷贝整个文件夹\"><a href=\"#拷贝整个文件夹\" class=\"headerlink\" title=\"拷贝整个文件夹\"></a>拷贝整个文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -avr /home/vivek/letters /usb/backup</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户和组\"><a href=\"#用户和组\" class=\"headerlink\" title=\"用户和组\"></a>用户和组</h3><blockquote>\n<p>/etc/group file that lists all users groups  可以使用cut命令列出来<code>cut -d: -f1 /etc/group</code></p>\n</blockquote>\n<p><strong>查看当前用户的group:    </strong> <code>$ groups</code><br><strong>查看用户的group:    </strong> <code>$ groups root</code> <code>id -Gn root</code><br><strong>添加用户到组:    </strong> <code>$ sudo usermod -a -G osboxes nginx</code> 添加用户nginx到组osboxes  <code>usermod -a -G &lt;groupname&gt; username</code> 添加完成请用<code>groups &lt;username&gt;</code> 来验证<br><strong>获取组的所有用户:    </strong> <code>getent group kibana</code></p>\n<p>其他有用资源： <a href=\"https://segmentfault.com/a/1190000004141370\" target=\"_blank\" rel=\"noopener\">CentOS7之新建用户与SSH登陆</a></p>\n<h3 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h3><h4 id=\"修改文件-夹-owner\"><a href=\"#修改文件-夹-owner\" class=\"headerlink\" title=\"修改文件[夹]owner\"></a>修改文件[夹]owner</h4><p>chown 代表change owner；<code>chown --help</code> 提供了更详细的信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R okchem:root /ebs</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改文件-夹-访问权限\"><a href=\"#修改文件-夹-访问权限\" class=\"headerlink\" title=\"修改文件[夹]访问权限\"></a>修改文件[夹]访问权限</h4><p>chmod 代表change mode;<br>例如：<code>chmod 644 important.txt</code> owner可读可写,group可读，others可读</p>\n<blockquote>\n<p>First position refers to the user. Second refers to the group of the user, and the third refers to all others.4 = read 2 = write 1 = execute</p>\n</blockquote>\n<p>文件权限更详细的解释可以参考：<a href=\"https://www.pluralsight.com/blog/it-ops/linux-file-permissions\" target=\"_blank\" rel=\"noopener\">Linux File Permissions</a></p>\n<h3 id=\"PS-命令\"><a href=\"#PS-命令\" class=\"headerlink\" title=\"PS 命令\"></a>PS 命令</h3><h4 id=\"查看java进程-ps-ef-grep-java\"><a href=\"#查看java进程-ps-ef-grep-java\" class=\"headerlink\" title=\"查看java进程 ps -ef|grep java\"></a>查看java进程 <code>ps -ef|grep java</code></h4><h4 id=\"产看进程的详细信息-ps-auxwe-grep-subscribe\"><a href=\"#产看进程的详细信息-ps-auxwe-grep-subscribe\" class=\"headerlink\" title=\"产看进程的详细信息 ps -auxwe | grep subscribe\"></a>产看进程的详细信息 <code>ps -auxwe | grep subscribe</code></h4><h3 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h3><p><strong>CTRL-a</strong> 光标移至行首<br><strong>CTRL-e</strong> 光标移至行尾<br><strong>CTRL-u</strong> 删除整行<br><strong>CTRL-h</strong>    删除光标前字符</p>\n<h3 id=\"gzip-gunzip\"><a href=\"#gzip-gunzip\" class=\"headerlink\" title=\"gzip / gunzip\"></a>gzip / gunzip</h3><p> 压缩单个文件 <code>gzip fileName</code> 压缩后的名字=原文件名字加上后缀.gz<br> 解压缩单个文件<code>gunzip filename</code> 或者 <code>gzip -d filename</code><br>gzip 不能用来压缩整个文件夹至一个.gz 文件。压缩整个文件夹请参考targ + gzip 命令 即： <code>tar -z</code>命令。</p>\n<blockquote>\n<p>gzip -r  dictName 命令会压缩整个文件夹dictName 里面的所有文件，每个文件被压缩成一个单独的*.gz 文件</p>\n</blockquote>\n<h3 id=\"tar-命令\"><a href=\"#tar-命令\" class=\"headerlink\" title=\"tar 命令\"></a>tar 命令</h3><p>gzip / bzip2 是用来压缩单个文件， tar是用来归档。 所以tar结合gzip/bzip2 可以方便的进行整个文件夹的压缩及归档。<br>压缩整个文件夹<code>tar -zcvf outputFileName folderToCompress</code><br><a href=\"https://www.tecmint.com/18-tar-command-examples-in-linux/\" target=\"_blank\" rel=\"noopener\">Examples</a></p>\n<blockquote>\n<p>bzip2 </p>\n</blockquote>\n<h3 id=\"sftp-命令\"><a href=\"#sftp-命令\" class=\"headerlink\" title=\"sftp 命令\"></a>sftp 命令</h3><h4 id=\"sftp登录\"><a href=\"#sftp登录\" class=\"headerlink\" title=\"sftp登录\"></a>sftp登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp  name@123.21.331.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"sftp-下载文件夹\"><a href=\"#sftp-下载文件夹\" class=\"headerlink\" title=\"sftp 下载文件夹\"></a>sftp 下载文件夹</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get -r  folder  /home/joe/</span><br></pre></td></tr></table></figure>\n<h4 id=\"sftp-上传文件\"><a href=\"#sftp-上传文件\" class=\"headerlink\" title=\"sftp 上传文件\"></a>sftp 上传文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">put  /name1.html  /name2/</span><br></pre></td></tr></table></figure>\n<h3 id=\"crontab-命令\"><a href=\"#crontab-命令\" class=\"headerlink\" title=\"crontab 命令\"></a>crontab 命令</h3><p>创建执行任务， 添加cron job<br>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class=\"line\">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure>\n<p>两个cron job 分别：</p>\n<ol>\n<li>每天1点执行</li>\n<li>每周日1点20 执行</li>\n</ol>\n<p>参考：crontab 时间可以参考： <a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a></p>\n"},{"_content":"---\ntitle: Git 常用命令\ndescription: Git 常用的命令，使用命令，让效率更高\n...\n\n## 帮助命令\n\n```\ngit help command // eg: git commit help\n```\nwindows 打开默认的浏览器显示帮助内容， mac直接显示\n\n## 配置\n\n```\ngit config --global setting value\n示例：git config --global user.name \"Your Name\"\n示例：git config --global user.email \"you@someplace.com\"\ngit config --global --list // 列出全局配置项\n```\n配置内容保存在当前**用户**目录下的.gitconfig文件中\n\n## 本地命令\n### 设置邮箱\n##### 设置全局邮箱\n方式一： 运行命令： `git config --global user.email \"joe.lea@foxmail.com\"`\n方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件\n```\n[user]\nname =xiaoming\nemail = xiaoming@qq.com\n```\n##### 设置项目的提交邮箱\n编辑文件 .git/config 即可\n> github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：https://github.com/choelea/markdown-cms/graphs/contributors\n\n### 初始化\n方式一：\n```\ncd projects/\ngit init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面\n```\n方式二：\n```\ncd projects/\nmkdir website\ncd website/\ngit init // 初始化\n```\n方式三：\n大多数的方式，我们从clone一个git 库开始的。\n```\ngit clone 'url'\n```\n\n### 查看本地分支\n```\ngit branch -vv  // 列出本地分支 * 标识当前分支\ngit branch -a // 列出所有分支\n```\n### 删除本地分支\n```\ngit branch -d <BranchName>\n``` \n\n### 查看状态 \n\n```\ngit status // Shows which files have been modified in the working directory vs Git's staging area.\n```\n\n### 添加新文件 \n```\ngit add file-name  // Adds the new or newly modified file-name to Git's staging area (index).\n```\n\n> 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  <file>` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。\n\n### Commit 修改\n```\ngit commit -m \"A really good commit message\" // Commits all files currently in Git's staging area.\n```\n> 上面的命令只有所有的文件都在staging area在有效。  `git commit -am \"A really good commit message\"` 可以省掉git add这步，不过新文件必须先add下。\n\n### 回滚 \n```\ngit add . // Add all new and newly modified files.\ngit reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在\ngit checkout -- file-name // 回滚本次修改\ngit reset --hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改\n```\n### 检查修改内容\n```\ngit diff // 查看unstage状态下的文件的修改内容，staged的无法查看\n```\n### 合并到上次提交\n```\ngit add . // 将修改的文件 stage\ngit commit --amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit\ngit commit --amend -m \"New commit message\" // 将当前的staged的修改合并到上次commit，并实用新的Message\n```\n> 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。\n### 放弃本地修改或新增的文件\n放弃modified的文件\n```\ngit checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改\ngit checkout src/* // 使用通配符来checkout src文件夹下面所有的修改\ngit reset --hard // 丢掉所有的修改modified 文件\ngit clean -fd    // 移除所有untrack的文件和文件夹 \ngit clean -fd src/* // 移除src目录下面所有的新增的文件\n``` \n> git clean -fd 中 -f means force, -d means 'remove directories'\n### 切换分支\n> 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）\n\n```\ngit checkout branchename // 切换到branchname分支\n```\n\n### 提交历史 log日志\n\n```\ngit log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。\ngit log --oneline --graph --decorate --color\ngit log -- <filepath>  // 查看某个文件的日志\n```\n#### 查看历史提交的内容差异\n```\ngit log -p -2\n```\n 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n\n### 移除文件\n方式一：完全通过git命令\n```\ngit rm debug.log  // remove and stage the change\ngit commit -m 'remove file debug.log'\n```\n方式二：\n非git 命令删除文件后，运行下面的命令\n```\ngit add -u // git 2.0 以前的版本  stage删除的change\ngit add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果\ngit commit -m 'commit message'\n```\n### 移动文件\n\n```\ngit mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态\ngit commit -m 'move index.html into web folder'\n```\n### ignore 文件\n编辑 .gitignore 文件\n\n## SSH 命令\nwindows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。\n假定在当前用户的目录下：\n\n```\ncd .ssh\nssh-keygen -t rsa -C \"your email\" // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上\nssh -T git@github.com // 验证SSH 配置成功\n```\n\n## Git Remote 相关命令\n关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）\n```\ngit remote add remote-name remote-repository-location // 示例: git remote add origin git@github.com:choelea/keycloak-demo.git\ngit push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.\ngit remote -v // list the names of all the remote repositories\n```\n关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：\n![Git-Push-Remote](http://tech.jiu-shu.com/Dev-Ops/git-push-remove.png)\n\n\n```\ngit pull origin master // 下载当前分支远程修改；每次push前都应该先pull\n```\n\n## Git Rebase\n关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n> 一定要看看 'The Golden Rule of Rebasing'这部分.\nrebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）\n直接在当前分支做rebase\n\n```\ngit fetch // 这一步必须\ngit rebase // 将未push的commits 放至remote所有commits之上\n// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase --continue 至到没有任何冲突\n```\n\n## Squash\n通过Interactive Rebasing来完成当前分支的commits的squash\n\n```\ngit rebase -i // 列出所有未push的commit，注意是倒序\n```\n根据提示编辑来达到squash的作用。\n![git-rebase](http://tech.jiu-shu.com/Dev-Ops/git-rebase.png)\n将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。\n> 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。\n\n## Changing remote URL\nrepo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。\n```\ngit remote -v // 查看当前的地址\ngit remote set-url origin git@github.com:choelea/tech-docs.git\n```\n> https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。","source":"_posts/Dev-Ops/Git-Commands.md","raw":"---\ntitle: Git 常用命令\ndescription: Git 常用的命令，使用命令，让效率更高\n...\n\n## 帮助命令\n\n```\ngit help command // eg: git commit help\n```\nwindows 打开默认的浏览器显示帮助内容， mac直接显示\n\n## 配置\n\n```\ngit config --global setting value\n示例：git config --global user.name \"Your Name\"\n示例：git config --global user.email \"you@someplace.com\"\ngit config --global --list // 列出全局配置项\n```\n配置内容保存在当前**用户**目录下的.gitconfig文件中\n\n## 本地命令\n### 设置邮箱\n##### 设置全局邮箱\n方式一： 运行命令： `git config --global user.email \"joe.lea@foxmail.com\"`\n方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件\n```\n[user]\nname =xiaoming\nemail = xiaoming@qq.com\n```\n##### 设置项目的提交邮箱\n编辑文件 .git/config 即可\n> github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：https://github.com/choelea/markdown-cms/graphs/contributors\n\n### 初始化\n方式一：\n```\ncd projects/\ngit init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面\n```\n方式二：\n```\ncd projects/\nmkdir website\ncd website/\ngit init // 初始化\n```\n方式三：\n大多数的方式，我们从clone一个git 库开始的。\n```\ngit clone 'url'\n```\n\n### 查看本地分支\n```\ngit branch -vv  // 列出本地分支 * 标识当前分支\ngit branch -a // 列出所有分支\n```\n### 删除本地分支\n```\ngit branch -d <BranchName>\n``` \n\n### 查看状态 \n\n```\ngit status // Shows which files have been modified in the working directory vs Git's staging area.\n```\n\n### 添加新文件 \n```\ngit add file-name  // Adds the new or newly modified file-name to Git's staging area (index).\n```\n\n> 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  <file>` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。\n\n### Commit 修改\n```\ngit commit -m \"A really good commit message\" // Commits all files currently in Git's staging area.\n```\n> 上面的命令只有所有的文件都在staging area在有效。  `git commit -am \"A really good commit message\"` 可以省掉git add这步，不过新文件必须先add下。\n\n### 回滚 \n```\ngit add . // Add all new and newly modified files.\ngit reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在\ngit checkout -- file-name // 回滚本次修改\ngit reset --hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改\n```\n### 检查修改内容\n```\ngit diff // 查看unstage状态下的文件的修改内容，staged的无法查看\n```\n### 合并到上次提交\n```\ngit add . // 将修改的文件 stage\ngit commit --amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit\ngit commit --amend -m \"New commit message\" // 将当前的staged的修改合并到上次commit，并实用新的Message\n```\n> 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。\n### 放弃本地修改或新增的文件\n放弃modified的文件\n```\ngit checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改\ngit checkout src/* // 使用通配符来checkout src文件夹下面所有的修改\ngit reset --hard // 丢掉所有的修改modified 文件\ngit clean -fd    // 移除所有untrack的文件和文件夹 \ngit clean -fd src/* // 移除src目录下面所有的新增的文件\n``` \n> git clean -fd 中 -f means force, -d means 'remove directories'\n### 切换分支\n> 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）\n\n```\ngit checkout branchename // 切换到branchname分支\n```\n\n### 提交历史 log日志\n\n```\ngit log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。\ngit log --oneline --graph --decorate --color\ngit log -- <filepath>  // 查看某个文件的日志\n```\n#### 查看历史提交的内容差异\n```\ngit log -p -2\n```\n 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n\n### 移除文件\n方式一：完全通过git命令\n```\ngit rm debug.log  // remove and stage the change\ngit commit -m 'remove file debug.log'\n```\n方式二：\n非git 命令删除文件后，运行下面的命令\n```\ngit add -u // git 2.0 以前的版本  stage删除的change\ngit add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果\ngit commit -m 'commit message'\n```\n### 移动文件\n\n```\ngit mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态\ngit commit -m 'move index.html into web folder'\n```\n### ignore 文件\n编辑 .gitignore 文件\n\n## SSH 命令\nwindows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。\n假定在当前用户的目录下：\n\n```\ncd .ssh\nssh-keygen -t rsa -C \"your email\" // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上\nssh -T git@github.com // 验证SSH 配置成功\n```\n\n## Git Remote 相关命令\n关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）\n```\ngit remote add remote-name remote-repository-location // 示例: git remote add origin git@github.com:choelea/keycloak-demo.git\ngit push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.\ngit remote -v // list the names of all the remote repositories\n```\n关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：\n![Git-Push-Remote](http://tech.jiu-shu.com/Dev-Ops/git-push-remove.png)\n\n\n```\ngit pull origin master // 下载当前分支远程修改；每次push前都应该先pull\n```\n\n## Git Rebase\n关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n> 一定要看看 'The Golden Rule of Rebasing'这部分.\nrebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）\n直接在当前分支做rebase\n\n```\ngit fetch // 这一步必须\ngit rebase // 将未push的commits 放至remote所有commits之上\n// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase --continue 至到没有任何冲突\n```\n\n## Squash\n通过Interactive Rebasing来完成当前分支的commits的squash\n\n```\ngit rebase -i // 列出所有未push的commit，注意是倒序\n```\n根据提示编辑来达到squash的作用。\n![git-rebase](http://tech.jiu-shu.com/Dev-Ops/git-rebase.png)\n将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。\n> 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。\n\n## Changing remote URL\nrepo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。\n```\ngit remote -v // 查看当前的地址\ngit remote set-url origin git@github.com:choelea/tech-docs.git\n```\n> https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。","slug":"Dev-Ops/Git-Commands","published":1,"date":"2018-12-05T03:27:52.651Z","updated":"2018-11-01T01:03:16.996Z","_id":"cjpam3xds000g7sq31e3glmxj","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: Git 常用命令<br>description: Git 常用的命令，使用命令，让效率更高<br>…</p>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help command // eg: git commit help</span><br></pre></td></tr></table></figure>\n<p>windows 打开默认的浏览器显示帮助内容， mac直接显示</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global setting value</span><br><span class=\"line\">示例：git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">示例：git config --global user.email &quot;you@someplace.com&quot;</span><br><span class=\"line\">git config --global --list // 列出全局配置项</span><br></pre></td></tr></table></figure>\n<p>配置内容保存在当前<strong>用户</strong>目录下的.gitconfig文件中</p>\n<h2 id=\"本地命令\"><a href=\"#本地命令\" class=\"headerlink\" title=\"本地命令\"></a>本地命令</h2><h3 id=\"设置邮箱\"><a href=\"#设置邮箱\" class=\"headerlink\" title=\"设置邮箱\"></a>设置邮箱</h3><h5 id=\"设置全局邮箱\"><a href=\"#设置全局邮箱\" class=\"headerlink\" title=\"设置全局邮箱\"></a>设置全局邮箱</h5><p>方式一： 运行命令： <code>git config --global user.email &quot;joe.lea@foxmail.com&quot;</code><br>方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">name =xiaoming</span><br><span class=\"line\">email = xiaoming@qq.com</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"设置项目的提交邮箱\"><a href=\"#设置项目的提交邮箱\" class=\"headerlink\" title=\"设置项目的提交邮箱\"></a>设置项目的提交邮箱</h5><p>编辑文件 .git/config 即可</p>\n<blockquote>\n<p>github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：<a href=\"https://github.com/choelea/markdown-cms/graphs/contributors\" target=\"_blank\" rel=\"noopener\">https://github.com/choelea/markdown-cms/graphs/contributors</a></p>\n</blockquote>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>方式一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd projects/</span><br><span class=\"line\">git init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面</span><br></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd projects/</span><br><span class=\"line\">mkdir website</span><br><span class=\"line\">cd website/</span><br><span class=\"line\">git init // 初始化</span><br></pre></td></tr></table></figure></p>\n<p>方式三：<br>大多数的方式，我们从clone一个git 库开始的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &apos;url&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv  // 列出本地分支 * 标识当前分支</span><br><span class=\"line\">git branch -a // 列出所有分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;BranchName&gt;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### 查看状态</span><br></pre></td></tr></table></figure>\n<p>git status // Shows which files have been modified in the working directory vs Git’s staging area.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 添加新文件</span><br></pre></td></tr></table></figure></p>\n<p>git add file-name  // Adds the new or newly modified file-name to Git’s staging area (index).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  &lt;file&gt;` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。</span><br><span class=\"line\"></span><br><span class=\"line\">### Commit 修改</span><br></pre></td></tr></table></figure></p>\n<p>git commit -m “A really good commit message” // Commits all files currently in Git’s staging area.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 上面的命令只有所有的文件都在staging area在有效。  `git commit -am &quot;A really good commit message&quot;` 可以省掉git add这步，不过新文件必须先add下。</span><br><span class=\"line\"></span><br><span class=\"line\">### 回滚</span><br></pre></td></tr></table></figure></p>\n<p>git add . // Add all new and newly modified files.<br>git reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在<br>git checkout – file-name // 回滚本次修改<br>git reset –hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 检查修改内容</span><br></pre></td></tr></table></figure></p>\n<p>git diff // 查看unstage状态下的文件的修改内容，staged的无法查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 合并到上次提交</span><br></pre></td></tr></table></figure></p>\n<p>git add . // 将修改的文件 stage<br>git commit –amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit<br>git commit –amend -m “New commit message” // 将当前的staged的修改合并到上次commit，并实用新的Message<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。</span><br><span class=\"line\">### 放弃本地修改或新增的文件</span><br><span class=\"line\">放弃modified的文件</span><br></pre></td></tr></table></figure></p>\n<p>git checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改<br>git checkout src/<em> // 使用通配符来checkout src文件夹下面所有的修改<br>git reset –hard // 丢掉所有的修改modified 文件<br>git clean -fd    // 移除所有untrack的文件和文件夹<br>git clean -fd src/</em> // 移除src目录下面所有的新增的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git clean -fd 中 -f means force, -d means &apos;remove directories&apos;</span><br><span class=\"line\">### 切换分支</span><br><span class=\"line\">&gt; 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）</span><br></pre></td></tr></table></figure></file></p>\n<p>git checkout branchename // 切换到branchname分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 提交历史 log日志</span><br></pre></td></tr></table></figure></p>\n<p>git log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。<br>git log –oneline –graph –decorate –color<br>git log – <filepath>  // 查看某个文件的日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 查看历史提交的内容差异</span><br></pre></td></tr></table></figure></filepath></p>\n<p>git log -p -2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br><span class=\"line\"></span><br><span class=\"line\">### 移除文件</span><br><span class=\"line\">方式一：完全通过git命令</span><br></pre></td></tr></table></figure></p>\n<p>git rm debug.log  // remove and stage the change<br>git commit -m ‘remove file debug.log’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式二：</span><br><span class=\"line\">非git 命令删除文件后，运行下面的命令</span><br></pre></td></tr></table></figure></p>\n<p>git add -u // git 2.0 以前的版本  stage删除的change<br>git add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果<br>git commit -m ‘commit message’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动文件</span><br></pre></td></tr></table></figure></p>\n<p>git mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态<br>git commit -m ‘move index.html into web folder’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### ignore 文件</span><br><span class=\"line\">编辑 .gitignore 文件</span><br><span class=\"line\"></span><br><span class=\"line\">## SSH 命令</span><br><span class=\"line\">windows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。</span><br><span class=\"line\">假定在当前用户的目录下：</span><br></pre></td></tr></table></figure></p>\n<p>cd .ssh<br>ssh-keygen -t rsa -C “your email” // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a> // 验证SSH 配置成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Git Remote 相关命令</span><br><span class=\"line\">关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）</span><br></pre></td></tr></table></figure></p>\n<p>git remote add remote-name remote-repository-location // 示例: git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:choelea/keycloak-demo.git<br>git push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.<br>git remote -v // list the names of all the remote repositories<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：</span><br><span class=\"line\">![Git-Push-Remote](http://tech.jiu-shu.com/Dev-Ops/git-push-remove.png)</span><br></pre></td></tr></table></figure></p>\n<p>git pull origin master // 下载当前分支远程修改；每次push前都应该先pull<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Git Rebase</span><br><span class=\"line\">关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)</span><br><span class=\"line\">&gt; 一定要看看 &apos;The Golden Rule of Rebasing&apos;这部分.</span><br><span class=\"line\">rebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）</span><br><span class=\"line\">直接在当前分支做rebase</span><br></pre></td></tr></table></figure></p>\n<p>git fetch // 这一步必须<br>git rebase // 将未push的commits 放至remote所有commits之上<br>// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase –continue 至到没有任何冲突<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Squash</span><br><span class=\"line\">通过Interactive Rebasing来完成当前分支的commits的squash</span><br></pre></td></tr></table></figure></p>\n<p>git rebase -i // 列出所有未push的commit，注意是倒序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据提示编辑来达到squash的作用。</span><br><span class=\"line\">![git-rebase](http://tech.jiu-shu.com/Dev-Ops/git-rebase.png)</span><br><span class=\"line\">将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。</span><br><span class=\"line\">&gt; 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。</span><br><span class=\"line\"></span><br><span class=\"line\">## Changing remote URL</span><br><span class=\"line\">repo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。</span><br></pre></td></tr></table></figure></p>\n<p>git remote -v // 查看当前的地址<br>git remote set-url origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:choelea/tech-docs.git<br><code>`</code></p>\n<blockquote>\n<p>https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: Git 常用命令<br>description: Git 常用的命令，使用命令，让效率更高<br>…</p>\n<h2 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help command // eg: git commit help</span><br></pre></td></tr></table></figure>\n<p>windows 打开默认的浏览器显示帮助内容， mac直接显示</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global setting value</span><br><span class=\"line\">示例：git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">示例：git config --global user.email &quot;you@someplace.com&quot;</span><br><span class=\"line\">git config --global --list // 列出全局配置项</span><br></pre></td></tr></table></figure>\n<p>配置内容保存在当前<strong>用户</strong>目录下的.gitconfig文件中</p>\n<h2 id=\"本地命令\"><a href=\"#本地命令\" class=\"headerlink\" title=\"本地命令\"></a>本地命令</h2><h3 id=\"设置邮箱\"><a href=\"#设置邮箱\" class=\"headerlink\" title=\"设置邮箱\"></a>设置邮箱</h3><h5 id=\"设置全局邮箱\"><a href=\"#设置全局邮箱\" class=\"headerlink\" title=\"设置全局邮箱\"></a>设置全局邮箱</h5><p>方式一： 运行命令： <code>git config --global user.email &quot;joe.lea@foxmail.com&quot;</code><br>方式二:   编辑文件 .gitconfig, 一般在用户目录下，上面的命令运行后也同样会修改这个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">name =xiaoming</span><br><span class=\"line\">email = xiaoming@qq.com</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"设置项目的提交邮箱\"><a href=\"#设置项目的提交邮箱\" class=\"headerlink\" title=\"设置项目的提交邮箱\"></a>设置项目的提交邮箱</h5><p>编辑文件 .git/config 即可</p>\n<blockquote>\n<p>github 项目只有设置了提交者的邮箱，才会在contibutors中you展示。 比如：<a href=\"https://github.com/choelea/markdown-cms/graphs/contributors\" target=\"_blank\" rel=\"noopener\">https://github.com/choelea/markdown-cms/graphs/contributors</a></p>\n</blockquote>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>方式一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd projects/</span><br><span class=\"line\">git init git-demo  // projects下面创建文件夹 git-demo, 并初始化； 初始化其实就是在文件夹下面创建了相关内容存放在.git 隐藏文件夹下面</span><br></pre></td></tr></table></figure></p>\n<p>方式二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd projects/</span><br><span class=\"line\">mkdir website</span><br><span class=\"line\">cd website/</span><br><span class=\"line\">git init // 初始化</span><br></pre></td></tr></table></figure></p>\n<p>方式三：<br>大多数的方式，我们从clone一个git 库开始的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &apos;url&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv  // 列出本地分支 * 标识当前分支</span><br><span class=\"line\">git branch -a // 列出所有分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;BranchName&gt;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### 查看状态</span><br></pre></td></tr></table></figure>\n<p>git status // Shows which files have been modified in the working directory vs Git’s staging area.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 添加新文件</span><br></pre></td></tr></table></figure></p>\n<p>git add file-name  // Adds the new or newly modified file-name to Git’s staging area (index).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 当很多文件修改，而且这些文件不属于同一个功能修改，想分开多个commit来提交的时候，可选择通过`git add  &lt;file&gt;` 先将指定的文件Stage，然后使用`git commit -m ` 来只提交stage的文件。</span><br><span class=\"line\"></span><br><span class=\"line\">### Commit 修改</span><br></pre></td></tr></table></figure></p>\n<p>git commit -m “A really good commit message” // Commits all files currently in Git’s staging area.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 上面的命令只有所有的文件都在staging area在有效。  `git commit -am &quot;A really good commit message&quot;` 可以省掉git add这步，不过新文件必须先add下。</span><br><span class=\"line\"></span><br><span class=\"line\">### 回滚</span><br></pre></td></tr></table></figure></p>\n<p>git add . // Add all new and newly modified files.<br>git reset HEAD file-name // Unstage the specified file from stage area. 修改的内容还在<br>git checkout – file-name // 回滚本次修改<br>git reset –hard HEAD^  // 回滚到远程仓库的版本，放弃本地所有包括commit的修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 检查修改内容</span><br></pre></td></tr></table></figure></p>\n<p>git diff // 查看unstage状态下的文件的修改内容，staged的无法查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 合并到上次提交</span><br></pre></td></tr></table></figure></p>\n<p>git add . // 将修改的文件 stage<br>git commit –amend // 将当前的staged的修改合并到上次commit，并打开编辑器修改commit<br>git commit –amend -m “New commit message” // 将当前的staged的修改合并到上次commit，并实用新的Message<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 使用Interactive Rebasing/squash也可以达到合并的效果，区别就是一个是事先（commit 前）就合并，一个是事后（commit 后）合并。</span><br><span class=\"line\">### 放弃本地修改或新增的文件</span><br><span class=\"line\">放弃modified的文件</span><br></pre></td></tr></table></figure></p>\n<p>git checkout <file> // 重新checkout文件file，相当于丢掉了本地的修改<br>git checkout src/<em> // 使用通配符来checkout src文件夹下面所有的修改<br>git reset –hard // 丢掉所有的修改modified 文件<br>git clean -fd    // 移除所有untrack的文件和文件夹<br>git clean -fd src/</em> // 移除src目录下面所有的新增的文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git clean -fd 中 -f means force, -d means &apos;remove directories&apos;</span><br><span class=\"line\">### 切换分支</span><br><span class=\"line\">&gt; 切换分支前必须保证工作空间是干净的。（没有未提交的修改和新增）</span><br></pre></td></tr></table></figure></file></p>\n<p>git checkout branchename // 切换到branchname分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 提交历史 log日志</span><br></pre></td></tr></table></figure></p>\n<p>git log  // 默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。<br>git log –oneline –graph –decorate –color<br>git log – <filepath>  // 查看某个文件的日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 查看历史提交的内容差异</span><br></pre></td></tr></table></figure></filepath></p>\n<p>git log -p -2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：</span><br><span class=\"line\"></span><br><span class=\"line\">### 移除文件</span><br><span class=\"line\">方式一：完全通过git命令</span><br></pre></td></tr></table></figure></p>\n<p>git rm debug.log  // remove and stage the change<br>git commit -m ‘remove file debug.log’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式二：</span><br><span class=\"line\">非git 命令删除文件后，运行下面的命令</span><br></pre></td></tr></table></figure></p>\n<p>git add -u // git 2.0 以前的版本  stage删除的change<br>git add file-name // git 2.0 后也可以通过这个命令达到上面的命令的效果<br>git commit -m ‘commit message’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动文件</span><br></pre></td></tr></table></figure></p>\n<p>git mv index.html web/  // 移动index.html 到web文件夹内。 命令完成后直接进入staging 状态<br>git commit -m ‘move index.html into web folder’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### ignore 文件</span><br><span class=\"line\">编辑 .gitignore 文件</span><br><span class=\"line\"></span><br><span class=\"line\">## SSH 命令</span><br><span class=\"line\">windows cmd并没有自带ssh命令，我们可以通过git bash命令窗来运行这些命令。</span><br><span class=\"line\">假定在当前用户的目录下：</span><br></pre></td></tr></table></figure></p>\n<p>cd .ssh<br>ssh-keygen -t rsa -C “your email” // 生成SSH Key， 将id_rsa.pub公钥配置到github/bitbucket 等服务器上<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a> // 验证SSH 配置成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Git Remote 相关命令</span><br><span class=\"line\">关联一个远程的Repo。 （针对前两种初始化方式，一般情况用不上）</span><br></pre></td></tr></table></figure></p>\n<p>git remote add remote-name remote-repository-location // 示例: git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:choelea/keycloak-demo.git<br>git push -u remote-name branch-name // 示例: git push -u origin master;  The -u parameter is needed the first time you push a branch to the remote.<br>git remote -v // list the names of all the remote repositories<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关联远程repo之前需要先在git服务器上创建对应的repo，如果采用的是github，在创建repository后，会有如下的提示：</span><br><span class=\"line\">![Git-Push-Remote](http://tech.jiu-shu.com/Dev-Ops/git-push-remove.png)</span><br></pre></td></tr></table></figure></p>\n<p>git pull origin master // 下载当前分支远程修改；每次push前都应该先pull<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Git Rebase</span><br><span class=\"line\">关于rebase和merge的区别，建议参考：[Merging vs Rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)</span><br><span class=\"line\">&gt; 一定要看看 &apos;The Golden Rule of Rebasing&apos;这部分.</span><br><span class=\"line\">rebase 和 merge都是应该发生在分支之间的事情，当然在同一个分支上有时也需要。（可能不是最佳实践，git的开发流程一般建议创建单独的feature分支来完成不同的story，避免出现多人在同一个分支上直接commit）</span><br><span class=\"line\">直接在当前分支做rebase</span><br></pre></td></tr></table></figure></p>\n<p>git fetch // 这一步必须<br>git rebase // 将未push的commits 放至remote所有commits之上<br>// 修复冲突 如果有冲突必须进行修复，完成后，注意提示。一般需要git add 命令来stage下 ，接着git rebase –continue 至到没有任何冲突<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Squash</span><br><span class=\"line\">通过Interactive Rebasing来完成当前分支的commits的squash</span><br></pre></td></tr></table></figure></p>\n<p>git rebase -i // 列出所有未push的commit，注意是倒序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据提示编辑来达到squash的作用。</span><br><span class=\"line\">![git-rebase](http://tech.jiu-shu.com/Dev-Ops/git-rebase.png)</span><br><span class=\"line\">将第二个commit（435d22b）修改为:`pick 435d22b ...` 即将这个commit压缩至上面的commit，并放弃当前的commit message。</span><br><span class=\"line\">&gt; 有些公司会很强调squash。 git估计本地多次提交防止丢失，所以git的commit有可能会很多；而svn的commit就意味着修改可以被其他用户拉取到， 所以svn的每一次commit都要保证系统可以运行，svn的commit会偏少。svn的代码更新时间取决于文件多少和大小；git的代码拉取时间取决于commit的多少。所以。。。是每次提交尽量合理依然很重要，squash/Ineractive Rebasing 很实用。</span><br><span class=\"line\"></span><br><span class=\"line\">## Changing remote URL</span><br><span class=\"line\">repo换了名字，或者之前是https clone下来的，现在想换成ssh；这些情况都面临着修改远程的URL。</span><br></pre></td></tr></table></figure></p>\n<p>git remote -v // 查看当前的地址<br>git remote set-url origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:choelea/tech-docs.git<br><code>`</code></p>\n<blockquote>\n<p>https的URL一般来说push代码是需要用户明和密码；而ssh的不需要。</p>\n</blockquote>\n"},{"title":"利用Nexus搭建Maven私服","description":"利用Nexus搭建Maven私服","_content":"阐述如果利用Nexus来快速搭建maven仓库的私有服务器\n私服搭建\nDocker Hub链接地址： https://hub.docker.com/r/sonatype/nexus/\n\ndocker pull sonatype/nexus\nmkdir /data/nexus-data && chown -R 200 /data/nexus-data\ndocker run -d -p 8081:8081 --name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​\n\n本地Maven配置\n​修改Maven的全局setting.xml文件如下：\n\n文件路径： $MAVEN_HOME/conf/setting.xml\n\nmirrors节点加入如下内容\n    <mirror>\n      <id>nexus</id>\n      <mirrorOf>*</mirrorOf>\n      <name>Nexus</name>\n      <url>http://192.168.1.80:8081/repository/maven-public/</url>\n    </mirror> \n\nprofiles节点加入如下内容\n    <profile>\n      <id>nexus</id>\n      <!--Enable snapshots for the built in central repo to direct -->\n      <!--all requests to nexus via the mirror -->\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n      </repositories>\n     <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile> \n\n \nactiveProfiles​节点加入\n<activeProfile>nexus</activeProfile>​\n\n\n对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。\n本地组件deploy\n除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：\n\nservers节点\n    <server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>\n    <server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>  \n\n项目的pom.xml文件，加入如下配置：\n  <distributionManagement>\n      <repository>\n          <id>maven-releases</id>\n          <url>http://192.168.1.​80:8081/repository/maven-releases/</url>\n      </repository>\n      <snapshotRepository>\n          <id>maven-snapshots</id>\n          <url>http://192.168.1.80:8081/repository/maven-snapshots/</url>\n      </snapshotRepository>\n  </distributionManagement>​","source":"_posts/Dev-Ops/Maven-Private-Repository-Server.md","raw":"---\ntitle: 利用Nexus搭建Maven私服 \ndescription: 利用Nexus搭建Maven私服\n---\n阐述如果利用Nexus来快速搭建maven仓库的私有服务器\n私服搭建\nDocker Hub链接地址： https://hub.docker.com/r/sonatype/nexus/\n\ndocker pull sonatype/nexus\nmkdir /data/nexus-data && chown -R 200 /data/nexus-data\ndocker run -d -p 8081:8081 --name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​\n\n本地Maven配置\n​修改Maven的全局setting.xml文件如下：\n\n文件路径： $MAVEN_HOME/conf/setting.xml\n\nmirrors节点加入如下内容\n    <mirror>\n      <id>nexus</id>\n      <mirrorOf>*</mirrorOf>\n      <name>Nexus</name>\n      <url>http://192.168.1.80:8081/repository/maven-public/</url>\n    </mirror> \n\nprofiles节点加入如下内容\n    <profile>\n      <id>nexus</id>\n      <!--Enable snapshots for the built in central repo to direct -->\n      <!--all requests to nexus via the mirror -->\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </repository>\n      </repositories>\n     <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases><enabled>true</enabled></releases>\n          <snapshots><enabled>true</enabled></snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile> \n\n \nactiveProfiles​节点加入\n<activeProfile>nexus</activeProfile>​\n\n\n对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。\n本地组件deploy\n除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：\n\nservers节点\n    <server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>\n    <server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin123</password>\n    </server>  \n\n项目的pom.xml文件，加入如下配置：\n  <distributionManagement>\n      <repository>\n          <id>maven-releases</id>\n          <url>http://192.168.1.​80:8081/repository/maven-releases/</url>\n      </repository>\n      <snapshotRepository>\n          <id>maven-snapshots</id>\n          <url>http://192.168.1.80:8081/repository/maven-snapshots/</url>\n      </snapshotRepository>\n  </distributionManagement>​","slug":"Dev-Ops/Maven-Private-Repository-Server","published":1,"date":"2018-12-05T03:27:52.668Z","updated":"2018-03-05T01:03:32.228Z","_id":"cjpam3xds000h7sq3gl30b3u3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>阐述如果利用Nexus来快速搭建maven仓库的私有服务器<br>私服搭建<br>Docker Hub链接地址： <a href=\"https://hub.docker.com/r/sonatype/nexus/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus/</a></p>\n<p>docker pull sonatype/nexus<br>mkdir /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data<br>docker run -d -p 8081:8081 –name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​</p>\n<p>本地Maven配置<br>​修改Maven的全局setting.xml文件如下：</p>\n<p>文件路径： $MAVEN_HOME/conf/setting.xml</p>\n<p>mirrors节点加入如下内容<br>    <mirror><br>      <id>nexus</id><br>      <mirrorof>*</mirrorof><br>      <name>Nexus</name><br>      <url><a href=\"http://192.168.1.80:8081/repository/maven-public/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.80:8081/repository/maven-public/</a></url><br>    </mirror> </p>\n<p>profiles节点加入如下内容<br>    <profile><br>      <id>nexus</id><br>      <!--Enable snapshots for the built in central repo to direct --><br>      <!--all requests to nexus via the mirror --><br>      <repositories><br>        <repository><br>          <id>central</id><br>          <url><a href=\"http://central\" target=\"_blank\" rel=\"noopener\">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </repository><br>      </repositories><br>     <pluginrepositories><br>        <pluginrepository><br>          <id>central</id><br>          <url><a href=\"http://central\" target=\"_blank\" rel=\"noopener\">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </pluginrepository><br>      </pluginrepositories><br>    </profile> </p>\n<p>activeProfiles​节点加入</p>\n<p><activeprofile>nexus</activeprofile>​</p>\n<p>对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。<br>本地组件deploy<br>除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：</p>\n<p>servers节点<br>    <server><br>      <id>maven-releases</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server><br>    <server><br>      <id>maven-snapshots</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server>  </p>\n<p>项目的pom.xml文件，加入如下配置：<br>  <distributionmanagement><br>      <repository><br>          <id>maven-releases</id><br>          <url><a href=\"http://192.168.1.​80:8081/repository/maven-releases/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.​80:8081/repository/maven-releases/</a></url><br>      </repository><br>      <snapshotrepository><br>          <id>maven-snapshots</id><br>          <url><a href=\"http://192.168.1.80:8081/repository/maven-snapshots/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.80:8081/repository/maven-snapshots/</a></url><br>      </snapshotrepository><br>  </distributionmanagement>​</p>\n","site":{"data":{}},"excerpt":"","more":"<p>阐述如果利用Nexus来快速搭建maven仓库的私有服务器<br>私服搭建<br>Docker Hub链接地址： <a href=\"https://hub.docker.com/r/sonatype/nexus/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/sonatype/nexus/</a></p>\n<p>docker pull sonatype/nexus<br>mkdir /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data<br>docker run -d -p 8081:8081 –name nexus -v /data/nexus-data:/nexus-data sonatype/nexus3​</p>\n<p>本地Maven配置<br>​修改Maven的全局setting.xml文件如下：</p>\n<p>文件路径： $MAVEN_HOME/conf/setting.xml</p>\n<p>mirrors节点加入如下内容<br>    <mirror><br>      <id>nexus</id><br>      <mirrorof>*</mirrorof><br>      <name>Nexus</name><br>      <url><a href=\"http://192.168.1.80:8081/repository/maven-public/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.80:8081/repository/maven-public/</a></url><br>    </mirror> </p>\n<p>profiles节点加入如下内容<br>    <profile><br>      <id>nexus</id><br>      <!--Enable snapshots for the built in central repo to direct --><br>      <!--all requests to nexus via the mirror --><br>      <repositories><br>        <repository><br>          <id>central</id><br>          <url><a href=\"http://central\" target=\"_blank\" rel=\"noopener\">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </repository><br>      </repositories><br>     <pluginrepositories><br>        <pluginrepository><br>          <id>central</id><br>          <url><a href=\"http://central\" target=\"_blank\" rel=\"noopener\">http://central</a></url><br>          <releases><enabled>true</enabled></releases><br>          <snapshots><enabled>true</enabled></snapshots><br>        </pluginrepository><br>      </pluginrepositories><br>    </profile> </p>\n<p>activeProfiles​节点加入</p>\n<p><activeprofile>nexus</activeprofile>​</p>\n<p>对于Snapshot的jar，如果想及时的更新，可以在maven参数中加上-U，就可以获得最新的jar包。<br>本地组件deploy<br>除了配置本地Maven配置外，还需要在setting.xml文件中加入如下内容：</p>\n<p>servers节点<br>    <server><br>      <id>maven-releases</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server><br>    <server><br>      <id>maven-snapshots</id><br>      <username>admin</username><br>      <password>admin123</password><br>    </server>  </p>\n<p>项目的pom.xml文件，加入如下配置：<br>  <distributionmanagement><br>      <repository><br>          <id>maven-releases</id><br>          <url><a href=\"http://192.168.1.​80:8081/repository/maven-releases/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.​80:8081/repository/maven-releases/</a></url><br>      </repository><br>      <snapshotrepository><br>          <id>maven-snapshots</id><br>          <url><a href=\"http://192.168.1.80:8081/repository/maven-snapshots/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.80:8081/repository/maven-snapshots/</a></url><br>      </snapshotrepository><br>  </distributionmanagement>​</p>\n"},{"_content":"---\ntitle:  Java 开发工具使用技巧收集\ndescription: Java 开发工具使用技巧收集， 让开发效率更高一些\n...\n\n\n\n# Eclipse\n## Eclipse 提速\nhttps://blog.csdn.net/leolu007/article/details/53541641\n\nRemote System Explorer Operation卡死\n第一步：Eclipse -> Preferences -> General -> Startup and Shutdown.不要勾选 RSE UI. \n第二步：Eclipse -> Preferences -> Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.\n \n## 在Eclispe中使用Git 命令\n参考： https://blog.csdn.net/wu_cai_/article/details/71637199  （建议选择git-bash）\n直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。\n\n## 调试\n### 断点出用于打印信息的代码收集\n#### Request的Header信息\n```\njava.util.Enumeration headerNames = req.getHeaderNames();\nwhile(headerNames.hasMoreElements()) {\n  String headerName = (String)headerNames.nextElement();\n  System.out.println(\"Header Name - \" + headerName + \", Value - \" + req.getHeader(headerName));\n} \n```\n\n\n\n\n\n\n","source":"_posts/Dev-Ops/Java-IDE-Useful-Skills.md","raw":"---\ntitle:  Java 开发工具使用技巧收集\ndescription: Java 开发工具使用技巧收集， 让开发效率更高一些\n...\n\n\n\n# Eclipse\n## Eclipse 提速\nhttps://blog.csdn.net/leolu007/article/details/53541641\n\nRemote System Explorer Operation卡死\n第一步：Eclipse -> Preferences -> General -> Startup and Shutdown.不要勾选 RSE UI. \n第二步：Eclipse -> Preferences -> Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.\n \n## 在Eclispe中使用Git 命令\n参考： https://blog.csdn.net/wu_cai_/article/details/71637199  （建议选择git-bash）\n直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。\n\n## 调试\n### 断点出用于打印信息的代码收集\n#### Request的Header信息\n```\njava.util.Enumeration headerNames = req.getHeaderNames();\nwhile(headerNames.hasMoreElements()) {\n  String headerName = (String)headerNames.nextElement();\n  System.out.println(\"Header Name - \" + headerName + \", Value - \" + req.getHeader(headerName));\n} \n```\n\n\n\n\n\n\n","slug":"Dev-Ops/Java-IDE-Useful-Skills","published":1,"date":"2018-12-05T03:27:52.658Z","updated":"2018-11-01T01:03:16.997Z","_id":"cjpam3xds000i7sq3xyll5xrq","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title:  Java 开发工具使用技巧收集<br>description: Java 开发工具使用技巧收集， 让开发效率更高一些<br>…</p>\n<h1 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h1><h2 id=\"Eclipse-提速\"><a href=\"#Eclipse-提速\" class=\"headerlink\" title=\"Eclipse 提速\"></a>Eclipse 提速</h2><p><a href=\"https://blog.csdn.net/leolu007/article/details/53541641\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/leolu007/article/details/53541641</a></p>\n<p>Remote System Explorer Operation卡死<br>第一步：Eclipse -&gt; Preferences -&gt; General -&gt; Startup and Shutdown.不要勾选 RSE UI.<br>第二步：Eclipse -&gt; Preferences -&gt; Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.</p>\n<h2 id=\"在Eclispe中使用Git-命令\"><a href=\"#在Eclispe中使用Git-命令\" class=\"headerlink\" title=\"在Eclispe中使用Git 命令\"></a>在Eclispe中使用Git 命令</h2><p>参考： <a href=\"https://blog.csdn.net/wu_cai_/article/details/71637199\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wu_cai_/article/details/71637199</a>  （建议选择git-bash）<br>直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><h3 id=\"断点出用于打印信息的代码收集\"><a href=\"#断点出用于打印信息的代码收集\" class=\"headerlink\" title=\"断点出用于打印信息的代码收集\"></a>断点出用于打印信息的代码收集</h3><h4 id=\"Request的Header信息\"><a href=\"#Request的Header信息\" class=\"headerlink\" title=\"Request的Header信息\"></a>Request的Header信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.util.Enumeration headerNames = req.getHeaderNames();</span><br><span class=\"line\">while(headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">  String headerName = (String)headerNames.nextElement();</span><br><span class=\"line\">  System.out.println(&quot;Header Name - &quot; + headerName + &quot;, Value - &quot; + req.getHeader(headerName));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  Java 开发工具使用技巧收集<br>description: Java 开发工具使用技巧收集， 让开发效率更高一些<br>…</p>\n<h1 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h1><h2 id=\"Eclipse-提速\"><a href=\"#Eclipse-提速\" class=\"headerlink\" title=\"Eclipse 提速\"></a>Eclipse 提速</h2><p><a href=\"https://blog.csdn.net/leolu007/article/details/53541641\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/leolu007/article/details/53541641</a></p>\n<p>Remote System Explorer Operation卡死<br>第一步：Eclipse -&gt; Preferences -&gt; General -&gt; Startup and Shutdown.不要勾选 RSE UI.<br>第二步：Eclipse -&gt; Preferences -&gt; Remote Systems. 取消勾选 Re-open Remote Systems view to previous state.</p>\n<h2 id=\"在Eclispe中使用Git-命令\"><a href=\"#在Eclispe中使用Git-命令\" class=\"headerlink\" title=\"在Eclispe中使用Git 命令\"></a>在Eclispe中使用Git 命令</h2><p>参考： <a href=\"https://blog.csdn.net/wu_cai_/article/details/71637199\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wu_cai_/article/details/71637199</a>  （建议选择git-bash）<br>直接在eclipse中使用并不是很方便，但是可以快速打开git-bash. 配置方式参考上面。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><h3 id=\"断点出用于打印信息的代码收集\"><a href=\"#断点出用于打印信息的代码收集\" class=\"headerlink\" title=\"断点出用于打印信息的代码收集\"></a>断点出用于打印信息的代码收集</h3><h4 id=\"Request的Header信息\"><a href=\"#Request的Header信息\" class=\"headerlink\" title=\"Request的Header信息\"></a>Request的Header信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.util.Enumeration headerNames = req.getHeaderNames();</span><br><span class=\"line\">while(headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">  String headerName = (String)headerNames.nextElement();</span><br><span class=\"line\">  System.out.println(&quot;Header Name - &quot; + headerName + &quot;, Value - &quot; + req.getHeader(headerName));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Maven父子工程的搭建","description":"总结通过maven创建父子工程的方式。","_content":"尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）\n## 版本\n**Spring Boot：** 1.4.7.RELEASE\n**Maven：** 3.2.5\n## 工具\neclipse\n## 参考\nhttps://github.com/dubbo/dubbo-spring-boot-project\nhttp://blog.csdn.net/yaerfeng/article/details/26448417\nhttp://blog.csdn.net/isea533/article/details/73744497\n## maven 国内镜像\n如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。\n修改conf文件夹下的settings.xml文件，添加如下镜像配置：\n```\n<mirrors>\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>        \n    </mirror>\n  </mirrors>\n```\n\n## 步骤\n### 创建父maven工程\n#### 创建普通的maven工程，参考如下截图\n![maven-create-parent](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png)\n#### 填写参数\n![maven-create-parent-1](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png)\n#### 删除无用文件夹\n![maven-create-parent-2](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png)\n#### 修改pom.xml\n\n 1. packaging 从jar改成pom `<packaging>pom</packaging>`\n 2. 添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）\n 修改后配置如下：\n \n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.dubboot</groupId>\n\t<artifactId>dubboot-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>pom</packaging>\n\n\t<name>dubboot-example</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.4.7.RELEASE</version> <!-- keep the version same with ${springboot.version} -->\n\t</parent>\n\t<dependencyManagement> <!-- 存在的价值只是为了方便管理版本 -->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.dubbo.springboot</groupId>\n\t\t\t\t<artifactId>spring-boot-starter-dubbo</artifactId>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency> \n\t\t\t\t<groupId>junit</groupId>\n\t\t\t\t<artifactId>junit</artifactId>\n\t\t\t\t<version>3.8.1</version>\n\t\t\t\t<scope>test</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n</project>\n```\n### 方式一：创建子maven子工程 （dubbo 服务接口）\n\n - 选中父maven工程右键，新建maven module，输入相关参数即可。 -      \n - 工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。\n - pom.xml 添加 `<packaging>jar</packaging>`\n### 方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）\n从https://start.spring.io/ 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。\n\n```\n<parent>\n\t<groupId>com.dubboot</groupId>\n\t<artifactId>dubboot-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n</parent>\n```\n![Spring Initiator](http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png)\n\n在父工程中添加module：\n\n```\n<modules>\n\t<module>dubboot-jpa</module>\n</modules>\n```\n然后可以顺利将子工程导入eclipse。\n\n","source":"_posts/Dev-Ops/Maven-usage-of-parent.md","raw":"---\ntitle: Maven父子工程的搭建\ndescription: 总结通过maven创建父子工程的方式。\n---\n尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）\n## 版本\n**Spring Boot：** 1.4.7.RELEASE\n**Maven：** 3.2.5\n## 工具\neclipse\n## 参考\nhttps://github.com/dubbo/dubbo-spring-boot-project\nhttp://blog.csdn.net/yaerfeng/article/details/26448417\nhttp://blog.csdn.net/isea533/article/details/73744497\n## maven 国内镜像\n如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。\n修改conf文件夹下的settings.xml文件，添加如下镜像配置：\n```\n<mirrors>\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>        \n    </mirror>\n  </mirrors>\n```\n\n## 步骤\n### 创建父maven工程\n#### 创建普通的maven工程，参考如下截图\n![maven-create-parent](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png)\n#### 填写参数\n![maven-create-parent-1](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png)\n#### 删除无用文件夹\n![maven-create-parent-2](http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png)\n#### 修改pom.xml\n\n 1. packaging 从jar改成pom `<packaging>pom</packaging>`\n 2. 添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）\n 修改后配置如下：\n \n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.dubboot</groupId>\n\t<artifactId>dubboot-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>pom</packaging>\n\n\t<name>dubboot-example</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.4.7.RELEASE</version> <!-- keep the version same with ${springboot.version} -->\n\t</parent>\n\t<dependencyManagement> <!-- 存在的价值只是为了方便管理版本 -->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.dubbo.springboot</groupId>\n\t\t\t\t<artifactId>spring-boot-starter-dubbo</artifactId>\n\t\t\t\t<version>1.0.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency> \n\t\t\t\t<groupId>junit</groupId>\n\t\t\t\t<artifactId>junit</artifactId>\n\t\t\t\t<version>3.8.1</version>\n\t\t\t\t<scope>test</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n</project>\n```\n### 方式一：创建子maven子工程 （dubbo 服务接口）\n\n - 选中父maven工程右键，新建maven module，输入相关参数即可。 -      \n - 工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。\n - pom.xml 添加 `<packaging>jar</packaging>`\n### 方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）\n从https://start.spring.io/ 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。\n\n```\n<parent>\n\t<groupId>com.dubboot</groupId>\n\t<artifactId>dubboot-example</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n</parent>\n```\n![Spring Initiator](http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png)\n\n在父工程中添加module：\n\n```\n<modules>\n\t<module>dubboot-jpa</module>\n</modules>\n```\n然后可以顺利将子工程导入eclipse。\n\n","slug":"Dev-Ops/Maven-usage-of-parent","published":1,"date":"2018-12-05T03:27:52.668Z","updated":"2018-06-07T13:04:26.103Z","_id":"cjpam3xds000j7sq3xdsrozo4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p><strong>Spring Boot：</strong> 1.4.7.RELEASE<br><strong>Maven：</strong> 3.2.5</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>eclipse</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/dubbo/dubbo-spring-boot-project\" target=\"_blank\" rel=\"noopener\">https://github.com/dubbo/dubbo-spring-boot-project</a><br><a href=\"http://blog.csdn.net/yaerfeng/article/details/26448417\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yaerfeng/article/details/26448417</a><br><a href=\"http://blog.csdn.net/isea533/article/details/73744497\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/isea533/article/details/73744497</a></p>\n<h2 id=\"maven-国内镜像\"><a href=\"#maven-国内镜像\" class=\"headerlink\" title=\"maven 国内镜像\"></a>maven 国内镜像</h2><p>如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。<br>修改conf文件夹下的settings.xml文件，添加如下镜像配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"创建父maven工程\"><a href=\"#创建父maven工程\" class=\"headerlink\" title=\"创建父maven工程\"></a>创建父maven工程</h3><h4 id=\"创建普通的maven工程，参考如下截图\"><a href=\"#创建普通的maven工程，参考如下截图\" class=\"headerlink\" title=\"创建普通的maven工程，参考如下截图\"></a>创建普通的maven工程，参考如下截图</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png\" alt=\"maven-create-parent\"></p>\n<h4 id=\"填写参数\"><a href=\"#填写参数\" class=\"headerlink\" title=\"填写参数\"></a>填写参数</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png\" alt=\"maven-create-parent-1\"></p>\n<h4 id=\"删除无用文件夹\"><a href=\"#删除无用文件夹\" class=\"headerlink\" title=\"删除无用文件夹\"></a>删除无用文件夹</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png\" alt=\"maven-create-parent-2\"></p>\n<h4 id=\"修改pom-xml\"><a href=\"#修改pom-xml\" class=\"headerlink\" title=\"修改pom.xml\"></a>修改pom.xml</h4><ol>\n<li>packaging 从jar改成pom <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li>\n<li>添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：<a href=\"http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）</a><br>修改后配置如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;dubboot-example&lt;/name&gt;</span><br><span class=\"line\">\t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\">\t&lt;parent&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;!-- keep the version same with $&#123;springboot.version&#125; --&gt;</span><br><span class=\"line\">\t&lt;/parent&gt;</span><br><span class=\"line\">\t&lt;dependencyManagement&gt; &lt;!-- 存在的价值只是为了方便管理版本 --&gt;</span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt; </span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/dependencyManagement&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式一：创建子maven子工程-（dubbo-服务接口）\"><a href=\"#方式一：创建子maven子工程-（dubbo-服务接口）\" class=\"headerlink\" title=\"方式一：创建子maven子工程 （dubbo 服务接口）\"></a>方式一：创建子maven子工程 （dubbo 服务接口）</h3><ul>\n<li>选中父maven工程右键，新建maven module，输入相关参数即可。 -      </li>\n<li>工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。</li>\n<li>pom.xml 添加 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code><h3 id=\"方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）\"><a href=\"#方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）\" class=\"headerlink\" title=\"方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）\"></a>方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）</h3>从<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/</a> 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png\" alt=\"Spring Initiator\"></p>\n<p>在父工程中添加module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">\t&lt;module&gt;dubboot-jpa&lt;/module&gt;</span><br><span class=\"line\">&lt;/modules&gt;</span><br></pre></td></tr></table></figure>\n<p>然后可以顺利将子工程导入eclipse。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>尝试dubbo+spring的同时，总结下通过maven创建父子工程的方法。（不考虑unit test）</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p><strong>Spring Boot：</strong> 1.4.7.RELEASE<br><strong>Maven：</strong> 3.2.5</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>eclipse</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/dubbo/dubbo-spring-boot-project\" target=\"_blank\" rel=\"noopener\">https://github.com/dubbo/dubbo-spring-boot-project</a><br><a href=\"http://blog.csdn.net/yaerfeng/article/details/26448417\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yaerfeng/article/details/26448417</a><br><a href=\"http://blog.csdn.net/isea533/article/details/73744497\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/isea533/article/details/73744497</a></p>\n<h2 id=\"maven-国内镜像\"><a href=\"#maven-国内镜像\" class=\"headerlink\" title=\"maven 国内镜像\"></a>maven 国内镜像</h2><p>如果不翻墙，下载maven的依赖相当慢，可以添加阿里云的镜像， 速度相当快。<br>修改conf文件夹下的settings.xml文件，添加如下镜像配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"创建父maven工程\"><a href=\"#创建父maven工程\" class=\"headerlink\" title=\"创建父maven工程\"></a>创建父maven工程</h3><h4 id=\"创建普通的maven工程，参考如下截图\"><a href=\"#创建普通的maven工程，参考如下截图\" class=\"headerlink\" title=\"创建普通的maven工程，参考如下截图\"></a>创建普通的maven工程，参考如下截图</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent.png\" alt=\"maven-create-parent\"></p>\n<h4 id=\"填写参数\"><a href=\"#填写参数\" class=\"headerlink\" title=\"填写参数\"></a>填写参数</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-1.png\" alt=\"maven-create-parent-1\"></p>\n<h4 id=\"删除无用文件夹\"><a href=\"#删除无用文件夹\" class=\"headerlink\" title=\"删除无用文件夹\"></a>删除无用文件夹</h4><p><img src=\"http://tech.jiu-shu.com/Dev-Ops/maven-create-parent-2.png\" alt=\"maven-create-parent-2\"></p>\n<h4 id=\"修改pom-xml\"><a href=\"#修改pom-xml\" class=\"headerlink\" title=\"修改pom.xml\"></a>修改pom.xml</h4><ol>\n<li>packaging 从jar改成pom <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></li>\n<li>添加spring-boot-starter-parent，添加dependency management。（maven的配置解释参考：<a href=\"http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/hellxoul/archive/2013/05/16/399345.html）</a><br>修改后配置如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;dubboot-example&lt;/name&gt;</span><br><span class=\"line\">\t&lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\">\t&lt;parent&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.4.7.RELEASE&lt;/version&gt; &lt;!-- keep the version same with $&#123;springboot.version&#125; --&gt;</span><br><span class=\"line\">\t&lt;/parent&gt;</span><br><span class=\"line\">\t&lt;dependencyManagement&gt; &lt;!-- 存在的价值只是为了方便管理版本 --&gt;</span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;io.dubbo.springboot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;spring-boot-starter-dubbo&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt; </span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/dependencyManagement&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式一：创建子maven子工程-（dubbo-服务接口）\"><a href=\"#方式一：创建子maven子工程-（dubbo-服务接口）\" class=\"headerlink\" title=\"方式一：创建子maven子工程 （dubbo 服务接口）\"></a>方式一：创建子maven子工程 （dubbo 服务接口）</h3><ul>\n<li>选中父maven工程右键，新建maven module，输入相关参数即可。 -      </li>\n<li>工程导入后删除测试相关：pom.xml 的junit依赖及测试相关java文件夹。</li>\n<li>pom.xml 添加 <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code><h3 id=\"方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）\"><a href=\"#方式二：创建子maven子工程-（Spring-Boot，-dubbo-服务实现）\" class=\"headerlink\" title=\"方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）\"></a>方式二：创建子maven子工程 （Spring Boot， dubbo 服务实现）</h3>从<a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/</a> 创建, 添加依赖，JPA， Validation, Mysql 及其他依赖项（不选Spring Cloud 相关）。下载后解压至父maven工程，修改pom.xml 中的parent使其匹配父工程。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.dubboot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;dubboot-example&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://tech.jiu-shu.com/Dev-Ops/spring-io-initiator.png\" alt=\"Spring Initiator\"></p>\n<p>在父工程中添加module：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">\t&lt;module&gt;dubboot-jpa&lt;/module&gt;</span><br><span class=\"line\">&lt;/modules&gt;</span><br></pre></td></tr></table></figure>\n<p>然后可以顺利将子工程导入eclipse。</p>\n"},{"_content":"---\ntitle: Nginx 问题收集\ndescription: Nginx 使用问题收集\n...\n\n收集在使用Nginx过程中遇见的问题。\n\n# 知识积累\n## 负载均衡\n平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。\n```\nupstream backend {\n        server 127.0.0.1:8080;\n        server 127.0.0.1:8081;\n}\nserver {\n        listen 80;\n        server_name auth.jiu-shu.com;\n\n        location / {\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://backend;\n            client_max_body_size    10m;\n        }\n    }\n```\n> 上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。\n\n# 问题收集\n\n### 反向代理后request的host和schema和浏览器请求不一致\n反向代理后\n下面如果不加proxy_set_header的两行，那么在microservice这个服务中，`request.getScheme() + \"://\" + request.getServerName()` 就会变成http://microservice.dev.com, nginx rewrite 之后，就可以获取到：http://www.dev.com\n```\nserver_name  www.dev.com;\nlocation / {\n\t\t proxy_set_header Host $host;\n  \t\t proxy_set_header X-Scheme $scheme;\t\n\t\t proxy_pass   http://microservice.dev.com:8091;\n  \t}\n```\n\n### bind() to 0.0.0.0:80 failed (98: Address already in use)\n启动碰见以上问题，有两种可能\n\n 1. 先检查80端口是否已经被其他http server占用 `sudo netstat -nlpt`\n 2. remove the IPv6 bind block (something along the lines of ::1:80。 参考：http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in\n \n### 403 forbidden (13: Permission denied)\n参考：[Nginx报错403 forbidden (13: Permission denied)的解决办法](https://www.hi-docs.com/article/detail-MTE1.html)\n解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）\n\n需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）\n> Every directory has a SeLinux context and the default 'Document Root' ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.\nThe new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.\nYou can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.\nThis should ideally solve the issue, can you try and verify once  :- \n`chcon -R -u system_u -t httpd_sys_content_t /data/`\n\n相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。","source":"_posts/Dev-Ops/Nginx-Technologies.md","raw":"---\ntitle: Nginx 问题收集\ndescription: Nginx 使用问题收集\n...\n\n收集在使用Nginx过程中遇见的问题。\n\n# 知识积累\n## 负载均衡\n平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。\n```\nupstream backend {\n        server 127.0.0.1:8080;\n        server 127.0.0.1:8081;\n}\nserver {\n        listen 80;\n        server_name auth.jiu-shu.com;\n\n        location / {\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://backend;\n            client_max_body_size    10m;\n        }\n    }\n```\n> 上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。\n\n# 问题收集\n\n### 反向代理后request的host和schema和浏览器请求不一致\n反向代理后\n下面如果不加proxy_set_header的两行，那么在microservice这个服务中，`request.getScheme() + \"://\" + request.getServerName()` 就会变成http://microservice.dev.com, nginx rewrite 之后，就可以获取到：http://www.dev.com\n```\nserver_name  www.dev.com;\nlocation / {\n\t\t proxy_set_header Host $host;\n  \t\t proxy_set_header X-Scheme $scheme;\t\n\t\t proxy_pass   http://microservice.dev.com:8091;\n  \t}\n```\n\n### bind() to 0.0.0.0:80 failed (98: Address already in use)\n启动碰见以上问题，有两种可能\n\n 1. 先检查80端口是否已经被其他http server占用 `sudo netstat -nlpt`\n 2. remove the IPv6 bind block (something along the lines of ::1:80。 参考：http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in\n \n### 403 forbidden (13: Permission denied)\n参考：[Nginx报错403 forbidden (13: Permission denied)的解决办法](https://www.hi-docs.com/article/detail-MTE1.html)\n解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）\n\n需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）\n> Every directory has a SeLinux context and the default 'Document Root' ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.\nThe new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.\nYou can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.\nThis should ideally solve the issue, can you try and verify once  :- \n`chcon -R -u system_u -t httpd_sys_content_t /data/`\n\n相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。","slug":"Dev-Ops/Nginx-Technologies","published":1,"date":"2018-12-05T03:27:52.668Z","updated":"2018-03-21T06:26:01.575Z","_id":"cjpam3xe2000k7sq38xrzzc6a","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: Nginx 问题收集<br>description: Nginx 使用问题收集<br>…</p>\n<p>收集在使用Nginx过程中遇见的问题。</p>\n<h1 id=\"知识积累\"><a href=\"#知识积累\" class=\"headerlink\" title=\"知识积累\"></a>知识积累</h1><h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">        server 127.0.0.1:8080;</span><br><span class=\"line\">        server 127.0.0.1:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name auth.jiu-shu.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://backend;</span><br><span class=\"line\">            client_max_body_size    10m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。</p>\n</blockquote>\n<h1 id=\"问题收集\"><a href=\"#问题收集\" class=\"headerlink\" title=\"问题收集\"></a>问题收集</h1><h3 id=\"反向代理后request的host和schema和浏览器请求不一致\"><a href=\"#反向代理后request的host和schema和浏览器请求不一致\" class=\"headerlink\" title=\"反向代理后request的host和schema和浏览器请求不一致\"></a>反向代理后request的host和schema和浏览器请求不一致</h3><p>反向代理后<br>下面如果不加proxy_set_header的两行，那么在microservice这个服务中，<code>request.getScheme() + &quot;://&quot; + request.getServerName()</code> 就会变成<a href=\"http://microservice.dev.com\" target=\"_blank\" rel=\"noopener\">http://microservice.dev.com</a>, nginx rewrite 之后，就可以获取到：<a href=\"http://www.dev.com\" target=\"_blank\" rel=\"noopener\">http://www.dev.com</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  www.dev.com;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">\t\t proxy_set_header Host $host;</span><br><span class=\"line\">  \t\t proxy_set_header X-Scheme $scheme;\t</span><br><span class=\"line\">\t\t proxy_pass   http://microservice.dev.com:8091;</span><br><span class=\"line\">  \t&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"bind-to-0-0-0-0-80-failed-98-Address-already-in-use\"><a href=\"#bind-to-0-0-0-0-80-failed-98-Address-already-in-use\" class=\"headerlink\" title=\"bind() to 0.0.0.0:80 failed (98: Address already in use)\"></a>bind() to 0.0.0.0:80 failed (98: Address already in use)</h3><p>启动碰见以上问题，有两种可能</p>\n<ol>\n<li>先检查80端口是否已经被其他http server占用 <code>sudo netstat -nlpt</code></li>\n<li>remove the IPv6 bind block (something along the lines of ::1:80。 参考：<a href=\"http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in\" target=\"_blank\" rel=\"noopener\">http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in</a></li>\n</ol>\n<h3 id=\"403-forbidden-13-Permission-denied\"><a href=\"#403-forbidden-13-Permission-denied\" class=\"headerlink\" title=\"403 forbidden (13: Permission denied)\"></a>403 forbidden (13: Permission denied)</h3><p>参考：<a href=\"https://www.hi-docs.com/article/detail-MTE1.html\" target=\"_blank\" rel=\"noopener\">Nginx报错403 forbidden (13: Permission denied)的解决办法</a><br>解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）</p>\n<p>需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）</p>\n<blockquote>\n<p>Every directory has a SeLinux context and the default ‘Document Root’ ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.<br>The new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.<br>You can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.<br>This should ideally solve the issue, can you try and verify once  :-<br><code>chcon -R -u system_u -t httpd_sys_content_t /data/</code></p>\n</blockquote>\n<p>相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: Nginx 问题收集<br>description: Nginx 使用问题收集<br>…</p>\n<p>收集在使用Nginx过程中遇见的问题。</p>\n<h1 id=\"知识积累\"><a href=\"#知识积累\" class=\"headerlink\" title=\"知识积累\"></a>知识积累</h1><h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>平均负载示例如下; 以下配置必须保证两个实例都正常运行在，因为这个配置并不会failover。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">        server 127.0.0.1:8080;</span><br><span class=\"line\">        server 127.0.0.1:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name auth.jiu-shu.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://backend;</span><br><span class=\"line\">            client_max_body_size    10m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上例中的8080 和 8081 端口都是Spring Boot的app。由于Java 是多线程的程序，在同一个虚拟机上运行多个实例并非最佳实践；这里只是方便测试。</p>\n</blockquote>\n<h1 id=\"问题收集\"><a href=\"#问题收集\" class=\"headerlink\" title=\"问题收集\"></a>问题收集</h1><h3 id=\"反向代理后request的host和schema和浏览器请求不一致\"><a href=\"#反向代理后request的host和schema和浏览器请求不一致\" class=\"headerlink\" title=\"反向代理后request的host和schema和浏览器请求不一致\"></a>反向代理后request的host和schema和浏览器请求不一致</h3><p>反向代理后<br>下面如果不加proxy_set_header的两行，那么在microservice这个服务中，<code>request.getScheme() + &quot;://&quot; + request.getServerName()</code> 就会变成<a href=\"http://microservice.dev.com\" target=\"_blank\" rel=\"noopener\">http://microservice.dev.com</a>, nginx rewrite 之后，就可以获取到：<a href=\"http://www.dev.com\" target=\"_blank\" rel=\"noopener\">http://www.dev.com</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  www.dev.com;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">\t\t proxy_set_header Host $host;</span><br><span class=\"line\">  \t\t proxy_set_header X-Scheme $scheme;\t</span><br><span class=\"line\">\t\t proxy_pass   http://microservice.dev.com:8091;</span><br><span class=\"line\">  \t&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"bind-to-0-0-0-0-80-failed-98-Address-already-in-use\"><a href=\"#bind-to-0-0-0-0-80-failed-98-Address-already-in-use\" class=\"headerlink\" title=\"bind() to 0.0.0.0:80 failed (98: Address already in use)\"></a>bind() to 0.0.0.0:80 failed (98: Address already in use)</h3><p>启动碰见以上问题，有两种可能</p>\n<ol>\n<li>先检查80端口是否已经被其他http server占用 <code>sudo netstat -nlpt</code></li>\n<li>remove the IPv6 bind block (something along the lines of ::1:80。 参考：<a href=\"http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in\" target=\"_blank\" rel=\"noopener\">http://serverfault.com/questions/520535/nginx-is-still-on-port-80-bind-to-0-0-0-080-failed-98-address-already-in</a></li>\n</ol>\n<h3 id=\"403-forbidden-13-Permission-denied\"><a href=\"#403-forbidden-13-Permission-denied\" class=\"headerlink\" title=\"403 forbidden (13: Permission denied)\"></a>403 forbidden (13: Permission denied)</h3><p>参考：<a href=\"https://www.hi-docs.com/article/detail-MTE1.html\" target=\"_blank\" rel=\"noopener\">Nginx报错403 forbidden (13: Permission denied)的解决办法</a><br>解决办法一： 关闭 SELinux  （在了解了SELinux的重要性后，决定继续寻找更好的解决办法）</p>\n<p>需要进一步了解SELinux相关，需要解决办法二：（感谢Zeal老师给出的解决方案）</p>\n<blockquote>\n<p>Every directory has a SeLinux context and the default ‘Document Root’ ( /var/www/html ) has an context which allows the nginx / apache user to access the directory.<br>The new ROOT ( /data/images ) will not have the same context and thus SeLinux  is blocking the access.<br>You can verify with ls -lZ /Default-Document-Root and verify the context and associate the same context to /data/images.<br>This should ideally solve the issue, can you try and verify once  :-<br><code>chcon -R -u system_u -t httpd_sys_content_t /data/</code></p>\n</blockquote>\n<p>相信ftp等服务，如果更改了根目录，也会有同样的问题。需要更深入的对SELinux学习。</p>\n"},{"title":"Shell 脚本学习笔记","description":"Shell 学习笔记","_content":"\n### 括号的使用说明\n参考：[Double parenthesis with and without dollar](http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar)\n\n - $(...) means execute the command in the parens and return its stdout. \n\n```\n$ echo \"The current date is $(date)\"\nThe current date is Mon Jul  6 14:27:59 PDT 2015\n```\n- (...) means run the commands listed in the parens in a subshell. Example:\n\n```\n$ a=1; (a=2; echo \"inside: a=$a\"); echo \"outside: a=$a\"\ninside: a=2\noutside: a=1\n```\n\n- $((...)) means perform arithmetic and return the result of the calculation. Example:\n\n```\n$ a=$((2+3)); echo \"a=$a\"\na=5\n```\n\n- ((...)) means perform arithmetic, possibly changing the values of shell variables, but don't return its result. Example:\n\n```\n$ ((a=2+3)); echo \"a=$a\"\na=5\n```\n\n- ${...} means return the value of the shell variable named in the braces. Example:\n\n```\n$ echo ${SHELL}\n/bin/bash\n```\n\n- {...} means execute the commands in the braces as a group. Example:\n\n```\n$ false || { echo \"We failed\"; exit 1; }\nWe failed\n```\n\n\n## 有用脚本收集\n\n### 文件读取\n读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。\n\n```\n#!/bin/sh\nfor filename in /home/okchem/mysqlbackup/*.sql; do\n    while IFS= read line\n\tdo\n\t\t# display $line or do somthing with $line\n\t\tif [[ $line == *\"/ocf/\"* ]]; then\n\t\t\tSUBSTRING=$(echo $line| cut -d'`' -f 2) # 用'`'来拆分,输出数组第二个\n\t\t\techo $SUBSTRING\n\t\tfi\n\tdone <\"${filename}.sql\"\ndone\n```","source":"_posts/Dev-Ops/Shell-learning-notes.md","raw":"---\ntitle: Shell 脚本学习笔记\ndescription: Shell 学习笔记\n---\n\n### 括号的使用说明\n参考：[Double parenthesis with and without dollar](http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar)\n\n - $(...) means execute the command in the parens and return its stdout. \n\n```\n$ echo \"The current date is $(date)\"\nThe current date is Mon Jul  6 14:27:59 PDT 2015\n```\n- (...) means run the commands listed in the parens in a subshell. Example:\n\n```\n$ a=1; (a=2; echo \"inside: a=$a\"); echo \"outside: a=$a\"\ninside: a=2\noutside: a=1\n```\n\n- $((...)) means perform arithmetic and return the result of the calculation. Example:\n\n```\n$ a=$((2+3)); echo \"a=$a\"\na=5\n```\n\n- ((...)) means perform arithmetic, possibly changing the values of shell variables, but don't return its result. Example:\n\n```\n$ ((a=2+3)); echo \"a=$a\"\na=5\n```\n\n- ${...} means return the value of the shell variable named in the braces. Example:\n\n```\n$ echo ${SHELL}\n/bin/bash\n```\n\n- {...} means execute the commands in the braces as a group. Example:\n\n```\n$ false || { echo \"We failed\"; exit 1; }\nWe failed\n```\n\n\n## 有用脚本收集\n\n### 文件读取\n读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。\n\n```\n#!/bin/sh\nfor filename in /home/okchem/mysqlbackup/*.sql; do\n    while IFS= read line\n\tdo\n\t\t# display $line or do somthing with $line\n\t\tif [[ $line == *\"/ocf/\"* ]]; then\n\t\t\tSUBSTRING=$(echo $line| cut -d'`' -f 2) # 用'`'来拆分,输出数组第二个\n\t\t\techo $SUBSTRING\n\t\tfi\n\tdone <\"${filename}.sql\"\ndone\n```","slug":"Dev-Ops/Shell-learning-notes","published":1,"date":"2018-12-05T03:27:52.668Z","updated":"2018-03-05T01:03:32.232Z","_id":"cjpam3xe2000l7sq3l7wfut7z","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"括号的使用说明\"><a href=\"#括号的使用说明\" class=\"headerlink\" title=\"括号的使用说明\"></a>括号的使用说明</h3><p>参考：<a href=\"http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar\" target=\"_blank\" rel=\"noopener\">Double parenthesis with and without dollar</a></p>\n<ul>\n<li>$(…) means execute the command in the parens and return its stdout. </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;The current date is $(date)&quot;</span><br><span class=\"line\">The current date is Mon Jul  6 14:27:59 PDT 2015</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(…) means run the commands listed in the parens in a subshell. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ a=1; (a=2; echo &quot;inside: a=$a&quot;); echo &quot;outside: a=$a&quot;</span><br><span class=\"line\">inside: a=2</span><br><span class=\"line\">outside: a=1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>$((…)) means perform arithmetic and return the result of the calculation. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ a=$((2+3)); echo &quot;a=$a&quot;</span><br><span class=\"line\">a=5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>((…)) means perform arithmetic, possibly changing the values of shell variables, but don’t return its result. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ((a=2+3)); echo &quot;a=$a&quot;</span><br><span class=\"line\">a=5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>${…} means return the value of the shell variable named in the braces. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $&#123;SHELL&#125;</span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>{…} means execute the commands in the braces as a group. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ false || &#123; echo &quot;We failed&quot;; exit 1; &#125;</span><br><span class=\"line\">We failed</span><br></pre></td></tr></table></figure>\n<h2 id=\"有用脚本收集\"><a href=\"#有用脚本收集\" class=\"headerlink\" title=\"有用脚本收集\"></a>有用脚本收集</h2><h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">for filename in /home/okchem/mysqlbackup/*.sql; do</span><br><span class=\"line\">    while IFS= read line</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\t# display $line or do somthing with $line</span><br><span class=\"line\">\t\tif [[ $line == *&quot;/ocf/&quot;* ]]; then</span><br><span class=\"line\">\t\t\tSUBSTRING=$(echo $line| cut -d&apos;`&apos; -f 2) # 用&apos;`&apos;来拆分,输出数组第二个</span><br><span class=\"line\">\t\t\techo $SUBSTRING</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\tdone &lt;&quot;$&#123;filename&#125;.sql&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"括号的使用说明\"><a href=\"#括号的使用说明\" class=\"headerlink\" title=\"括号的使用说明\"></a>括号的使用说明</h3><p>参考：<a href=\"http://stackoverflow.com/questions/31255699/double-parenthesis-with-and-without-dollar\" target=\"_blank\" rel=\"noopener\">Double parenthesis with and without dollar</a></p>\n<ul>\n<li>$(…) means execute the command in the parens and return its stdout. </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;The current date is $(date)&quot;</span><br><span class=\"line\">The current date is Mon Jul  6 14:27:59 PDT 2015</span><br></pre></td></tr></table></figure>\n<ul>\n<li>(…) means run the commands listed in the parens in a subshell. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ a=1; (a=2; echo &quot;inside: a=$a&quot;); echo &quot;outside: a=$a&quot;</span><br><span class=\"line\">inside: a=2</span><br><span class=\"line\">outside: a=1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>$((…)) means perform arithmetic and return the result of the calculation. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ a=$((2+3)); echo &quot;a=$a&quot;</span><br><span class=\"line\">a=5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>((…)) means perform arithmetic, possibly changing the values of shell variables, but don’t return its result. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ((a=2+3)); echo &quot;a=$a&quot;</span><br><span class=\"line\">a=5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>${…} means return the value of the shell variable named in the braces. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $&#123;SHELL&#125;</span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>{…} means execute the commands in the braces as a group. Example:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ false || &#123; echo &quot;We failed&quot;; exit 1; &#125;</span><br><span class=\"line\">We failed</span><br></pre></td></tr></table></figure>\n<h2 id=\"有用脚本收集\"><a href=\"#有用脚本收集\" class=\"headerlink\" title=\"有用脚本收集\"></a>有用脚本收集</h2><h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>读取文件目录的所有文件，按行读取每个文件，判断行文字是否包含特定字符串；如果包含，通过特殊字符来split并输出想要的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">for filename in /home/okchem/mysqlbackup/*.sql; do</span><br><span class=\"line\">    while IFS= read line</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\t# display $line or do somthing with $line</span><br><span class=\"line\">\t\tif [[ $line == *&quot;/ocf/&quot;* ]]; then</span><br><span class=\"line\">\t\t\tSUBSTRING=$(echo $line| cut -d&apos;`&apos; -f 2) # 用&apos;`&apos;来拆分,输出数组第二个</span><br><span class=\"line\">\t\t\techo $SUBSTRING</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\tdone &lt;&quot;$&#123;filename&#125;.sql&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>"},{"_content":"---\ntitle: Mongodb 和 Mysql 的性能测试\ndescription: 基于Windows 7上来测试Mongodb和Mysql在一对多的场景下的性能\n...\n尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：[github: mongo-vs-mysql](https://github.com/choelea/mongo-vs-mysql)\n> 性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。\n# 版本及环境\n\n - 操作系统：  windows 7 \n - 硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） \n - mongodb：  3.2.5\n - mysql：    5.7\n\n# Data-demo\nData-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。\n\n数据结构采用常用的产品和类目的多对多的设计。 \n![mysql-product-category](http://tech.jiu-shu.com/Database-Technologies/mysql-product-category.png)\n\n**Category 数据如下：**\n\nid | code | name  \n---|-----|----\n'1'| 'cate-1'| 'Category 1'\n'2'| 'cate-2'| 'Category 2'\n'3'| 'cate-3'| 'Category 3'\n'4'| 'cate-4'| 'Category 4'\n\n**Product 数据如下**\n\nid | code | name  | price\n-- | ---- | ----- | -----\n'1'| 'p-0'| 'product 0'| '19'\n'2'| 'p-1'| 'product 1'| '19'\n'3'| 'p-2'| 'product 2'| '19'\n ...|  ... |  ...          |...\n'1000000'| 'p-999999'| 'product 999999'| '19'\n'1000001'| 'pp-0'| 'iphone'| '19'\n'1000002'| 'pp-1'| 'iphone'| '19'\n'1000003'| 'pp-2'| 'iphone'| '19'\n'1000004'| 'pp-3'| 'iphone'| '19'\n'1000005'| 'pp-4'| 'iphone'| '19'\n'1000006'| 'pp-5'| 'iphone'| '19'\n'1000007'| 'pp-6'| 'iphone'| '19'\n'1000008'| 'pp-7'| 'iphone'| '19'\n'1000009'| 'pp-8'| 'iphone'| '19'\n'1000010'| 'pp-9'| 'iphone'| '19'\n'1000011'| 'pp-10'| 'iphone'| '19'\n'1000012'| 'pp-11'| 'iphone'| '19'\n'1000013'| 'pp-12'| 'iphone'| '19'\n'1000014'| 'pp-13'| 'iphone'| '19'\n'1000015'| 'pp-14'| 'iphone'| '19'\n'1000016'| 'pp-15'| 'iphone'| '19'\n'1000017'| 'pp-16'| 'iphone'| '19'\n'1000018'| 'pp-17'| 'iphone'| '19'\n'1000019'| 'pp-18'| 'iphone'| '19'\n'1000020'| 'pp-19'| 'iphone'| '19'\t\n\n最后的二十行是用来方便查询验证的。\n\n**Product_Category**\n\n中间mapping的表格\n\n\n# Mongo 数据\n采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。`npm install` 然后运行命令`npm run  produceTestData` 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：\n\n产品 Product\n```\n{\n\t\"_id\": \"59cb4952d44efa2eb45d4bf7\",\n\t\"code\": \"p-0\",\n\t\"name\": \"Product 0\",\n\t\"price\": 19,\n\t\"__v\": 0,\n\t\"categories\": [\n\t\t\"cate-1\",\n\t\t\"cate-2\"\n\t]\n}\n```\n有20条产品数据的categories中有cate-4\n\n# 通过查询脚本直接测试：\n通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。\n## 场景一：查询单个类目下的产品\n#### mongo 查询所有的cate-4 的产品\n``` mongodb\ndb.getCollection('products').find({categories:'cate-4'}) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒\n```\n#### mysql 查询所有的cate-4 的产品\n\n``` sql\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id=pc.product_id and pc.category_id=c.id where c.code ='cate-4'; -- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id=pc.product_id and pc.category_id=c.id where c.name ='Category 4'; -- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）\n```\n## 场景二：查询多个类目下的产品\n查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）\n#### mongod \n```\ndb.getCollection('products').find({categories:{$in:['cate-4','cate-5']}}) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描\n```\n#### mysql \n```\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = 'cate-5' or c.code='cate-4'; -- 6.177 秒，\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in('cate-5','cate-4'); -- 6.24 秒\n```\n通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch\n\n## 场景三：单表无索引\n查询名称是iphone的产品\n#### Mysql \n```\nselect * from product where name='iphone'; -- 0.546 秒，全表扫描\n```\n#### mongo\n\n```\ndb.getCollection('products').find({name:'iphone'}) // 0.428 秒\n```\n全表扫描两者并无太大的差距。\n\n## 场景四：单表索引\n```\ndb.getCollection('products').find({code:'pp-1'})  \nselect * from product where code='pp-1';\n```\n一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。\n\n## 场景五：单表索引字段使用In来查询\n场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。\n**mongodb** 历时0.004 sec. 索引被用上了\n```mongodb\n// 非ID的索引字段\ndb.getCollection('products').find({\n    \"code\": {\n        \"$in\": [\n            \"pp-0\",\n            \"pp-1\"\n        ]\n    }\n})\n// _id 主键的$in 查询\ndb.getCollection('products').find({\n    \"_id\": {\n        \"$in\": [\n            ObjectId(\"59cb4952d44efa2eb45d4bf7\"),\n            ObjectId(\"59cb4952d44efa2eb45d4bf8\")\n        ]\n    }\n})\n```\n**Mysql ** 也是毫秒级，时间忽略不计\n\n``` sql\nselect * from product where code in ('pp-0','pp-4'); // 0.0000 sec\n```\n\n\n","source":"_posts/Database-Technologies/Mongodb-vs-Mysql-basic.md","raw":"---\ntitle: Mongodb 和 Mysql 的性能测试\ndescription: 基于Windows 7上来测试Mongodb和Mysql在一对多的场景下的性能\n...\n尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：[github: mongo-vs-mysql](https://github.com/choelea/mongo-vs-mysql)\n> 性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。\n# 版本及环境\n\n - 操作系统：  windows 7 \n - 硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） \n - mongodb：  3.2.5\n - mysql：    5.7\n\n# Data-demo\nData-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。\n\n数据结构采用常用的产品和类目的多对多的设计。 \n![mysql-product-category](http://tech.jiu-shu.com/Database-Technologies/mysql-product-category.png)\n\n**Category 数据如下：**\n\nid | code | name  \n---|-----|----\n'1'| 'cate-1'| 'Category 1'\n'2'| 'cate-2'| 'Category 2'\n'3'| 'cate-3'| 'Category 3'\n'4'| 'cate-4'| 'Category 4'\n\n**Product 数据如下**\n\nid | code | name  | price\n-- | ---- | ----- | -----\n'1'| 'p-0'| 'product 0'| '19'\n'2'| 'p-1'| 'product 1'| '19'\n'3'| 'p-2'| 'product 2'| '19'\n ...|  ... |  ...          |...\n'1000000'| 'p-999999'| 'product 999999'| '19'\n'1000001'| 'pp-0'| 'iphone'| '19'\n'1000002'| 'pp-1'| 'iphone'| '19'\n'1000003'| 'pp-2'| 'iphone'| '19'\n'1000004'| 'pp-3'| 'iphone'| '19'\n'1000005'| 'pp-4'| 'iphone'| '19'\n'1000006'| 'pp-5'| 'iphone'| '19'\n'1000007'| 'pp-6'| 'iphone'| '19'\n'1000008'| 'pp-7'| 'iphone'| '19'\n'1000009'| 'pp-8'| 'iphone'| '19'\n'1000010'| 'pp-9'| 'iphone'| '19'\n'1000011'| 'pp-10'| 'iphone'| '19'\n'1000012'| 'pp-11'| 'iphone'| '19'\n'1000013'| 'pp-12'| 'iphone'| '19'\n'1000014'| 'pp-13'| 'iphone'| '19'\n'1000015'| 'pp-14'| 'iphone'| '19'\n'1000016'| 'pp-15'| 'iphone'| '19'\n'1000017'| 'pp-16'| 'iphone'| '19'\n'1000018'| 'pp-17'| 'iphone'| '19'\n'1000019'| 'pp-18'| 'iphone'| '19'\n'1000020'| 'pp-19'| 'iphone'| '19'\t\n\n最后的二十行是用来方便查询验证的。\n\n**Product_Category**\n\n中间mapping的表格\n\n\n# Mongo 数据\n采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。`npm install` 然后运行命令`npm run  produceTestData` 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：\n\n产品 Product\n```\n{\n\t\"_id\": \"59cb4952d44efa2eb45d4bf7\",\n\t\"code\": \"p-0\",\n\t\"name\": \"Product 0\",\n\t\"price\": 19,\n\t\"__v\": 0,\n\t\"categories\": [\n\t\t\"cate-1\",\n\t\t\"cate-2\"\n\t]\n}\n```\n有20条产品数据的categories中有cate-4\n\n# 通过查询脚本直接测试：\n通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。\n## 场景一：查询单个类目下的产品\n#### mongo 查询所有的cate-4 的产品\n``` mongodb\ndb.getCollection('products').find({categories:'cate-4'}) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒\n```\n#### mysql 查询所有的cate-4 的产品\n\n``` sql\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id=pc.product_id and pc.category_id=c.id where c.code ='cate-4'; -- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id=pc.product_id and pc.category_id=c.id where c.name ='Category 4'; -- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）\n```\n## 场景二：查询多个类目下的产品\n查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）\n#### mongod \n```\ndb.getCollection('products').find({categories:{$in:['cate-4','cate-5']}}) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描\n```\n#### mysql \n```\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = 'cate-5' or c.code='cate-4'; -- 6.177 秒，\nSELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in('cate-5','cate-4'); -- 6.24 秒\n```\n通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch\n\n## 场景三：单表无索引\n查询名称是iphone的产品\n#### Mysql \n```\nselect * from product where name='iphone'; -- 0.546 秒，全表扫描\n```\n#### mongo\n\n```\ndb.getCollection('products').find({name:'iphone'}) // 0.428 秒\n```\n全表扫描两者并无太大的差距。\n\n## 场景四：单表索引\n```\ndb.getCollection('products').find({code:'pp-1'})  \nselect * from product where code='pp-1';\n```\n一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。\n\n## 场景五：单表索引字段使用In来查询\n场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。\n**mongodb** 历时0.004 sec. 索引被用上了\n```mongodb\n// 非ID的索引字段\ndb.getCollection('products').find({\n    \"code\": {\n        \"$in\": [\n            \"pp-0\",\n            \"pp-1\"\n        ]\n    }\n})\n// _id 主键的$in 查询\ndb.getCollection('products').find({\n    \"_id\": {\n        \"$in\": [\n            ObjectId(\"59cb4952d44efa2eb45d4bf7\"),\n            ObjectId(\"59cb4952d44efa2eb45d4bf8\")\n        ]\n    }\n})\n```\n**Mysql ** 也是毫秒级，时间忽略不计\n\n``` sql\nselect * from product where code in ('pp-0','pp-4'); // 0.0000 sec\n```\n\n\n","slug":"Database-Technologies/Mongodb-vs-Mysql-basic","published":1,"date":"2018-12-05T03:27:52.638Z","updated":"2018-06-07T13:04:26.096Z","_id":"cjpam3xe2000m7sq32k75zyqa","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: Mongodb 和 Mysql 的性能测试<br>description: 基于Windows 7上来测试Mongodb和Mysql在一对多的场景下的性能<br>…<br>尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：<a href=\"https://github.com/choelea/mongo-vs-mysql\" target=\"_blank\" rel=\"noopener\">github: mongo-vs-mysql</a></p>\n<blockquote>\n<p>性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。</p>\n</blockquote>\n<h1 id=\"版本及环境\"><a href=\"#版本及环境\" class=\"headerlink\" title=\"版本及环境\"></a>版本及环境</h1><ul>\n<li>操作系统：  windows 7 </li>\n<li>硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） </li>\n<li>mongodb：  3.2.5</li>\n<li>mysql：    5.7</li>\n</ul>\n<h1 id=\"Data-demo\"><a href=\"#Data-demo\" class=\"headerlink\" title=\"Data-demo\"></a>Data-demo</h1><p>Data-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。</p>\n<p>数据结构采用常用的产品和类目的多对多的设计。<br><img src=\"http://tech.jiu-shu.com/Database-Technologies/mysql-product-category.png\" alt=\"mysql-product-category\"></p>\n<p><strong>Category 数据如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘1’</td>\n<td>‘cate-1’</td>\n<td>‘Category 1’</td>\n</tr>\n<tr>\n<td>‘2’</td>\n<td>‘cate-2’</td>\n<td>‘Category 2’</td>\n</tr>\n<tr>\n<td>‘3’</td>\n<td>‘cate-3’</td>\n<td>‘Category 3’</td>\n</tr>\n<tr>\n<td>‘4’</td>\n<td>‘cate-4’</td>\n<td>‘Category 4’</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Product 数据如下</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘1’</td>\n<td>‘p-0’</td>\n<td>‘product 0’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘2’</td>\n<td>‘p-1’</td>\n<td>‘product 1’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘3’</td>\n<td>‘p-2’</td>\n<td>‘product 2’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td> …</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>‘1000000’</td>\n<td>‘p-999999’</td>\n<td>‘product 999999’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000001’</td>\n<td>‘pp-0’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000002’</td>\n<td>‘pp-1’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000003’</td>\n<td>‘pp-2’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000004’</td>\n<td>‘pp-3’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000005’</td>\n<td>‘pp-4’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000006’</td>\n<td>‘pp-5’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000007’</td>\n<td>‘pp-6’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000008’</td>\n<td>‘pp-7’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000009’</td>\n<td>‘pp-8’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000010’</td>\n<td>‘pp-9’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000011’</td>\n<td>‘pp-10’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000012’</td>\n<td>‘pp-11’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000013’</td>\n<td>‘pp-12’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000014’</td>\n<td>‘pp-13’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000015’</td>\n<td>‘pp-14’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000016’</td>\n<td>‘pp-15’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000017’</td>\n<td>‘pp-16’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000018’</td>\n<td>‘pp-17’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000019’</td>\n<td>‘pp-18’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000020’</td>\n<td>‘pp-19’</td>\n<td>‘iphone’</td>\n<td>‘19’    </td>\n</tr>\n</tbody>\n</table>\n<p>最后的二十行是用来方便查询验证的。</p>\n<p><strong>Product_Category</strong></p>\n<p>中间mapping的表格</p>\n<h1 id=\"Mongo-数据\"><a href=\"#Mongo-数据\" class=\"headerlink\" title=\"Mongo 数据\"></a>Mongo 数据</h1><p>采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。<code>npm install</code> 然后运行命令<code>npm run  produceTestData</code> 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：</p>\n<p>产品 Product<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;_id&quot;: &quot;59cb4952d44efa2eb45d4bf7&quot;,</span><br><span class=\"line\">\t&quot;code&quot;: &quot;p-0&quot;,</span><br><span class=\"line\">\t&quot;name&quot;: &quot;Product 0&quot;,</span><br><span class=\"line\">\t&quot;price&quot;: 19,</span><br><span class=\"line\">\t&quot;__v&quot;: 0,</span><br><span class=\"line\">\t&quot;categories&quot;: [</span><br><span class=\"line\">\t\t&quot;cate-1&quot;,</span><br><span class=\"line\">\t\t&quot;cate-2&quot;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有20条产品数据的categories中有cate-4</p>\n<h1 id=\"通过查询脚本直接测试：\"><a href=\"#通过查询脚本直接测试：\" class=\"headerlink\" title=\"通过查询脚本直接测试：\"></a>通过查询脚本直接测试：</h1><p>通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。</p>\n<h2 id=\"场景一：查询单个类目下的产品\"><a href=\"#场景一：查询单个类目下的产品\" class=\"headerlink\" title=\"场景一：查询单个类目下的产品\"></a>场景一：查询单个类目下的产品</h2><h4 id=\"mongo-查询所有的cate-4-的产品\"><a href=\"#mongo-查询所有的cate-4-的产品\" class=\"headerlink\" title=\"mongo 查询所有的cate-4 的产品\"></a>mongo 查询所有的cate-4 的产品</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;categories:&apos;cate-4&apos;&#125;) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql-查询所有的cate-4-的产品\"><a href=\"#mysql-查询所有的cate-4-的产品\" class=\"headerlink\" title=\"mysql 查询所有的cate-4 的产品\"></a>mysql 查询所有的cate-4 的产品</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>  product p <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> product_category pc <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"keyword\">category</span> c <span class=\"keyword\">on</span> p.id=pc.product_id <span class=\"keyword\">and</span> pc.category_id=c.id <span class=\"keyword\">where</span> c.code =<span class=\"string\">'cate-4'</span>; <span class=\"comment\">-- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>  product p <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> product_category pc <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"keyword\">category</span> c <span class=\"keyword\">on</span> p.id=pc.product_id <span class=\"keyword\">and</span> pc.category_id=c.id <span class=\"keyword\">where</span> c.name =<span class=\"string\">'Category 4'</span>; <span class=\"comment\">-- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"场景二：查询多个类目下的产品\"><a href=\"#场景二：查询多个类目下的产品\" class=\"headerlink\" title=\"场景二：查询多个类目下的产品\"></a>场景二：查询多个类目下的产品</h2><p>查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）</p>\n<h4 id=\"mongod\"><a href=\"#mongod\" class=\"headerlink\" title=\"mongod\"></a>mongod</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;categories:&#123;$in:[&apos;cate-4&apos;,&apos;cate-5&apos;]&#125;&#125;) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = &apos;cate-5&apos; or c.code=&apos;cate-4&apos;; -- 6.177 秒，</span><br><span class=\"line\">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in(&apos;cate-5&apos;,&apos;cate-4&apos;); -- 6.24 秒</span><br></pre></td></tr></table></figure>\n<p>通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch</p>\n<h2 id=\"场景三：单表无索引\"><a href=\"#场景三：单表无索引\" class=\"headerlink\" title=\"场景三：单表无索引\"></a>场景三：单表无索引</h2><p>查询名称是iphone的产品</p>\n<h4 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from product where name=&apos;iphone&apos;; -- 0.546 秒，全表扫描</span><br></pre></td></tr></table></figure>\n<h4 id=\"mongo\"><a href=\"#mongo\" class=\"headerlink\" title=\"mongo\"></a>mongo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;name:&apos;iphone&apos;&#125;) // 0.428 秒</span><br></pre></td></tr></table></figure>\n<p>全表扫描两者并无太大的差距。</p>\n<h2 id=\"场景四：单表索引\"><a href=\"#场景四：单表索引\" class=\"headerlink\" title=\"场景四：单表索引\"></a>场景四：单表索引</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;code:&apos;pp-1&apos;&#125;)  </span><br><span class=\"line\">select * from product where code=&apos;pp-1&apos;;</span><br></pre></td></tr></table></figure>\n<p>一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。</p>\n<h2 id=\"场景五：单表索引字段使用In来查询\"><a href=\"#场景五：单表索引字段使用In来查询\" class=\"headerlink\" title=\"场景五：单表索引字段使用In来查询\"></a>场景五：单表索引字段使用In来查询</h2><p>场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。<br><strong>mongodb</strong> 历时0.004 sec. 索引被用上了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 非ID的索引字段</span><br><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class=\"line\">    &quot;code&quot;: &#123;</span><br><span class=\"line\">        &quot;$in&quot;: [</span><br><span class=\"line\">            &quot;pp-0&quot;,</span><br><span class=\"line\">            &quot;pp-1&quot;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// _id 主键的$in 查询</span><br><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class=\"line\">    &quot;_id&quot;: &#123;</span><br><span class=\"line\">        &quot;$in&quot;: [</span><br><span class=\"line\">            ObjectId(&quot;59cb4952d44efa2eb45d4bf7&quot;),</span><br><span class=\"line\">            ObjectId(&quot;59cb4952d44efa2eb45d4bf8&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Mysql </strong> 也是毫秒级，时间忽略不计</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> product <span class=\"keyword\">where</span> code <span class=\"keyword\">in</span> (<span class=\"string\">'pp-0'</span>,<span class=\"string\">'pp-4'</span>); // 0.0000 sec</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: Mongodb 和 Mysql 的性能测试<br>description: 基于Windows 7上来测试Mongodb和Mysql在一对多的场景下的性能<br>…<br>尝试测试Mongodb 和 Mysql的性能，测试/数据导入代码：<a href=\"https://github.com/choelea/mongo-vs-mysql\" target=\"_blank\" rel=\"noopener\">github: mongo-vs-mysql</a></p>\n<blockquote>\n<p>性能比较很复杂，不能简单就说谁的性能高，谁的低。要基于场景，基于并发请求数量来谈，同时也要知道如何调优，本文只是初探，在没有任何调优的基础上，在本地windows 7上进行测试。</p>\n</blockquote>\n<h1 id=\"版本及环境\"><a href=\"#版本及环境\" class=\"headerlink\" title=\"版本及环境\"></a>版本及环境</h1><ul>\n<li>操作系统：  windows 7 </li>\n<li>硬件环境： （只做对比，mongodb和mysql都装在同一台机器上） </li>\n<li>mongodb：  3.2.5</li>\n<li>mysql：    5.7</li>\n</ul>\n<h1 id=\"Data-demo\"><a href=\"#Data-demo\" class=\"headerlink\" title=\"Data-demo\"></a>Data-demo</h1><p>Data-demo 是一个Spring Boot的项目， 通过Spring Boot的CommandLineRunner来批量动态插入1000,020 条数据。</p>\n<p>数据结构采用常用的产品和类目的多对多的设计。<br><img src=\"http://tech.jiu-shu.com/Database-Technologies/mysql-product-category.png\" alt=\"mysql-product-category\"></p>\n<p><strong>Category 数据如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘1’</td>\n<td>‘cate-1’</td>\n<td>‘Category 1’</td>\n</tr>\n<tr>\n<td>‘2’</td>\n<td>‘cate-2’</td>\n<td>‘Category 2’</td>\n</tr>\n<tr>\n<td>‘3’</td>\n<td>‘cate-3’</td>\n<td>‘Category 3’</td>\n</tr>\n<tr>\n<td>‘4’</td>\n<td>‘cate-4’</td>\n<td>‘Category 4’</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Product 数据如下</strong></p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘1’</td>\n<td>‘p-0’</td>\n<td>‘product 0’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘2’</td>\n<td>‘p-1’</td>\n<td>‘product 1’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘3’</td>\n<td>‘p-2’</td>\n<td>‘product 2’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td> …</td>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n<tr>\n<td>‘1000000’</td>\n<td>‘p-999999’</td>\n<td>‘product 999999’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000001’</td>\n<td>‘pp-0’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000002’</td>\n<td>‘pp-1’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000003’</td>\n<td>‘pp-2’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000004’</td>\n<td>‘pp-3’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000005’</td>\n<td>‘pp-4’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000006’</td>\n<td>‘pp-5’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000007’</td>\n<td>‘pp-6’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000008’</td>\n<td>‘pp-7’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000009’</td>\n<td>‘pp-8’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000010’</td>\n<td>‘pp-9’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000011’</td>\n<td>‘pp-10’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000012’</td>\n<td>‘pp-11’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000013’</td>\n<td>‘pp-12’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000014’</td>\n<td>‘pp-13’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000015’</td>\n<td>‘pp-14’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000016’</td>\n<td>‘pp-15’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000017’</td>\n<td>‘pp-16’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000018’</td>\n<td>‘pp-17’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000019’</td>\n<td>‘pp-18’</td>\n<td>‘iphone’</td>\n<td>‘19’</td>\n</tr>\n<tr>\n<td>‘1000020’</td>\n<td>‘pp-19’</td>\n<td>‘iphone’</td>\n<td>‘19’    </td>\n</tr>\n</tbody>\n</table>\n<p>最后的二十行是用来方便查询验证的。</p>\n<p><strong>Product_Category</strong></p>\n<p>中间mapping的表格</p>\n<h1 id=\"Mongo-数据\"><a href=\"#Mongo-数据\" class=\"headerlink\" title=\"Mongo 数据\"></a>Mongo 数据</h1><p>采用了 Nodejs+express+mongoose 来导入mongo的数据. 项目express-mongoose-microservice-api-boilerplate中的config/test.env来配置mongo的数据库地址。<code>npm install</code> 然后运行命令<code>npm run  produceTestData</code> 可以初始化1000,020 条产品数据到mongodb。 数据类似mysql的产品数据：</p>\n<p>产品 Product<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;_id&quot;: &quot;59cb4952d44efa2eb45d4bf7&quot;,</span><br><span class=\"line\">\t&quot;code&quot;: &quot;p-0&quot;,</span><br><span class=\"line\">\t&quot;name&quot;: &quot;Product 0&quot;,</span><br><span class=\"line\">\t&quot;price&quot;: 19,</span><br><span class=\"line\">\t&quot;__v&quot;: 0,</span><br><span class=\"line\">\t&quot;categories&quot;: [</span><br><span class=\"line\">\t\t&quot;cate-1&quot;,</span><br><span class=\"line\">\t\t&quot;cate-2&quot;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有20条产品数据的categories中有cate-4</p>\n<h1 id=\"通过查询脚本直接测试：\"><a href=\"#通过查询脚本直接测试：\" class=\"headerlink\" title=\"通过查询脚本直接测试：\"></a>通过查询脚本直接测试：</h1><p>通过Robomongo 连接Mongodb来测试，通过mysql的workbench来完成mysql的脚本查询。</p>\n<h2 id=\"场景一：查询单个类目下的产品\"><a href=\"#场景一：查询单个类目下的产品\" class=\"headerlink\" title=\"场景一：查询单个类目下的产品\"></a>场景一：查询单个类目下的产品</h2><h4 id=\"mongo-查询所有的cate-4-的产品\"><a href=\"#mongo-查询所有的cate-4-的产品\" class=\"headerlink\" title=\"mongo 查询所有的cate-4 的产品\"></a>mongo 查询所有的cate-4 的产品</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;categories:&apos;cate-4&apos;&#125;) // 初次查询1.321 秒 紧接着的两次查询大概0.791 秒</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql-查询所有的cate-4-的产品\"><a href=\"#mysql-查询所有的cate-4-的产品\" class=\"headerlink\" title=\"mysql 查询所有的cate-4 的产品\"></a>mysql 查询所有的cate-4 的产品</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>  product p <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> product_category pc <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"keyword\">category</span> c <span class=\"keyword\">on</span> p.id=pc.product_id <span class=\"keyword\">and</span> pc.category_id=c.id <span class=\"keyword\">where</span> c.code =<span class=\"string\">'cate-4'</span>; <span class=\"comment\">-- 毫秒级，时间可以忽略不计, 产品和类目的code都是unique的索引，所以查询速度很快</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>  product p <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> product_category pc <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"keyword\">category</span> c <span class=\"keyword\">on</span> p.id=pc.product_id <span class=\"keyword\">and</span> pc.category_id=c.id <span class=\"keyword\">where</span> c.name =<span class=\"string\">'Category 4'</span>; <span class=\"comment\">-- 6.2秒，name不是索引，所以慢。（索引的用处毫无疑问，无需赘述）</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"场景二：查询多个类目下的产品\"><a href=\"#场景二：查询多个类目下的产品\" class=\"headerlink\" title=\"场景二：查询多个类目下的产品\"></a>场景二：查询多个类目下的产品</h2><p>查询所有cate-4 加上 cate-5 的产品。（实际上cate-5并不存在，不过不影响测试）</p>\n<h4 id=\"mongod\"><a href=\"#mongod\" class=\"headerlink\" title=\"mongod\"></a>mongod</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;categories:&#123;$in:[&apos;cate-4&apos;,&apos;cate-5&apos;]&#125;&#125;) // 0.89 秒； 和查询cate-4的产品相差不多，都是全表扫描</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code = &apos;cate-5&apos; or c.code=&apos;cate-4&apos;; -- 6.177 秒，</span><br><span class=\"line\">SELECT * FROM  product p inner join product_category pc inner join category c on p.id = pc.product_id and pc.category_id = c.id where c.code in(&apos;cate-5&apos;,&apos;cate-4&apos;); -- 6.24 秒</span><br></pre></td></tr></table></figure>\n<p>通过上面的测试可以看出，mysql数据库在数据体量大的时候，用or或者in都有很严重的性能问题，可以考虑使用union来代替。一般电商平台的处理方式：如果是后台维护功能应该从业务上来避免这种场景，如果是前端面向用户的功能，需要引入搜索引擎 比如： elasticsearch</p>\n<h2 id=\"场景三：单表无索引\"><a href=\"#场景三：单表无索引\" class=\"headerlink\" title=\"场景三：单表无索引\"></a>场景三：单表无索引</h2><p>查询名称是iphone的产品</p>\n<h4 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from product where name=&apos;iphone&apos;; -- 0.546 秒，全表扫描</span><br></pre></td></tr></table></figure>\n<h4 id=\"mongo\"><a href=\"#mongo\" class=\"headerlink\" title=\"mongo\"></a>mongo</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;name:&apos;iphone&apos;&#125;) // 0.428 秒</span><br></pre></td></tr></table></figure>\n<p>全表扫描两者并无太大的差距。</p>\n<h2 id=\"场景四：单表索引\"><a href=\"#场景四：单表索引\" class=\"headerlink\" title=\"场景四：单表索引\"></a>场景四：单表索引</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;code:&apos;pp-1&apos;&#125;)  </span><br><span class=\"line\">select * from product where code=&apos;pp-1&apos;;</span><br></pre></td></tr></table></figure>\n<p>一百万条数据，单表索引速度都是毫秒级，时间可以忽略不计。</p>\n<h2 id=\"场景五：单表索引字段使用In来查询\"><a href=\"#场景五：单表索引字段使用In来查询\" class=\"headerlink\" title=\"场景五：单表索引字段使用In来查询\"></a>场景五：单表索引字段使用In来查询</h2><p>场景二我们提到了Mysql中关联表时使用in查询的效率问题。下面测试下单表的In查询效率, 通过测试我们可以发现单表针对索引的in的查询都是毫秒级的。<br><strong>mongodb</strong> 历时0.004 sec. 索引被用上了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 非ID的索引字段</span><br><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class=\"line\">    &quot;code&quot;: &#123;</span><br><span class=\"line\">        &quot;$in&quot;: [</span><br><span class=\"line\">            &quot;pp-0&quot;,</span><br><span class=\"line\">            &quot;pp-1&quot;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// _id 主键的$in 查询</span><br><span class=\"line\">db.getCollection(&apos;products&apos;).find(&#123;</span><br><span class=\"line\">    &quot;_id&quot;: &#123;</span><br><span class=\"line\">        &quot;$in&quot;: [</span><br><span class=\"line\">            ObjectId(&quot;59cb4952d44efa2eb45d4bf7&quot;),</span><br><span class=\"line\">            ObjectId(&quot;59cb4952d44efa2eb45d4bf8&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Mysql </strong> 也是毫秒级，时间忽略不计</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> product <span class=\"keyword\">where</span> code <span class=\"keyword\">in</span> (<span class=\"string\">'pp-0'</span>,<span class=\"string\">'pp-4'</span>); // 0.0000 sec</span><br></pre></td></tr></table></figure>\n"},{"title":"Windows 常用命令","description":"收集Windows中常用的命令包括：设置环境变量; 查看服务; 查看进程; 列出文件夹名字等;","_content":"## 设置环境变量\ndoc 窗口设置环境变量\n```\nset MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m\n```\n\n## 删除服务\n删除服务名为mysql的服务： `sc delete mysql`\n## 端口相关\n### 端口占用的应用的PID\n\n```\nnetstat -aon|findstr \"8599\"\n```\n结果如下： （PID为2948）\n```\nC:\\Documents and Settings\\XPMUser>netstat -aon|findstr \"8599\"\n  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948\n```\n### 对应PID的进程\n```\ntasklist|findstr \"2948\"\n```\n结果如下\n```\nC:\\Documents and Settings\\XPMUser>tasklist|findstr \"2948\"\ntomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K\n```\n或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看--->选择列，将PID(进程标示符)前面的勾打上，点击确定。\n### 结束进程\n结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。\n\n## 列出文件夹下面的文件名称\n创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。\n```\nDIR *.* /B> LIST.TXT\n```","source":"_posts/Dev-Ops/Windows-Commands.md","raw":"---\ntitle: Windows 常用命令 \ndescription: 收集Windows中常用的命令包括：设置环境变量; 查看服务; 查看进程; 列出文件夹名字等;\n---\n## 设置环境变量\ndoc 窗口设置环境变量\n```\nset MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m\n```\n\n## 删除服务\n删除服务名为mysql的服务： `sc delete mysql`\n## 端口相关\n### 端口占用的应用的PID\n\n```\nnetstat -aon|findstr \"8599\"\n```\n结果如下： （PID为2948）\n```\nC:\\Documents and Settings\\XPMUser>netstat -aon|findstr \"8599\"\n  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948\n```\n### 对应PID的进程\n```\ntasklist|findstr \"2948\"\n```\n结果如下\n```\nC:\\Documents and Settings\\XPMUser>tasklist|findstr \"2948\"\ntomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K\n```\n或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看--->选择列，将PID(进程标示符)前面的勾打上，点击确定。\n### 结束进程\n结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。\n\n## 列出文件夹下面的文件名称\n创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。\n```\nDIR *.* /B> LIST.TXT\n```","slug":"Dev-Ops/Windows-Commands","published":1,"date":"2018-12-05T03:27:52.678Z","updated":"2018-12-05T03:33:43.793Z","_id":"cjpam3xe2000n7sq37hu5v6or","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><p>doc 窗口设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h2><p>删除服务名为mysql的服务： <code>sc delete mysql</code></p>\n<h2 id=\"端口相关\"><a href=\"#端口相关\" class=\"headerlink\" title=\"端口相关\"></a>端口相关</h2><h3 id=\"端口占用的应用的PID\"><a href=\"#端口占用的应用的PID\" class=\"headerlink\" title=\"端口占用的应用的PID\"></a>端口占用的应用的PID</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -aon|findstr &quot;8599&quot;</span><br></pre></td></tr></table></figure>\n<p>结果如下： （PID为2948）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Documents and Settings\\XPMUser&gt;netstat -aon|findstr &quot;8599&quot;</span><br><span class=\"line\">  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对应PID的进程\"><a href=\"#对应PID的进程\" class=\"headerlink\" title=\"对应PID的进程\"></a>对应PID的进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist|findstr &quot;2948&quot;</span><br></pre></td></tr></table></figure>\n<p>结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Documents and Settings\\XPMUser&gt;tasklist|findstr &quot;2948&quot;</span><br><span class=\"line\">tomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K</span><br></pre></td></tr></table></figure></p>\n<p>或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</p>\n<h3 id=\"结束进程\"><a href=\"#结束进程\" class=\"headerlink\" title=\"结束进程\"></a>结束进程</h3><p>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</p>\n<h2 id=\"列出文件夹下面的文件名称\"><a href=\"#列出文件夹下面的文件名称\" class=\"headerlink\" title=\"列出文件夹下面的文件名称\"></a>列出文件夹下面的文件名称</h2><p>创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR *.* /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><p>doc 窗口设置环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h2><p>删除服务名为mysql的服务： <code>sc delete mysql</code></p>\n<h2 id=\"端口相关\"><a href=\"#端口相关\" class=\"headerlink\" title=\"端口相关\"></a>端口相关</h2><h3 id=\"端口占用的应用的PID\"><a href=\"#端口占用的应用的PID\" class=\"headerlink\" title=\"端口占用的应用的PID\"></a>端口占用的应用的PID</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -aon|findstr &quot;8599&quot;</span><br></pre></td></tr></table></figure>\n<p>结果如下： （PID为2948）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Documents and Settings\\XPMUser&gt;netstat -aon|findstr &quot;8599&quot;</span><br><span class=\"line\">  TCP    0.0.0.0:8599           0.0.0.0:0              LISTENING       2948</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"对应PID的进程\"><a href=\"#对应PID的进程\" class=\"headerlink\" title=\"对应PID的进程\"></a>对应PID的进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist|findstr &quot;2948&quot;</span><br></pre></td></tr></table></figure>\n<p>结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Documents and Settings\\XPMUser&gt;tasklist|findstr &quot;2948&quot;</span><br><span class=\"line\">tomcat6.exe                 2948 RDP-Tcp#4               0     44,072 K</span><br></pre></td></tr></table></figure></p>\n<p>或者：打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列，点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</p>\n<h3 id=\"结束进程\"><a href=\"#结束进程\" class=\"headerlink\" title=\"结束进程\"></a>结束进程</h3><p>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</p>\n<h2 id=\"列出文件夹下面的文件名称\"><a href=\"#列出文件夹下面的文件名称\" class=\"headerlink\" title=\"列出文件夹下面的文件名称\"></a>列出文件夹下面的文件名称</h2><p>创建一个bat文件, 加入下面的内容。 将这个bat文件放入文件夹内运行即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR *.* /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure></p>\n"},{"_content":"---\ntitle: Mysql 运维相关脚本收集\ndescription: Mysql 运维相关脚本收集\n...\nmysql 版本： 5.6\n\n# 建库及用户\n创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser\n```sql\nCREATE DATABASE  IF NOT EXISTS `dbname` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */\ngrant all privileges on dbname.* to dbuser@localhost identified by 'dbpassword';\n```\n# SQL 收集\n## 找出有记录的表\n```\nSELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'okchem' and table_rows > 0;\n```\n## 快速删除树形表数据\n如何快速删除树形比如：ProductCategory 这类模型的数据：\n```sql\nSET FOREIGN_KEY_CHECKS=0;\nDELETE FROM okchem.ProductCategory where id > 0;  -- id>0 可以去除错误\nSET FOREIGN_KEY_CHECKS=1;\n```\n> 采用where条件`where id > 0`可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.\n\n## 快速查询表的依赖\n查询表依赖那些表和查询那些表依赖此表； \n\n### 查询我依赖的：\n```\nSELECT TABLE_NAME,\n       COLUMN_NAME,\n       CONSTRAINT_NAME,\n       REFERENCED_TABLE_NAME,\n       REFERENCED_COLUMN_NAME\nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE TABLE_SCHEMA = \"schemaName\" \n      AND TABLE_NAME = \"TableName\" \n      AND REFERENCED_COLUMN_NAME IS NOT NULL;\n```\n\n### 查询依赖‘我的’：\n```\n      \nSELECT TABLE_NAME,\n       COLUMN_NAME,\n       CONSTRAINT_NAME,\n       REFERENCED_TABLE_NAME,\n       REFERENCED_COLUMN_NAME\nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE TABLE_SCHEMA = \"schemaName\" \n      AND REFERENCED_TABLE_NAME = \"TableName\";\n```\n\n##  删除重复的行\n\n```\nDELETE t1 FROM contacts t1\n        INNER JOIN\n    contacts t2 \nWHERE\n    t1.id < t2.id AND t1.email = t2.email; \n```\n// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件\n```\nDELETE t1 FROM contacts t1\n        INNER JOIN\n    contacts t2 \nWHERE\n    t1.id < t2.id AND t1.email = t2.email and t2.email in ('..',,,,,,,); \n```\n\n\n## 使用函数\n### 为空的时候给默认值\n```\nselect ifnull(p.isActive,0) from product\n```\n### 转换成JSON\n\n## 创建Function\n### Split delimited strings\n参考： https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/\n\n```\nCREATE FUNCTION SPLIT_STR(\n  x VARCHAR(255),\n  delim VARCHAR(12),\n  pos INT\n)\nRETURNS VARCHAR(255)\nRETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),\n       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),\n       delim, '');\n```\n# Mysql 分库备份脚本\n```\n#!/bin/sh\n#Backup databases into separated files excluding system schemas\nBACKUP_FOLDER=/home/okchem/mysqlbackup\nMYUSER=user\nMYPASS=password\nSOCKET=/data/mysql/mysql.sock\nMYCMD=\"mysql -u$MYUSER -p$MYPASS -S $SOCKET\"\nMYDUMP=\"mysqldump -u$MYUSER -p$MYPASS -S $SOCKET\"\n\nmkdir -p ${BACKUP_FOLDER}\n\n#for database in `$MYDUMP -e \"show databases;\"|sed '1,2d'|egrep -v \"mysql|schema\"`\nfor database in `$MYCMD -e \"show databases;\" | egrep -Evi \"database|mysql|schema|test\"`\ndo \n\t$MYDUMP $database >${BACKUP_FOLDER}/${database}_$(date +%Y%m%d).sql\n    #If compression is needed, use this command: $MYDUMP $database |gzip >/server/backup/${database}_$(date +$F).sql.gz\ndone\n\n```\n\n\n# Mysql 客户端导出数据\n\n在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：\n\n 1. 在mysql 服务器上导出文件，通过sftp上传至目标机器\n 2. 在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）\n\n## 验证环境\nLinux 系统：Centos 7\n## 安装Mysql Client\n参考：[Installing MySQL on Linux Using RPM Packages from Oracle](https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html)\n\n## Shell 脚本\n\n``` shell\n#!/bin/sh\n##############################################################################################################################################\n# This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file which can be used to verify the integrity.\n# Script will make folder named \"YYYYMMDD\", also the file name will follow the pattern A/I{tableName}YYYYMMDD{6 sequence number} such as I0100320170303000001\n##############################################################################################################################################\n\n##############Global Configuration begins ####################\n# Root folder where the data will be stored\nBEE_ROOT_GLOBAL=/data/b2bbuyerdata\nMYSQL_HOST=192.168.1.90\nMYSQL_PORT=3306\nMYSQL_USERNAME=username\nMYSQL_PASSWD=password\n##############Global Configuration ends ####################\n\n# exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5\n# .md5 file is used to verify data integrity. \nexportAndMD5Sum()\n{\n\tif [ \"$#\" != 2 ];then\n\t\techo  \"Usage: exportAndMD5Sum querySql tableName\";\n\t\texit;\n\tfi\n\t# Starting export data using mysql command\n\tSQL=$1;\n\ttableName=$2;\n\tTIMESTAMP=`date +%Y%m%d`\n\tBEE_ROOT=${BEE_ROOT_GLOBAL}/${TIMESTAMP}\n\t\n\t_tmpFile=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.tmp;\n\tdestFile=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.AVL;\n\tdestMD5File=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.CHK;\n\t\n\t# Create Folder\n\t[ ! -d \"$BEE_ROOT\" ] &&  mkdir \"$BEE_ROOT\"\n\t\n\t# Mysql command to output data into file\n\t`mysql -h ${MYSQL_HOST} -p${MYSQL_PORT} -u ${MYSQL_USERNAME} --password=${MYSQL_PASSWD} -e \"${SQL}\" > \"${_tmpFile}\"`\n\t\n\t# If not empty(has records) change the file name, otherwise remove it.\n\tif [ -f \"$_tmpFile\" ] && [ -s \"$_tmpFile\" ]\n\t\tthen\n\t\t\tmv ${_tmpFile} ${destFile}\n\t\t\t#`md5sum ${destFile} > ${destMD5File}`\n\t\t\tmd5=($(md5sum ${destFile}))\n\t\t\techo $md5 > ${destMD5File}\n\t\telse\n\t\t\trm ${_tmpFile}\t\n\tfi\n}\nif [ \"$1\" = \"I\" ]; then\n\techo \"Starting export all data from mysql .............\"\n\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user\" \"I01001\"\n\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id\" \"I01002\"\n\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id\" \"I01003\"\nelse\n\techo \"Starting export yesterday's data from mysql .............\"\n\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01001\"\n\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01002\"\n\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01003\"\nfi\n```\n\n## 添加cron job\n参考cronjob `crontab -l`\n编辑cronjob `crontab -e`\n\n```\n0 1 * * * /data/scripts/mysql-job.sh A\n20 1 * * 0 /data/scripts/mysql-job.sh I\n```\n两个cron job 分别：\n\n 1. 每天1点执行\n 2. 每周日1点20 执行\n\n参考：crontab 时间可以参考： https://www.cnblogs.com/intval/p/5763929.html\n# Mysql 客户端导入数据\n## 从txt文件导入\n参考： https://blog.csdn.net/huihui520com/article/details/79080512\n\nhttps://segmentfault.com/a/1190000009333563\n\n```\nuse test;\nload data infile 'D:/tmp/hotwords.txt' into table hot fields terminated by ',' lines terminated by'\\r\\n';\nALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;\n```\n需要解决问题：--secure-file-priv option so it cannot execute this statement\n```\nwindows下：修改my.ini 在[mysqld]内加入secure_file_priv =\n\nlinux下：修改my.cnf 在[mysqld]内加入secure_file_priv =\n```\n\n# mysql 数据迁移\n## 自增字段问题\n新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：\n1. 取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）\n2. 删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是**N+1**）\n# Mysql 系统变量配置\n## windows 下安装的mysql的配置文件地址\n从服务列表`services.msc` 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：\nhttps://blog.csdn.net/postnull/article/details/72455768\n## Win 7 设置表明区分大小写\n参考： https://blog.csdn.net/postnull/article/details/72455768\n在my.ini 文件中添加 `lower_case_table_names=2` ","source":"_posts/Database-Technologies/Mysql-Administration.md","raw":"---\ntitle: Mysql 运维相关脚本收集\ndescription: Mysql 运维相关脚本收集\n...\nmysql 版本： 5.6\n\n# 建库及用户\n创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser\n```sql\nCREATE DATABASE  IF NOT EXISTS `dbname` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */\ngrant all privileges on dbname.* to dbuser@localhost identified by 'dbpassword';\n```\n# SQL 收集\n## 找出有记录的表\n```\nSELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'okchem' and table_rows > 0;\n```\n## 快速删除树形表数据\n如何快速删除树形比如：ProductCategory 这类模型的数据：\n```sql\nSET FOREIGN_KEY_CHECKS=0;\nDELETE FROM okchem.ProductCategory where id > 0;  -- id>0 可以去除错误\nSET FOREIGN_KEY_CHECKS=1;\n```\n> 采用where条件`where id > 0`可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.\n\n## 快速查询表的依赖\n查询表依赖那些表和查询那些表依赖此表； \n\n### 查询我依赖的：\n```\nSELECT TABLE_NAME,\n       COLUMN_NAME,\n       CONSTRAINT_NAME,\n       REFERENCED_TABLE_NAME,\n       REFERENCED_COLUMN_NAME\nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE TABLE_SCHEMA = \"schemaName\" \n      AND TABLE_NAME = \"TableName\" \n      AND REFERENCED_COLUMN_NAME IS NOT NULL;\n```\n\n### 查询依赖‘我的’：\n```\n      \nSELECT TABLE_NAME,\n       COLUMN_NAME,\n       CONSTRAINT_NAME,\n       REFERENCED_TABLE_NAME,\n       REFERENCED_COLUMN_NAME\nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE TABLE_SCHEMA = \"schemaName\" \n      AND REFERENCED_TABLE_NAME = \"TableName\";\n```\n\n##  删除重复的行\n\n```\nDELETE t1 FROM contacts t1\n        INNER JOIN\n    contacts t2 \nWHERE\n    t1.id < t2.id AND t1.email = t2.email; \n```\n// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件\n```\nDELETE t1 FROM contacts t1\n        INNER JOIN\n    contacts t2 \nWHERE\n    t1.id < t2.id AND t1.email = t2.email and t2.email in ('..',,,,,,,); \n```\n\n\n## 使用函数\n### 为空的时候给默认值\n```\nselect ifnull(p.isActive,0) from product\n```\n### 转换成JSON\n\n## 创建Function\n### Split delimited strings\n参考： https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/\n\n```\nCREATE FUNCTION SPLIT_STR(\n  x VARCHAR(255),\n  delim VARCHAR(12),\n  pos INT\n)\nRETURNS VARCHAR(255)\nRETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),\n       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),\n       delim, '');\n```\n# Mysql 分库备份脚本\n```\n#!/bin/sh\n#Backup databases into separated files excluding system schemas\nBACKUP_FOLDER=/home/okchem/mysqlbackup\nMYUSER=user\nMYPASS=password\nSOCKET=/data/mysql/mysql.sock\nMYCMD=\"mysql -u$MYUSER -p$MYPASS -S $SOCKET\"\nMYDUMP=\"mysqldump -u$MYUSER -p$MYPASS -S $SOCKET\"\n\nmkdir -p ${BACKUP_FOLDER}\n\n#for database in `$MYDUMP -e \"show databases;\"|sed '1,2d'|egrep -v \"mysql|schema\"`\nfor database in `$MYCMD -e \"show databases;\" | egrep -Evi \"database|mysql|schema|test\"`\ndo \n\t$MYDUMP $database >${BACKUP_FOLDER}/${database}_$(date +%Y%m%d).sql\n    #If compression is needed, use this command: $MYDUMP $database |gzip >/server/backup/${database}_$(date +$F).sql.gz\ndone\n\n```\n\n\n# Mysql 客户端导出数据\n\n在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：\n\n 1. 在mysql 服务器上导出文件，通过sftp上传至目标机器\n 2. 在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）\n\n## 验证环境\nLinux 系统：Centos 7\n## 安装Mysql Client\n参考：[Installing MySQL on Linux Using RPM Packages from Oracle](https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html)\n\n## Shell 脚本\n\n``` shell\n#!/bin/sh\n##############################################################################################################################################\n# This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file which can be used to verify the integrity.\n# Script will make folder named \"YYYYMMDD\", also the file name will follow the pattern A/I{tableName}YYYYMMDD{6 sequence number} such as I0100320170303000001\n##############################################################################################################################################\n\n##############Global Configuration begins ####################\n# Root folder where the data will be stored\nBEE_ROOT_GLOBAL=/data/b2bbuyerdata\nMYSQL_HOST=192.168.1.90\nMYSQL_PORT=3306\nMYSQL_USERNAME=username\nMYSQL_PASSWD=password\n##############Global Configuration ends ####################\n\n# exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5\n# .md5 file is used to verify data integrity. \nexportAndMD5Sum()\n{\n\tif [ \"$#\" != 2 ];then\n\t\techo  \"Usage: exportAndMD5Sum querySql tableName\";\n\t\texit;\n\tfi\n\t# Starting export data using mysql command\n\tSQL=$1;\n\ttableName=$2;\n\tTIMESTAMP=`date +%Y%m%d`\n\tBEE_ROOT=${BEE_ROOT_GLOBAL}/${TIMESTAMP}\n\t\n\t_tmpFile=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.tmp;\n\tdestFile=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.AVL;\n\tdestMD5File=${BEE_ROOT}/${tableName}${TIMESTAMP}000001.CHK;\n\t\n\t# Create Folder\n\t[ ! -d \"$BEE_ROOT\" ] &&  mkdir \"$BEE_ROOT\"\n\t\n\t# Mysql command to output data into file\n\t`mysql -h ${MYSQL_HOST} -p${MYSQL_PORT} -u ${MYSQL_USERNAME} --password=${MYSQL_PASSWD} -e \"${SQL}\" > \"${_tmpFile}\"`\n\t\n\t# If not empty(has records) change the file name, otherwise remove it.\n\tif [ -f \"$_tmpFile\" ] && [ -s \"$_tmpFile\" ]\n\t\tthen\n\t\t\tmv ${_tmpFile} ${destFile}\n\t\t\t#`md5sum ${destFile} > ${destMD5File}`\n\t\t\tmd5=($(md5sum ${destFile}))\n\t\t\techo $md5 > ${destMD5File}\n\t\telse\n\t\t\trm ${_tmpFile}\t\n\tfi\n}\nif [ \"$1\" = \"I\" ]; then\n\techo \"Starting export all data from mysql .............\"\n\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user\" \"I01001\"\n\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id\" \"I01002\"\n\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id\" \"I01003\"\nelse\n\techo \"Starting export yesterday's data from mysql .............\"\n\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01001\"\n\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01002\"\n\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp < (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp > ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01003\"\nfi\n```\n\n## 添加cron job\n参考cronjob `crontab -l`\n编辑cronjob `crontab -e`\n\n```\n0 1 * * * /data/scripts/mysql-job.sh A\n20 1 * * 0 /data/scripts/mysql-job.sh I\n```\n两个cron job 分别：\n\n 1. 每天1点执行\n 2. 每周日1点20 执行\n\n参考：crontab 时间可以参考： https://www.cnblogs.com/intval/p/5763929.html\n# Mysql 客户端导入数据\n## 从txt文件导入\n参考： https://blog.csdn.net/huihui520com/article/details/79080512\n\nhttps://segmentfault.com/a/1190000009333563\n\n```\nuse test;\nload data infile 'D:/tmp/hotwords.txt' into table hot fields terminated by ',' lines terminated by'\\r\\n';\nALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;\n```\n需要解决问题：--secure-file-priv option so it cannot execute this statement\n```\nwindows下：修改my.ini 在[mysqld]内加入secure_file_priv =\n\nlinux下：修改my.cnf 在[mysqld]内加入secure_file_priv =\n```\n\n# mysql 数据迁移\n## 自增字段问题\n新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：\n1. 取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）\n2. 删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是**N+1**）\n# Mysql 系统变量配置\n## windows 下安装的mysql的配置文件地址\n从服务列表`services.msc` 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：\nhttps://blog.csdn.net/postnull/article/details/72455768\n## Win 7 设置表明区分大小写\n参考： https://blog.csdn.net/postnull/article/details/72455768\n在my.ini 文件中添加 `lower_case_table_names=2` ","slug":"Database-Technologies/Mysql-Administration","published":1,"date":"2018-12-05T03:27:52.638Z","updated":"2018-11-05T06:06:01.816Z","_id":"cjpam3xe2000o7sq3uhpexc4z","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title: Mysql 运维相关脚本收集<br>description: Mysql 运维相关脚本收集<br>…<br>mysql 版本： 5.6</p>\n<h1 id=\"建库及用户\"><a href=\"#建库及用户\" class=\"headerlink\" title=\"建库及用户\"></a>建库及用户</h1><p>创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span>  <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`dbname`</span> <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> dbname.* <span class=\"keyword\">to</span> dbuser@localhost <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'dbpassword'</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"SQL-收集\"><a href=\"#SQL-收集\" class=\"headerlink\" title=\"SQL 收集\"></a>SQL 收集</h1><h2 id=\"找出有记录的表\"><a href=\"#找出有记录的表\" class=\"headerlink\" title=\"找出有记录的表\"></a>找出有记录的表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = &apos;okchem&apos; and table_rows &gt; 0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速删除树形表数据\"><a href=\"#快速删除树形表数据\" class=\"headerlink\" title=\"快速删除树形表数据\"></a>快速删除树形表数据</h2><p>如何快速删除树形比如：ProductCategory 这类模型的数据：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> okchem.ProductCategory <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">0</span>;  <span class=\"comment\">-- id&gt;0 可以去除错误</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>采用where条件<code>where id &gt; 0</code>可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p>\n</blockquote>\n<h2 id=\"快速查询表的依赖\"><a href=\"#快速查询表的依赖\" class=\"headerlink\" title=\"快速查询表的依赖\"></a>快速查询表的依赖</h2><p>查询表依赖那些表和查询那些表依赖此表； </p>\n<h3 id=\"查询我依赖的：\"><a href=\"#查询我依赖的：\" class=\"headerlink\" title=\"查询我依赖的：\"></a>查询我依赖的：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT TABLE_NAME,</span><br><span class=\"line\">       COLUMN_NAME,</span><br><span class=\"line\">       CONSTRAINT_NAME,</span><br><span class=\"line\">       REFERENCED_TABLE_NAME,</span><br><span class=\"line\">       REFERENCED_COLUMN_NAME</span><br><span class=\"line\">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class=\"line\">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class=\"line\">      AND TABLE_NAME = &quot;TableName&quot; </span><br><span class=\"line\">      AND REFERENCED_COLUMN_NAME IS NOT NULL;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询依赖‘我的’：\"><a href=\"#查询依赖‘我的’：\" class=\"headerlink\" title=\"查询依赖‘我的’：\"></a>查询依赖‘我的’：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      </span><br><span class=\"line\">SELECT TABLE_NAME,</span><br><span class=\"line\">       COLUMN_NAME,</span><br><span class=\"line\">       CONSTRAINT_NAME,</span><br><span class=\"line\">       REFERENCED_TABLE_NAME,</span><br><span class=\"line\">       REFERENCED_COLUMN_NAME</span><br><span class=\"line\">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class=\"line\">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class=\"line\">      AND REFERENCED_TABLE_NAME = &quot;TableName&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除重复的行\"><a href=\"#删除重复的行\" class=\"headerlink\" title=\"删除重复的行\"></a>删除重复的行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE t1 FROM contacts t1</span><br><span class=\"line\">        INNER JOIN</span><br><span class=\"line\">    contacts t2 </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    t1.id &lt; t2.id AND t1.email = t2.email;</span><br></pre></td></tr></table></figure>\n<p>// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE t1 FROM contacts t1</span><br><span class=\"line\">        INNER JOIN</span><br><span class=\"line\">    contacts t2 </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    t1.id &lt; t2.id AND t1.email = t2.email and t2.email in (&apos;..&apos;,,,,,,,);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"></a>使用函数</h2><h3 id=\"为空的时候给默认值\"><a href=\"#为空的时候给默认值\" class=\"headerlink\" title=\"为空的时候给默认值\"></a>为空的时候给默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ifnull(p.isActive,0) from product</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换成JSON\"><a href=\"#转换成JSON\" class=\"headerlink\" title=\"转换成JSON\"></a>转换成JSON</h3><h2 id=\"创建Function\"><a href=\"#创建Function\" class=\"headerlink\" title=\"创建Function\"></a>创建Function</h2><h3 id=\"Split-delimited-strings\"><a href=\"#Split-delimited-strings\" class=\"headerlink\" title=\"Split delimited strings\"></a>Split delimited strings</h3><p>参考： <a href=\"https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/\" target=\"_blank\" rel=\"noopener\">https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE FUNCTION SPLIT_STR(</span><br><span class=\"line\">  x VARCHAR(255),</span><br><span class=\"line\">  delim VARCHAR(12),</span><br><span class=\"line\">  pos INT</span><br><span class=\"line\">)</span><br><span class=\"line\">RETURNS VARCHAR(255)</span><br><span class=\"line\">RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),</span><br><span class=\"line\">       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),</span><br><span class=\"line\">       delim, &apos;&apos;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql-分库备份脚本\"><a href=\"#Mysql-分库备份脚本\" class=\"headerlink\" title=\"Mysql 分库备份脚本\"></a>Mysql 分库备份脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#Backup databases into separated files excluding system schemas</span><br><span class=\"line\">BACKUP_FOLDER=/home/okchem/mysqlbackup</span><br><span class=\"line\">MYUSER=user</span><br><span class=\"line\">MYPASS=password</span><br><span class=\"line\">SOCKET=/data/mysql/mysql.sock</span><br><span class=\"line\">MYCMD=&quot;mysql -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class=\"line\">MYDUMP=&quot;mysqldump -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;BACKUP_FOLDER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#for database in `$MYDUMP -e &quot;show databases;&quot;|sed &apos;1,2d&apos;|egrep -v &quot;mysql|schema&quot;`</span><br><span class=\"line\">for database in `$MYCMD -e &quot;show databases;&quot; | egrep -Evi &quot;database|mysql|schema|test&quot;`</span><br><span class=\"line\">do </span><br><span class=\"line\">\t$MYDUMP $database &gt;$&#123;BACKUP_FOLDER&#125;/$&#123;database&#125;_$(date +%Y%m%d).sql</span><br><span class=\"line\">    #If compression is needed, use this command: $MYDUMP $database |gzip &gt;/server/backup/$&#123;database&#125;_$(date +$F).sql.gz</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql-客户端导出数据\"><a href=\"#Mysql-客户端导出数据\" class=\"headerlink\" title=\"Mysql 客户端导出数据\"></a>Mysql 客户端导出数据</h1><p>在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：</p>\n<ol>\n<li>在mysql 服务器上导出文件，通过sftp上传至目标机器</li>\n<li>在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）</li>\n</ol>\n<h2 id=\"验证环境\"><a href=\"#验证环境\" class=\"headerlink\" title=\"验证环境\"></a>验证环境</h2><p>Linux 系统：Centos 7</p>\n<h2 id=\"安装Mysql-Client\"><a href=\"#安装Mysql-Client\" class=\"headerlink\" title=\"安装Mysql Client\"></a>安装Mysql Client</h2><p>参考：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html\" target=\"_blank\" rel=\"noopener\">Installing MySQL on Linux Using RPM Packages from Oracle</a></p>\n<h2 id=\"Shell-脚本\"><a href=\"#Shell-脚本\" class=\"headerlink\" title=\"Shell 脚本\"></a>Shell 脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################################################################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file <span class=\"built_in\">which</span> can be used to verify the integrity.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Script will make folder named <span class=\"string\">\"YYYYMMDD\"</span>, also the file name will follow the pattern A/I&#123;tableName&#125;YYYYMMDD&#123;6 sequence number&#125; such as I0100320170303000001</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################################################################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############Global Configuration begins ####################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Root folder <span class=\"built_in\">where</span> the data will be stored</span></span><br><span class=\"line\">BEE_ROOT_GLOBAL=/data/b2bbuyerdata</span><br><span class=\"line\">MYSQL_HOST=192.168.1.90</span><br><span class=\"line\">MYSQL_PORT=3306</span><br><span class=\"line\">MYSQL_USERNAME=username</span><br><span class=\"line\">MYSQL_PASSWD=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############Global Configuration ends ####################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> .md5 file is used to verify data integrity. </span></span><br><span class=\"line\">exportAndMD5Sum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif [ \"$#\" != 2 ];then</span><br><span class=\"line\">\t\techo  \"Usage: exportAndMD5Sum querySql tableName\";</span><br><span class=\"line\">\t\texit;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Starting <span class=\"built_in\">export</span> data using mysql <span class=\"built_in\">command</span></span></span><br><span class=\"line\">\tSQL=$1;</span><br><span class=\"line\">\ttableName=$2;</span><br><span class=\"line\">\tTIMESTAMP=`date +%Y%m%d`</span><br><span class=\"line\">\tBEE_ROOT=$&#123;BEE_ROOT_GLOBAL&#125;/$&#123;TIMESTAMP&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_tmpFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.tmp;</span><br><span class=\"line\">\tdestFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.AVL;</span><br><span class=\"line\">\tdestMD5File=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.CHK;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Create Folder</span></span><br><span class=\"line\">\t[ ! -d \"$BEE_ROOT\" ] &amp;&amp;  mkdir \"$BEE_ROOT\"</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Mysql <span class=\"built_in\">command</span> to output data into file</span></span><br><span class=\"line\">\t`mysql -h $&#123;MYSQL_HOST&#125; -p$&#123;MYSQL_PORT&#125; -u $&#123;MYSQL_USERNAME&#125; --password=$&#123;MYSQL_PASSWD&#125; -e \"$&#123;SQL&#125;\" &gt; \"$&#123;_tmpFile&#125;\"`</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> If not empty(has records) change the file name, otherwise remove it.</span></span><br><span class=\"line\">\tif [ -f \"$_tmpFile\" ] &amp;&amp; [ -s \"$_tmpFile\" ]</span><br><span class=\"line\">\t\tthen</span><br><span class=\"line\">\t\t\tmv $&#123;_tmpFile&#125; $&#123;destFile&#125;</span><br><span class=\"line\"><span class=\"meta\">\t\t\t#</span><span class=\"bash\">`md5sum <span class=\"variable\">$&#123;destFile&#125;</span> &gt; <span class=\"variable\">$&#123;destMD5File&#125;</span>`</span></span><br><span class=\"line\">\t\t\tmd5=($(md5sum $&#123;destFile&#125;))</span><br><span class=\"line\">\t\t\techo $md5 &gt; $&#123;destMD5File&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\trm $&#123;_tmpFile&#125;\t</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if [ \"$1\" = \"I\" ]; then</span><br><span class=\"line\">\techo \"Starting export all data from mysql .............\"</span><br><span class=\"line\">\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user\" \"I01001\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id\" \"I01002\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id\" \"I01003\"</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo \"Starting export yesterday's data from mysql .............\"</span><br><span class=\"line\">\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01001\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01002\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01003\"</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加cron-job\"><a href=\"#添加cron-job\" class=\"headerlink\" title=\"添加cron job\"></a>添加cron job</h2><p>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class=\"line\">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure>\n<p>两个cron job 分别：</p>\n<ol>\n<li>每天1点执行</li>\n<li>每周日1点20 执行</li>\n</ol>\n<p>参考：crontab 时间可以参考： <a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a></p>\n<h1 id=\"Mysql-客户端导入数据\"><a href=\"#Mysql-客户端导入数据\" class=\"headerlink\" title=\"Mysql 客户端导入数据\"></a>Mysql 客户端导入数据</h1><h2 id=\"从txt文件导入\"><a href=\"#从txt文件导入\" class=\"headerlink\" title=\"从txt文件导入\"></a>从txt文件导入</h2><p>参考： <a href=\"https://blog.csdn.net/huihui520com/article/details/79080512\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huihui520com/article/details/79080512</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000009333563\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009333563</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test;</span><br><span class=\"line\">load data infile &apos;D:/tmp/hotwords.txt&apos; into table hot fields terminated by &apos;,&apos; lines terminated by&apos;\\r\\n&apos;;</span><br><span class=\"line\">ALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n<p>需要解决问题：–secure-file-priv option so it cannot execute this statement<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下：修改my.ini 在[mysqld]内加入secure_file_priv =</span><br><span class=\"line\"></span><br><span class=\"line\">linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"mysql-数据迁移\"><a href=\"#mysql-数据迁移\" class=\"headerlink\" title=\"mysql 数据迁移\"></a>mysql 数据迁移</h1><h2 id=\"自增字段问题\"><a href=\"#自增字段问题\" class=\"headerlink\" title=\"自增字段问题\"></a>自增字段问题</h2><p>新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：</p>\n<ol>\n<li>取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）</li>\n<li>删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是<strong>N+1</strong>）<h1 id=\"Mysql-系统变量配置\"><a href=\"#Mysql-系统变量配置\" class=\"headerlink\" title=\"Mysql 系统变量配置\"></a>Mysql 系统变量配置</h1><h2 id=\"windows-下安装的mysql的配置文件地址\"><a href=\"#windows-下安装的mysql的配置文件地址\" class=\"headerlink\" title=\"windows 下安装的mysql的配置文件地址\"></a>windows 下安装的mysql的配置文件地址</h2>从服务列表<code>services.msc</code> 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：<br><a href=\"https://blog.csdn.net/postnull/article/details/72455768\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/postnull/article/details/72455768</a><h2 id=\"Win-7-设置表明区分大小写\"><a href=\"#Win-7-设置表明区分大小写\" class=\"headerlink\" title=\"Win 7 设置表明区分大小写\"></a>Win 7 设置表明区分大小写</h2>参考： <a href=\"https://blog.csdn.net/postnull/article/details/72455768\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/postnull/article/details/72455768</a><br>在my.ini 文件中添加 <code>lower_case_table_names=2</code> </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title: Mysql 运维相关脚本收集<br>description: Mysql 运维相关脚本收集<br>…<br>mysql 版本： 5.6</p>\n<h1 id=\"建库及用户\"><a href=\"#建库及用户\" class=\"headerlink\" title=\"建库及用户\"></a>建库及用户</h1><p>创建数据库dbname及用户dbuser/dbpassword 并授权数据库全不权限给用户dbuser<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span>  <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`dbname`</span> <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> all <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> dbname.* <span class=\"keyword\">to</span> dbuser@localhost <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'dbpassword'</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"SQL-收集\"><a href=\"#SQL-收集\" class=\"headerlink\" title=\"SQL 收集\"></a>SQL 收集</h1><h2 id=\"找出有记录的表\"><a href=\"#找出有记录的表\" class=\"headerlink\" title=\"找出有记录的表\"></a>找出有记录的表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT  * FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = &apos;okchem&apos; and table_rows &gt; 0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速删除树形表数据\"><a href=\"#快速删除树形表数据\" class=\"headerlink\" title=\"快速删除树形表数据\"></a>快速删除树形表数据</h2><p>如何快速删除树形比如：ProductCategory 这类模型的数据：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> okchem.ProductCategory <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">0</span>;  <span class=\"comment\">-- id&gt;0 可以去除错误</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>采用where条件<code>where id &gt; 0</code>可以去除如下错误：Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</p>\n</blockquote>\n<h2 id=\"快速查询表的依赖\"><a href=\"#快速查询表的依赖\" class=\"headerlink\" title=\"快速查询表的依赖\"></a>快速查询表的依赖</h2><p>查询表依赖那些表和查询那些表依赖此表； </p>\n<h3 id=\"查询我依赖的：\"><a href=\"#查询我依赖的：\" class=\"headerlink\" title=\"查询我依赖的：\"></a>查询我依赖的：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT TABLE_NAME,</span><br><span class=\"line\">       COLUMN_NAME,</span><br><span class=\"line\">       CONSTRAINT_NAME,</span><br><span class=\"line\">       REFERENCED_TABLE_NAME,</span><br><span class=\"line\">       REFERENCED_COLUMN_NAME</span><br><span class=\"line\">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class=\"line\">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class=\"line\">      AND TABLE_NAME = &quot;TableName&quot; </span><br><span class=\"line\">      AND REFERENCED_COLUMN_NAME IS NOT NULL;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询依赖‘我的’：\"><a href=\"#查询依赖‘我的’：\" class=\"headerlink\" title=\"查询依赖‘我的’：\"></a>查询依赖‘我的’：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      </span><br><span class=\"line\">SELECT TABLE_NAME,</span><br><span class=\"line\">       COLUMN_NAME,</span><br><span class=\"line\">       CONSTRAINT_NAME,</span><br><span class=\"line\">       REFERENCED_TABLE_NAME,</span><br><span class=\"line\">       REFERENCED_COLUMN_NAME</span><br><span class=\"line\">FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE</span><br><span class=\"line\">WHERE TABLE_SCHEMA = &quot;schemaName&quot; </span><br><span class=\"line\">      AND REFERENCED_TABLE_NAME = &quot;TableName&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除重复的行\"><a href=\"#删除重复的行\" class=\"headerlink\" title=\"删除重复的行\"></a>删除重复的行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE t1 FROM contacts t1</span><br><span class=\"line\">        INNER JOIN</span><br><span class=\"line\">    contacts t2 </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    t1.id &lt; t2.id AND t1.email = t2.email;</span><br></pre></td></tr></table></figure>\n<p>// 当表的记录太多，这种join很危险， 最好的方式是先查出来重复的email，再加上in的条件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE t1 FROM contacts t1</span><br><span class=\"line\">        INNER JOIN</span><br><span class=\"line\">    contacts t2 </span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    t1.id &lt; t2.id AND t1.email = t2.email and t2.email in (&apos;..&apos;,,,,,,,);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"></a>使用函数</h2><h3 id=\"为空的时候给默认值\"><a href=\"#为空的时候给默认值\" class=\"headerlink\" title=\"为空的时候给默认值\"></a>为空的时候给默认值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ifnull(p.isActive,0) from product</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换成JSON\"><a href=\"#转换成JSON\" class=\"headerlink\" title=\"转换成JSON\"></a>转换成JSON</h3><h2 id=\"创建Function\"><a href=\"#创建Function\" class=\"headerlink\" title=\"创建Function\"></a>创建Function</h2><h3 id=\"Split-delimited-strings\"><a href=\"#Split-delimited-strings\" class=\"headerlink\" title=\"Split delimited strings\"></a>Split delimited strings</h3><p>参考： <a href=\"https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/\" target=\"_blank\" rel=\"noopener\">https://blog.fedecarg.com/2009/02/22/mysql-split-string-function/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE FUNCTION SPLIT_STR(</span><br><span class=\"line\">  x VARCHAR(255),</span><br><span class=\"line\">  delim VARCHAR(12),</span><br><span class=\"line\">  pos INT</span><br><span class=\"line\">)</span><br><span class=\"line\">RETURNS VARCHAR(255)</span><br><span class=\"line\">RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),</span><br><span class=\"line\">       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),</span><br><span class=\"line\">       delim, &apos;&apos;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql-分库备份脚本\"><a href=\"#Mysql-分库备份脚本\" class=\"headerlink\" title=\"Mysql 分库备份脚本\"></a>Mysql 分库备份脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#Backup databases into separated files excluding system schemas</span><br><span class=\"line\">BACKUP_FOLDER=/home/okchem/mysqlbackup</span><br><span class=\"line\">MYUSER=user</span><br><span class=\"line\">MYPASS=password</span><br><span class=\"line\">SOCKET=/data/mysql/mysql.sock</span><br><span class=\"line\">MYCMD=&quot;mysql -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class=\"line\">MYDUMP=&quot;mysqldump -u$MYUSER -p$MYPASS -S $SOCKET&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p $&#123;BACKUP_FOLDER&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#for database in `$MYDUMP -e &quot;show databases;&quot;|sed &apos;1,2d&apos;|egrep -v &quot;mysql|schema&quot;`</span><br><span class=\"line\">for database in `$MYCMD -e &quot;show databases;&quot; | egrep -Evi &quot;database|mysql|schema|test&quot;`</span><br><span class=\"line\">do </span><br><span class=\"line\">\t$MYDUMP $database &gt;$&#123;BACKUP_FOLDER&#125;/$&#123;database&#125;_$(date +%Y%m%d).sql</span><br><span class=\"line\">    #If compression is needed, use this command: $MYDUMP $database |gzip &gt;/server/backup/$&#123;database&#125;_$(date +$F).sql.gz</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql-客户端导出数据\"><a href=\"#Mysql-客户端导出数据\" class=\"headerlink\" title=\"Mysql 客户端导出数据\"></a>Mysql 客户端导出数据</h1><p>在mysql 服务端可以很方便的导出到文件，也有灵活的选择。 如果需要导出的文件到其他服务器，不在mysql服务器上。 有两个选择：</p>\n<ol>\n<li>在mysql 服务器上导出文件，通过sftp上传至目标机器</li>\n<li>在目标机器安装mysql 客户端，通过shell 脚本来导出数据 （此篇关注点）</li>\n</ol>\n<h2 id=\"验证环境\"><a href=\"#验证环境\" class=\"headerlink\" title=\"验证环境\"></a>验证环境</h2><p>Linux 系统：Centos 7</p>\n<h2 id=\"安装Mysql-Client\"><a href=\"#安装Mysql-Client\" class=\"headerlink\" title=\"安装Mysql Client\"></a>安装Mysql Client</h2><p>参考：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html\" target=\"_blank\" rel=\"noopener\">Installing MySQL on Linux Using RPM Packages from Oracle</a></p>\n<h2 id=\"Shell-脚本\"><a href=\"#Shell-脚本\" class=\"headerlink\" title=\"Shell 脚本\"></a>Shell 脚本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################################################################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This script is used to retrieve data from mysql and output it into txt file. Also it will generate md5 file <span class=\"built_in\">which</span> can be used to verify the integrity.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Script will make folder named <span class=\"string\">\"YYYYMMDD\"</span>, also the file name will follow the pattern A/I&#123;tableName&#125;YYYYMMDD&#123;6 sequence number&#125; such as I0100320170303000001</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############################################################################################################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############Global Configuration begins ####################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Root folder <span class=\"built_in\">where</span> the data will be stored</span></span><br><span class=\"line\">BEE_ROOT_GLOBAL=/data/b2bbuyerdata</span><br><span class=\"line\">MYSQL_HOST=192.168.1.90</span><br><span class=\"line\">MYSQL_PORT=3306</span><br><span class=\"line\">MYSQL_USERNAME=username</span><br><span class=\"line\">MYSQL_PASSWD=password</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#############Global Configuration ends ####################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> exportAndMD5Sum querySql tableName. Output the query result into tableNameYYYYMMDD000001.txt and tableNameYYYYMMDD000001.md5</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> .md5 file is used to verify data integrity. </span></span><br><span class=\"line\">exportAndMD5Sum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif [ \"$#\" != 2 ];then</span><br><span class=\"line\">\t\techo  \"Usage: exportAndMD5Sum querySql tableName\";</span><br><span class=\"line\">\t\texit;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Starting <span class=\"built_in\">export</span> data using mysql <span class=\"built_in\">command</span></span></span><br><span class=\"line\">\tSQL=$1;</span><br><span class=\"line\">\ttableName=$2;</span><br><span class=\"line\">\tTIMESTAMP=`date +%Y%m%d`</span><br><span class=\"line\">\tBEE_ROOT=$&#123;BEE_ROOT_GLOBAL&#125;/$&#123;TIMESTAMP&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_tmpFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.tmp;</span><br><span class=\"line\">\tdestFile=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.AVL;</span><br><span class=\"line\">\tdestMD5File=$&#123;BEE_ROOT&#125;/$&#123;tableName&#125;$&#123;TIMESTAMP&#125;000001.CHK;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Create Folder</span></span><br><span class=\"line\">\t[ ! -d \"$BEE_ROOT\" ] &amp;&amp;  mkdir \"$BEE_ROOT\"</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> Mysql <span class=\"built_in\">command</span> to output data into file</span></span><br><span class=\"line\">\t`mysql -h $&#123;MYSQL_HOST&#125; -p$&#123;MYSQL_PORT&#125; -u $&#123;MYSQL_USERNAME&#125; --password=$&#123;MYSQL_PASSWD&#125; -e \"$&#123;SQL&#125;\" &gt; \"$&#123;_tmpFile&#125;\"`</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\"> If not empty(has records) change the file name, otherwise remove it.</span></span><br><span class=\"line\">\tif [ -f \"$_tmpFile\" ] &amp;&amp; [ -s \"$_tmpFile\" ]</span><br><span class=\"line\">\t\tthen</span><br><span class=\"line\">\t\t\tmv $&#123;_tmpFile&#125; $&#123;destFile&#125;</span><br><span class=\"line\"><span class=\"meta\">\t\t\t#</span><span class=\"bash\">`md5sum <span class=\"variable\">$&#123;destFile&#125;</span> &gt; <span class=\"variable\">$&#123;destMD5File&#125;</span>`</span></span><br><span class=\"line\">\t\t\tmd5=($(md5sum $&#123;destFile&#125;))</span><br><span class=\"line\">\t\t\techo $md5 &gt; $&#123;destMD5File&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\trm $&#123;_tmpFile&#125;\t</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if [ \"$1\" = \"I\" ]; then</span><br><span class=\"line\">\techo \"Starting export all data from mysql .............\"</span><br><span class=\"line\">\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user\" \"I01001\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id\" \"I01002\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id\" \"I01003\"</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo \"Starting export yesterday's data from mysql .............\"</span><br><span class=\"line\">\texportAndMD5Sum \"SELECT username,country,source,city,email,first_name,last_name,province,status,CAST(is_reveive_email AS UNSIGNED) AS is_reveive_email,created_stamp,last_updated_stamp FROM b2bbuyer.user where last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01001\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,a.address,a.city,a.company_name,a.country,a.first_name,CAST(a.is_default AS UNSIGNED) AS is_default ,a.last_name,a.province,a.tel_country_code,a.tel_ext,a.tel_no,a.zip_code,a.created_stamp,a.last_updated_stamp from b2bbuyer.user u inner join b2bbuyer.user_delivery_address a where a.user_id=u.id and a.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and a.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01002\"</span><br><span class=\"line\">\texportAndMD5Sum \"select u.username,c.email,c.address,c.city,c.company_name,c.contact,c.country,c.fax_country_code,c.fax_ext,c.fax_tel_no,c.main_products,c.province,c.register_no,c.tax_no,c.tel_country_code,c.tel_ext,c.tel_no,c.website from b2bbuyer.user u inner join b2bbuyer.user_company c where c.user_id=u.id and c.last_updated_stamp &lt; (UNIX_TIMESTAMP(CURDATE())*1000) and c.last_updated_stamp &gt; ((UNIX_TIMESTAMP(CURDATE())-60*60*24)*1000)\" \"A01003\"</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加cron-job\"><a href=\"#添加cron-job\" class=\"headerlink\" title=\"添加cron job\"></a>添加cron job</h2><p>参考cronjob <code>crontab -l</code><br>编辑cronjob <code>crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 * * * /data/scripts/mysql-job.sh A</span><br><span class=\"line\">20 1 * * 0 /data/scripts/mysql-job.sh I</span><br></pre></td></tr></table></figure>\n<p>两个cron job 分别：</p>\n<ol>\n<li>每天1点执行</li>\n<li>每周日1点20 执行</li>\n</ol>\n<p>参考：crontab 时间可以参考： <a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a></p>\n<h1 id=\"Mysql-客户端导入数据\"><a href=\"#Mysql-客户端导入数据\" class=\"headerlink\" title=\"Mysql 客户端导入数据\"></a>Mysql 客户端导入数据</h1><h2 id=\"从txt文件导入\"><a href=\"#从txt文件导入\" class=\"headerlink\" title=\"从txt文件导入\"></a>从txt文件导入</h2><p>参考： <a href=\"https://blog.csdn.net/huihui520com/article/details/79080512\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huihui520com/article/details/79080512</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000009333563\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009333563</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use test;</span><br><span class=\"line\">load data infile &apos;D:/tmp/hotwords.txt&apos; into table hot fields terminated by &apos;,&apos; lines terminated by&apos;\\r\\n&apos;;</span><br><span class=\"line\">ALTER TABLE okchem.hot ADD `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n<p>需要解决问题：–secure-file-priv option so it cannot execute this statement<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下：修改my.ini 在[mysqld]内加入secure_file_priv =</span><br><span class=\"line\"></span><br><span class=\"line\">linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"mysql-数据迁移\"><a href=\"#mysql-数据迁移\" class=\"headerlink\" title=\"mysql 数据迁移\"></a>mysql 数据迁移</h1><h2 id=\"自增字段问题\"><a href=\"#自增字段问题\" class=\"headerlink\" title=\"自增字段问题\"></a>自增字段问题</h2><p>新增表格，需要将旧的数据迁入新表。Mysql的自增字段默认行为：</p>\n<ol>\n<li>取最大的(比如： 创建表后，只插入一条数据， ID直接指定为9， 那么下一条插入的数据在不指定ID值的情况下，ID是10）</li>\n<li>删除数据后，ID的起点不会因为删除而改变。 （插入N条数据，假如这N条都是未指定ID的插入，也就是说下一个ID是N+1， 这个时候删除所有的数据，再以不指定ID的方式插入一条数据，这个时候ID是<strong>N+1</strong>）<h1 id=\"Mysql-系统变量配置\"><a href=\"#Mysql-系统变量配置\" class=\"headerlink\" title=\"Mysql 系统变量配置\"></a>Mysql 系统变量配置</h1><h2 id=\"windows-下安装的mysql的配置文件地址\"><a href=\"#windows-下安装的mysql的配置文件地址\" class=\"headerlink\" title=\"windows 下安装的mysql的配置文件地址\"></a>windows 下安装的mysql的配置文件地址</h2>从服务列表<code>services.msc</code> 中找到mysql的服务，右键查看属性中的“可执行文件路径”。参考：<br><a href=\"https://blog.csdn.net/postnull/article/details/72455768\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/postnull/article/details/72455768</a><h2 id=\"Win-7-设置表明区分大小写\"><a href=\"#Win-7-设置表明区分大小写\" class=\"headerlink\" title=\"Win 7 设置表明区分大小写\"></a>Win 7 设置表明区分大小写</h2>参考： <a href=\"https://blog.csdn.net/postnull/article/details/72455768\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/postnull/article/details/72455768</a><br>在my.ini 文件中添加 <code>lower_case_table_names=2</code> </li>\n</ol>\n"},{"_content":"---\ntitle:  MongoDB 命令 常用语句\ndescription: Mongodb常用命令\n...\n\nmongodb 常用命令收集\n## 导出JSON数据\n```\nmongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json\n```\n**参数说明**\n* -h 指定host 和端口\n* -d 指定db\n* -c 指定collection\n* --limit 导出多少条\n* --skip 跳过多少条\n* --jsonArray 保存为json数组\n* -u 指定用户\n* -p 指定密码\n* -o  指定导出文件路径output\n\n## 修改字段名称\n\n```\ndb.集合名称.update({}, {$rename:{\"旧键名称\":\"新键名称\"}}, false, true)\n```\n**参数说明**\n\n* 第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 \n* 第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n \n\n","source":"_posts/Database-Technologies/mongodb-command.md","raw":"---\ntitle:  MongoDB 命令 常用语句\ndescription: Mongodb常用命令\n...\n\nmongodb 常用命令收集\n## 导出JSON数据\n```\nmongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json\n```\n**参数说明**\n* -h 指定host 和端口\n* -d 指定db\n* -c 指定collection\n* --limit 导出多少条\n* --skip 跳过多少条\n* --jsonArray 保存为json数组\n* -u 指定用户\n* -p 指定密码\n* -o  指定导出文件路径output\n\n## 修改字段名称\n\n```\ndb.集合名称.update({}, {$rename:{\"旧键名称\":\"新键名称\"}}, false, true)\n```\n**参数说明**\n\n* 第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 \n* 第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n \n\n","slug":"Database-Technologies/mongodb-command","published":1,"date":"2018-12-05T03:27:52.638Z","updated":"2018-11-01T01:03:16.995Z","_id":"cjpam3xec000p7sq39ng5lvz9","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>title:  MongoDB 命令 常用语句<br>description: Mongodb常用命令<br>…</p>\n<p>mongodb 常用命令收集</p>\n<h2 id=\"导出JSON数据\"><a href=\"#导出JSON数据\" class=\"headerlink\" title=\"导出JSON数据\"></a>导出JSON数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>-h 指定host 和端口</li>\n<li>-d 指定db</li>\n<li>-c 指定collection</li>\n<li>–limit 导出多少条</li>\n<li>–skip 跳过多少条</li>\n<li>–jsonArray 保存为json数组</li>\n<li>-u 指定用户</li>\n<li>-p 指定密码</li>\n<li>-o  指定导出文件路径output</li>\n</ul>\n<h2 id=\"修改字段名称\"><a href=\"#修改字段名称\" class=\"headerlink\" title=\"修改字段名称\"></a>修改字段名称</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合名称.update(&#123;&#125;, &#123;$rename:&#123;&quot;旧键名称&quot;:&quot;新键名称&quot;&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 </li>\n<li>第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>title:  MongoDB 命令 常用语句<br>description: Mongodb常用命令<br>…</p>\n<p>mongodb 常用命令收集</p>\n<h2 id=\"导出JSON数据\"><a href=\"#导出JSON数据\" class=\"headerlink\" title=\"导出JSON数据\"></a>导出JSON数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoexport -h localhost:27017 -d guide-chem -c product --limit 10000 --skip 10000 --jsonArray -u okchem -p okchem -o /home/okchem/products.json</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>-h 指定host 和端口</li>\n<li>-d 指定db</li>\n<li>-c 指定collection</li>\n<li>–limit 导出多少条</li>\n<li>–skip 跳过多少条</li>\n<li>–jsonArray 保存为json数组</li>\n<li>-u 指定用户</li>\n<li>-p 指定密码</li>\n<li>-o  指定导出文件路径output</li>\n</ul>\n<h2 id=\"修改字段名称\"><a href=\"#修改字段名称\" class=\"headerlink\" title=\"修改字段名称\"></a>修改字段名称</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.集合名称.update(&#123;&#125;, &#123;$rename:&#123;&quot;旧键名称&quot;:&quot;新键名称&quot;&#125;&#125;, false, true)</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>第一个false表示：可选，这个参数的意思是，如果不存在update的记录，true为插入新的记录，默认是false，不插入。 </li>\n<li>第二个true表示：可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}